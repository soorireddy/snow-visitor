<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="DELETE">
        <category>sc</category>
        <client_script><![CDATA[function visitorCatalogController($scope, $http, spScUtil, spUtil, nowAttachmentHandler, $rootScope, $sanitize, $window, $sce, i18n, $timeout, $log, spAriaUtil, $document, spModal, $q, spAtf, $location, spAriaFocusManager, spSCNavStateManager, cabrillo, snAnalytics) {
    var c = this;
    c.isNative = cabrillo.isNative() && c.data.isMEE == 'true';
    c.isAgentApp = navigator.userAgent.indexOf('Agent') > -1;
    var webAnalyticsMsgSuffix = c.isNative ? " - NOW Mobile" : "";
    if (c.data.sc_cat_item && $scope.data.hasOwnProperty("_generatedItemGUID")) {
        c.data.sc_cat_item._attachmentGUID = $scope.data._generatedItemGUID;
    }

    $scope.m = $scope.data.msgs;

    if ($scope.data.redirectToItem) {
        $location.search("id=sc_cat_item&sys_id=" + $scope.data.sc_cat_item.sys_id);
        return;
    }

    if (c.isNative && c.data.hasDraftItem && !c.data.is_draft_item && !c.data.sc_cat_item.no_save_as_draft)
        cabrillo.message.showMessage(cabrillo.message.INFO_MESSAGE_STYLE, $scope.m.draftAlreadyExistCabrilloMsg);

    c.isAccessibilityEnabled = $window.g_accessibility;

    c.draftExistsWithLinkMsg = (!!c.data.sc_cat_item && !!c.data.sc_cat_item.name) ? $sce.trustAsHtml(generateMessageWithLink($scope.m.draftExistsMsg, {
        "message": $scope.m.hereMsg,
        "id": "view_draft",
        "link": "?id=my_requests&draftSearchText=" + encodeURIComponent(c.data.sc_cat_item.name)
    }, $scope.m.newDraftInfoMsg, false)) : "";

    $scope.isSCCartFixed = (c.options.display_cart_on_right === 'true' && c.isAccessibilityEnabled == 'false');
    $rootScope.isSCCartFixed = $scope.isSCCartFixed;

    $scope.setDefaultValue = !$scope.data.is_cart_item && !$scope.data.is_wishlist_item && !$scope.data.is_draft_item;

    $scope.disableControls = function() {
        return $scope.submitting || $scope.submitted || c.data.isPreview || !!$scope.validating;
    };

    if (c.data.isPreview) {
        spUtil.recordWatch($scope, "sc_item_produced_record", "record_key=" + c.data.sys_id, function(response, data) {
            $window.location.reload();
        });
    }
    $scope.getFocus = function(field) {
        var focusVar = (field.type == "reference") ? "sp_formfield_reference_" : "sp_formfield_";
        focusVar += (field.name.startsWith("IO:") ? field._children[0] : field.name);
        var elem = document.getElementById(focusVar);
        if (field.type == "url" && elem.style.display == "none")
            elem = document.getElementById(focusVar + "_unlock");
        else if (field.type == "sc_multi_row")
            elem = document.getElementById(field.sys_id + "_add_row");
        else if (field.type == "sc_attachment") {
            var buttonElem = angular.element(elem).find('button')[0];
            if (buttonElem)
                elem = buttonElem;
        } else if (field.type != "html") {
            var inputElem = angular.element(elem).find('input')[0];
            if (inputElem)
                elem = inputElem;
        }
        if (elem)
            elem.focus();
    };

    c.quantity = c.data.quantity ? c.data.quantity + "" : "1";
    c.mandatory = [];
    $scope.stickyHeaderTop = '0px';
    c.widget._debugContextMenu = [
        [i18n.getMessage("Open") + " sc_cat_item", function() {
            var item = c.data.sc_cat_item;
            $window.open("/sp_config?id=form&table=" + item.table + "&sys_id=" + item.sys_id);
        }]
    ];

    spUtil.recordWatch($scope, "sys_attachment", "table_sys_id=" + $scope.data._generatedItemGUID, function(response, data) {
        $scope.attachmentHandler.getAttachmentList();
        if (response.data) {
            var options = {};
            options.operation = response.data.operation;
            options.filename = response.data.display_value;
            options.state = (response.data.record && response.data.record.state) ? response.data.record.state.value : "";
            if (options.operation === 'update' && options.state === 'not_available')
                $rootScope.$broadcast("$$uiNotification", {
                    type: 'error',
                    message: i18n.getMessage('Upload file scan failed').withValues([options.filename])
                });
        }
    });


    $rootScope.$on('spModel.gForm.rendered', function() {
        $timeout(function() {
            spAtf.init().then(function(atf) {
                $scope._atf = atf;
                atf.expose('catalog_util', catalogUtil);
            });
        }, 10);
    });

    //	ATF helper object
    var catalogUtil = {
        updateGform: function() {
            $scope._atf.expose('g_form', spAtf.augmentForm(g_form));
        },

        addRow: function(fieldId, timeoutInMS) {
            if (timeoutInMS <= 0)
                timeoutInMS = 1000;
            var deferred = $q.defer();
            $scope.$broadcast("$sp.sc_multi_row.create_row", fieldId, $scope.data.sc_cat_item.sys_id);
            $scope.$on('spModel.gForm.initialized', function(e, gFormInstance) {
                if (gFormInstance.getSysId() == fieldId)
                    deferred.resolve();
            });
            $timeout(function() {
                deferred.reject();
            }, timeoutInMS);
            return deferred.promise;
        },

        submit: function(timeout) {
            var deferred = $q.defer();
            $scope.triggerOnSubmit(timeout);
            var cleanup = $scope.$on('$sp.service_catalog.form_submit_failed', function() {
                cleanup();
                deferred.reject("Can't submit form");
            });
            if (g_form) {
                g_form.$private.events.on('submitted', function() {
                    var cleanUp = $scope.$on('$sp.sc_cat_item.submitted', function(o, result) {
                        $timeout(function() {
                            cleanUp();
                            deferred.resolve(result);
                        }, 10);
                    });
                });
            } else
                deferred.reject('g_form not initialized');

            return deferred.promise;
        },

        addToCart: function(timeout) {
            var defer = $q.defer();
            $scope.triggerAddToCart(timeout);
            var cleanup = $scope.$on('$sp.service_catalog.form_submit_failed', function() {
                cleanup();
                defer.reject("Can't submit form");
            });
            if (g_form) {
                g_form.$private.events.on('submitted', function() {
                    var cleanup = $scope.$on('$sp.sc_cat_item.add_to_cart', function(o, result) {
                        $timeout(function() {
                            cleanup();
                            defer.resolve(result);
                        }, 10);
                    });
                });
            } else
                defer.reject('g_form not initialized');
            return defer.promise;
        },

        submitCatItem: function(timeout) {
            var defer = $q.defer();
            $scope.triggerOnSubmit(timeout);
            var cleanup = $scope.$on('$sp.service_catalog.form_submit_failed', function() {
                cleanup();
                defer.reject("Can't submit form");
            });
            if (g_form) {
                g_form.$private.events.on('submitted', function() {
                    if ($scope.data.sys_properties.twostep && $scope.data.sc_cat_item.request_method != "submit") {
                        defer.resolve();
                    } else { //When not two step, if reached this step means the form validation is done and it is the item submission that should be monitored
                        if (cleanup && typeof cleanup === 'function')
                            cleanup();

                        var cleanUp = $scope.$on('$sp.sc_cat_item.submitted', function(o, result) {
                            $timeout(function() {
                                cleanUp();
                                result.single_step = true;
                                defer.resolve(result);
                            }, 10);
                        });

                        var failedSubmitCleanUp = $scope.$on('$sp.sc_cat_item.submit_failed', function() {
                            failedSubmitCleanUp();
                            defer.reject("Can't submit form");
                        });
                    }
                });
            } else
                defer.reject('g_form not initialized');

            return defer.promise;
        },

        setQuantity: function(quantity) {
            if ($scope.c.data.sc_cat_item.sys_class_name !== "sc_cat_item_producer" && $scope.c.data.sc_cat_item.sys_class_name !== "std_change_record_producer") {
                $scope.c.quantity = quantity;
                $scope.$apply();
            }
        },

        getQuantity: function() {
            return $scope.c.quantity;
        },

        getPrice: function() {
            var obj = {};
            obj.price = $scope.data.sc_cat_item.price_display;
            obj.recurring_price = $scope.data.sc_cat_item.recurring_price_display;
            obj.recurring_frequency = $scope.data.sc_cat_item.recurring_frequency;
            return obj;
        }
    };

    c.showAddCartBtn = function() {
        return !$scope.submitted &&
            c.options.show_add_cart_button &&
            c.data.sc_cat_item.sys_class_name !== "sc_cat_item_producer" &&
            c.data.sc_cat_item.sys_class_name !== "std_change_record_producer" &&
            !c.data.sc_cat_item.no_cart && !c.data.is_cart_item;
    };

    c.showPrice = function() {
        return c.data.showPrices &&
            ((c.data.sc_cat_item.price ? true : false) ||
                (c.data.sc_cat_item.recurring_price ? true : false));
    };

    c.showDeliveryTime = function() {
        return !c.data.hideDeliveryTime &&
            !c.data.sc_cat_item.no_delivery_time &&
            (c.data.sc_cat_item.estimated_delivery_time ? true : false);
    };
    var i18nQuantity = i18n.getMessage("Quantity {0}");
    c.showQuantitySelector = function() {
        if (c.data.isMEE == 'true' && $('#catItemQuantity') != null) {
            var quantityElement = $('#catItemQuantity');
            $timeout(function() {
                var prevDiv = quantityElement.prev();
                var anchor = prevDiv.find('.select2-choice');
                anchor.attr('role', 'button').attr('tabindex', '0').attr('aria-label', i18nQuantity.withValues(['']));
                prevDiv.find('.select2-search-choice-close').attr('aria-hidden', 'true');
            }, 100);
        }

        return c.data.sc_cat_item.sys_class_name !== "sc_cat_item_producer" &&
            c.data.sc_cat_item.sys_class_name !== "std_change_record_producer" &&
            !c.data.sc_cat_item.no_quantity && !c.data.sc_cat_item.read_only_quantity &&
            (c.data.sc_cat_item.cart_guide === undefined || c.data.sc_cat_item.cart_guide === null) &&
            (!c.data.sc_cat_item.no_order_now || !c.data.sc_cat_item.no_cart);
    };
    c.showOrderNowButton = function() {
        return !$scope.data.is_cart_item && (c.data.sc_cat_item.use_sc_layout || !c.data.sc_cat_item.no_order_now);
    };
    c.showAddToWishlist = function() {
        return !$scope.submitted &&
            (c.data.showWishlist &&
                !c.data.sc_cat_item.no_wishlist && !c.data.is_draft_item &&
                !c.data.is_cart_item &&
                c.options.show_add_to_wishlist_button === 'true');
    };

    c.showDraftButtons = function() {
        return !!spScUtil.saveCatalogItem && !c.data.sc_cat_item.no_save_as_draft && !(c.options.hide_save_as_draft_button == "true") && !c.data.draft_buttons_hidden_via_property;
    };


    c.allowOrder = function() {
        if (c.data.sc_cat_item.use_sc_layout)
            return true;
        if (c.data.sc_cat_item.no_order)
            return false;
        if (c.data.sc_cat_item.no_order_now && c.data.sc_cat_item.no_cart)
            return false;
        return true;
    };

    c.showCart = function() {
        return c.data.can_create_cart_item && (c.data.is_cart_item ||
            c.showPrice() || c.showDeliveryTime() || c.showAddCartBtn() ||
            c.showOrderNowButton() || c.showAddToWishlist());
    };

    c.hideCartMsg = function() {
        $scope.data.showMsg = false;
    };

    c.showAttachments = function() {
        return !$scope.submitted &&
            c.data.sc_cat_item && !c.data.sc_cat_item.no_attachments &&
            c.data.sc_cat_item.sys_class_name !== "std_change_record_producer";
    };

    c.updateQuantity = function(item) {
        spAriaUtil.sendLiveMessage(c.data.msgs.updatedMsg + " " + item.name + " " + c.data.msgs.quantityToMsg + " " + c.quantity);
    };

    $scope.$on('dialog.upload_too_large.show', function(e) {
        $log.error($scope.m.largeAttachmentMsg);
        spUtil.addErrorMessage($scope.m.largeAttachmentMsg);
    });

    var ah = $scope.attachmentHandler = new nowAttachmentHandler(setAttachments, appendError);

    function appendError(error) {
        spUtil.addErrorMessage(error.msg + error.fileName);
    }
    ah.setParams($scope.data._attachmentTable, $scope.data._generatedItemGUID, 1024 * 1024 * $scope.data.maxAttachmentSize);

    function setAttachments(attachments, action) {
        if (!angular.equals($scope.attachments, attachments))
            $scope.attachments = attachments;
        if (action === "added") {
            spAriaUtil.sendLiveMessage($scope.m.attachmentAddedMsg);
            if ($scope.attachments.length > 0)
                $scope.data.sc_cat_item.attachment_submitted = true;
        }
        if (action === "renamed")
            spAriaUtil.sendLiveMessage($scope.m.renameSuccessMsg);
        if (action === "deleted") {
            spAriaUtil.sendLiveMessage($scope.m.deleteSuccessMsg);
            if ($scope.attachments.length == 0)
                $scope.data.sc_cat_item.attachment_submitted = false;
        }
        $scope.data.sc_cat_item.attachment_action_in_progress = false;
        spUtil.get($scope, {
            action: "from_attachment"
        });
    }
    if (c.showAttachments() &&
        (c.data.is_cart_item || c.data.is_wishlist_item || c.data.is_draft_item))
        $scope.attachmentHandler.getAttachmentList();
    $scope.confirmDeleteAttachment = function(attachment) {
        if (c.isNative) {
            if (confirm($scope.data.msgs.delete_attachment)) {
                $scope.data.sc_cat_item.attachment_action_in_progress = true;
                $scope.attachmentHandler.deleteAttachment(attachment);
                $scope.setFocusToAttachmentButton();
            }
        } else {
            spModal.confirm($scope.data.msgs.delete_attachment).then(function() {
                $scope.data.sc_cat_item.attachment_action_in_progress = true;
                $scope.attachmentHandler.deleteAttachment(attachment);
                $scope.setFocusToAttachmentButton();
            });
        }
    };
    $scope.dismissWishListMessage = function() {
        $scope.is_update_wishlist = false;
    };

    if ($scope.data.sc_cat_item) {

        /*if ($scope.data.sc_cat_item.content_type == 'external') {
        	$window.location.href = $scope.data.sc_cat_item.url;
        	return;
        }

        if ($scope.data.sc_cat_item.content_type == 'kb') {
        	$location.search("id=kb_article&sys_id=" + $scope.data.sc_cat_item.kb_article);
        	return;
        }*/

        $scope.data.sc_cat_item.trusted_description = $sce.trustAsHtml($scope.data.sc_cat_item.description);
        if (!$scope.data.sc_cat_item._fields || angular.equals($scope.data.sc_cat_item._fields, {}))
            $scope.data.no_fields = true;
        if ($scope.data.sc_cat_item.sys_class_name !== "sc_cat_item_producer" &&
            $scope.data.sc_cat_item.sys_class_name !== "std_change_record_producer") {
            if ($scope.data.sc_cat_item.request_method == "request")
                $scope.submitButtonMsg = $scope.m.requestMsg;
            else if ($scope.data.sc_cat_item.request_method == "submit")
                $scope.submitButtonMsg = $scope.m.submitMsg;
            else
                $scope.submitButtonMsg = $scope.m.orderNowMsg;
        } else {
            if ($scope.data.sc_cat_item.sys_class_name == "sc_cat_item_producer" && $scope.data.record_producer_label)
                $scope.submitButtonMsg = $scope.data.record_producer_label;
            else
                $scope.submitButtonMsg = $scope.m.submitMsg;
        }

        // Breadcrumbs
        if (!$scope.data.categories)
            $scope.data.categories = [];
        $scope.data.categories.forEach(function(category, index, categories) {
            categories[index].url = category.url + '&catalog_id=' + $scope.data.catalog_id;
        });
        if ($scope.data.is_wishlist_item) {
            $scope.data.categories.unshift({
                label: $scope.m.wishlistMsg,
                url: '?id=sc_wishlist'
            });
            $scope.data.categories.push({
                label: $scope.data.sc_cat_item.name,
                url: '#'
            });
        } else if ($scope.data.is_cart_item) {
            $scope.data.categories.unshift({
                label: $scope.m.cartMsg,
                url: '?id=sc_cart'
            });
            $scope.data.categories.push({
                label: $scope.data.sc_cat_item.name,
                url: '#'
            });
        } else if ($scope.data.is_draft_item) {
            $scope.data.categories.unshift({
                label: $scope.m.draftItemMsg,
                url: '?id=my_requests&selectDraftTab=true'
            });
            $scope.data.categories.unshift({
                label: $scope.m.myRequestsMsg,
                url: '?id=my_requests'
            });
            $scope.data.categories.push({
                label: $scope.data.draftItemName,
                url: '#'
            });
        } else if ($scope.data.categories.length > 0) {
            $scope.data.categories.unshift({
                label: $scope.data.sc_catalog || $scope.page.title,
                url: '?id=' + $scope.data.sc_category_page + "&catalog_id=" + $scope.data.catalog_id
            });
            $scope.data.categories.push({
                label: $scope.data.sc_cat_item.name,
                url: '#'
            });
            if ($scope.data.all_catalog_msg) {
                $scope.data.categories.unshift({
                    label: $scope.data.all_catalog_msg,
                    url: '?id=' + $scope.data.sc_category_page + "&catalog_id=-1"
                });
            }
        } else {
            $scope.data.categories.push({
                label: $scope.data.sc_cat_item.name,
                url: '#'
            });
        }

        $timeout(function() {
            $scope.$emit('sp.update.breadcrumbs', $scope.data.categories);
        });
        spUtil.setSearchPage('sc');

        // Set Title in Mobile
        if (c.isNative)
            cabrillo.viewLayout.setTitle($scope.data.sc_cat_item.name);

        // Set Title in Workspace
        else if ($scope.options.isServiceWorkspace)
            $window.postMessage({
                msg: 'CATALOG_ITEM_SET_TITLE',
                title: $scope.data.sc_cat_item.name
            }, $location.origin);

    } else {
        var notFoundBC = [{
            label: $scope.page.title,
            url: '?id=' + $scope.data.sc_catalog_page
        }];
        $timeout(function() {
            $scope.$emit('sp.update.breadcrumbs', notFoundBC);
        });
        spUtil.setSearchPage('sc');
    }
    c.getItemId = function() {
        return $scope.data.sc_cat_item ? $scope.data.sc_cat_item.sys_id : -1;
    };

    function showNativeMobileButtons() {
        if ($scope.data.sc_cat_item.sys_class_name == 'sc_cat_item_content')
            return;
        if (c.isNative) {
            cabrillo.viewLayout.setTitle($scope.data.sc_cat_item.name);
            if ($scope.data.is_cart_item)
                addCartItemButtons();
            else if ($scope.data.sc_cat_item.sys_class_name == "sc_cat_item_producer" || $scope.data.sc_cat_item.sys_class_name == "std_change_record_producer")
                addRPButton();
            else
                addOrderButtons();
        }
    }

    function nativeGoBackToCart() {
        cabrillo.viewLayout.setNavigationBarButtons();
        var button = [{
            imageName: 'back',
            buttonStyle: cabrillo.viewLayout.REPLACE_BACK_BUTTON_STYLE,
            enabled: true
        }];

        cabrillo.viewLayout.setNavigationBarButtons(button, function() {
            $location.search('id=sc_cart');
        });
    }

    function displayNativeButtons() {
        if (c.isNative && (!$scope.orderConfirmation && !$scope.saveConfirmation)) {
            cabrillo.viewLayout.setTitle($scope.data.sc_cat_item.name);
            showNativeMobileButtons();
            cabrillo.viewLayout.showBackButton();

            if ($scope.data.is_cart_item) {
                cabrillo.viewLayout.hideBackButton();
                cabrillo.viewLayout.setNavigationBarButtons();
                nativeGoBackToCart();
            }
        }
    }

    var mespClosePopupUnregister = $rootScope.$on("mesp.popup.close", function() {
        //Do not display cabrillo buttons when there is an active mrvs row as it will have it's own buttons.
        var activeRowElement = document.getElementById("mrvs_active_row");
        if (!activeRowElement)
            return;

        // Timeout is to give a better user experience otherwise when this popup opens,
        // the cabrillo buttons will be displayed immediately giving a bad user experience.
        $timeout(function() {
            displayNativeButtons();
        });
    });

    var mespOpenPopupUnregister = $rootScope.$on("mesp.popup.open", function() {
        // Timeout is to give a better user experience otherwise when this popup opens,
        // the cabrillo buttons will be displayed immediately giving a bad user experience.
        $timeout(function() {
            removeCabrilloButtons();
        });
    });

    if ($scope.options.isServiceWorkspace && $window.frameElement) {
        var workspaceParams = {};
        workspaceParams.sysparm_parent_table = $window.frameElement.getAttribute('parent-table') || $window.frameElement.dataParentTable;
        workspaceParams.sysparm_parent_sys_id = $window.frameElement.getAttribute('parent-sys-id') || $window.frameElement.dataParentSysId;
        //Extract the query if there is one passed in
        var urlParams = new URLSearchParams($window.frameElement.src);
        var params = Object.fromEntries(urlParams);
        if (params.query)
            workspaceParams.target_query = params.query;
        $scope.data.parentParams = workspaceParams;
    } else if (!$scope.options.isServiceWorkspace && $scope.options.parentTable && $scope.options.parentSysId) {
        var portalParentParams = {};
        portalParentParams.sysparm_parent_table = $scope.options.parentTable;
        portalParentParams.sysparm_parent_sys_id = $scope.options.parentSysId;
        $scope.data.parentParams = portalParentParams;
    }

    var g_form;
    $scope.$on('spModel.gForm.initialized', function(e, gFormInstance) {
        if (gFormInstance.getSysId() != -1 && gFormInstance.getSysId() != c.getItemId())
            return;
        g_form = gFormInstance;
        spSCNavStateManager.register(g_form);
        spSCNavStateManager.isNative(c.isNative);
        spSCNavStateManager.isPreview(c.data.isPreview);

        if (c.isNative) {
            cabrillo.viewLayout.setTitle($scope.data.sc_cat_item.name);
            $rootScope.$on('spModel.gForm.showNativeMobileButtons', displayNativeButtons);
        }

        if ($scope.setDefaultValue && c.options.requested_for_id && c.options.requested_for_display && $scope.data.sc_cat_item.requested_for_variable_name) {
            $scope.setDefaultValue = false;
            $scope.data.sc_cat_item.hideAlsoRequestFor = true;
            setValueInNextDigestCycle(g_form, c.options.requested_for_id, c.options.requested_for_display);
        } else if ($scope.setDefaultValue && $scope.data.parentParams && $scope.data.parentParams.sysparm_parent_table && $scope.data.parentParams.sysparm_parent_sys_id) {
            $scope.setDefaultValue = false;
            $scope.data.sc_cat_item.hideAlsoRequestFor = true;
            $scope.server.get({
                action: 'get_requested_for',
                parentParams: $scope.data.parentParams
            }).then(function(response) {
                if (response.data.requested_for) {
                    $scope.data.requested_for = response.data.requested_for;
                    setValueInNextDigestCycle(g_form, response.data.requested_for.id, response.data.requested_for.displayValue);
                }
            });
        }

        $timeout(function() {
            $rootScope.$emit('spModel.gForm.rendered', g_form);
            showNativeMobileButtons();
        }, 175);

        // This runs after all onSubmit scripts have executed
        g_form.$private.events.on('submitted', function() {
            cleanFailedSubmit();
            $scope.submitting = true;
            if ($scope.data.sc_cat_item.item_action === "order")
                getOne();
            else if ($scope.data.sc_cat_item.item_action === "add_to_cart")
                addToCart();
            else if ($scope.data.sc_cat_item.item_action == "update_cart")
                updateCart();

            spUtil.simulateFakeFormSubmitForAutoComplete('catalog-form', $scope.data.sc_cat_item._fields);
        });
    });

    function setValueInNextDigestCycle(g_form, value, displayValue) {
        $timeout(function() {
            g_form.setValue($scope.data.sc_cat_item.requested_for_variable_name, value, displayValue);
        });
    }

    function getVarData(fields) {
        var reqData = {};
        for (var obj in fields)
            reqData[fields[obj].name] = fields[obj].value;
        return reqData;
    }

    function getValidatedVarData(fields) {
        //Filtering out invalid masked variables, to avoid adding them to wishlist
        var validFields = Object.values(fields).filter(function(field) {
            return !(field.type == 'masked' && field.useConfirmation && field.value != field.confirmPassword);
        });
        return getVarData(validFields);
    }

    function addLink(url, msg, elem_id) {
        return "<a id=" + elem_id + " class='link alert-link' href=" + url + ">" + msg + "</a>";
    }

    function getAlsoRequestForValue(fields) {
        if ($scope.data.sc_cat_item.requested_for_variable_name) {
            var requested_for_variable = fields[$scope.data.sc_cat_item.requested_for_variable_name];
            if (!!requested_for_variable && requested_for_variable.hasOwnProperty('also_request_for_value'))
                return fields[$scope.data.sc_cat_item.requested_for_variable_name].also_request_for_value;

            return "";
        }
    }

    function confirmAlsoRequestedFor(successFn) {
        $scope.submitting = true;
        var alsoRequestFor = getAlsoRequestForValue($scope.data.sc_cat_item._fields);
        if (alsoRequestFor) {
            spModal.confirm($scope.m.alsoReqForClearConfirmMsg).then(successFn, function() {
                $scope.submitting = false;
            });
        } else
            successFn();
    }


    $scope.triggerAddToWishlist = function() {
        confirmAlsoRequestedFor(addToWishlist);
    };

    $scope.triggerSaveItem = function() {
        confirmAlsoRequestedFor(function() {
            if ($scope.data.hasDraftItem && !$scope.data.is_draft_item)
                showSaveAsDraftModal($scope.data.draftItemName);
            else
                saveCatalogItem($scope.data.draftItemName);
        });
    };

    function showSaveAsDraftModal(name) {
        var payload = {
            action: "save_item",
            draftName: name,
            message: $scope.m.save_draft_description,
            infoMessage: $scope.data.is_cart_item ? $scope.m.cartItemDeletionMsg : ($scope.data.is_wishlist_item ? $scope.m.wishlistItemDeletionMsg : null),
        };

        $scope.server.get(payload).then(function(response) {
            var saveItemModalCtrl;
            var unregisterSave = $scope.$on('$sp.service_catalog.save.cancel', function() {
                $scope.submitting = false;
                $timeout(function() {
                    if (saveItemModalCtrl)
                        saveItemModalCtrl.close();
                });
                $scope.saveConfirmation = false;
                displayNativeButtons();
            });
            var closeModalOnSave = $scope.$on('$sp.service_catalog.save.submitted', function(event, payload) {
                $timeout(function() {
                    if (saveItemModalCtrl)
                        saveItemModalCtrl.close();

                    $scope.saveConfirmation = false;
                    saveCatalogItem(payload.draft_name);
                });

            });
            var saveItemModal = angular.copy(response.data.saveItemModal);
            saveItemModal.options.afterOpen = function(ctrl) {
                saveItemModalCtrl = ctrl;
                if (c.data.isMEE == 'true') {
                    spAriaUtil.sendLiveMessage($scope.m.saveItemDialogMsg);
                }
            };
            saveItemModal.options.afterClose = function() {
                unregisterSave();
                closeModalOnSave();
                c.saveItemModal = null;
                saveItemModalCtrl = null;
                $scope.saveConfirmation = false;
                displayNativeButtons();
            };
            c.saveItemModal = saveItemModal;
        });
        $scope.saveConfirmation = true;
    }

    function saveCatalogItem(name) {
        spAriaUtil.sendLiveMessage($scope.m.submittingMsg);
        showPageLoader();
        $scope.savingItem = true;
        displayNativeButtons();
        var additional_params = {};
        if (!$scope.data.wishlist_item_id) {
            additional_params.wishlist_item_id = $scope.data.wishlist_item_id;
            if ($scope.data.sc_cat_item.sys_class_name == 'sc_cat_item_producer' || $scope.data.sc_cat_item.sys_class_name == 'std_change_record_producer')
                additional_params.wishlistAttachmentTable = $scope.data._attachmentTable;
        }
        if ($scope.data.is_cart_item || $scope.data.is_wishlist_item)
            additional_params.current_cart_item_id = $scope.data._generatedItemGUID;


        spScUtil.saveCatalogItem($scope.data.sc_cat_item.sys_id, name, c.quantity, getValidatedVarData($scope.data.sc_cat_item._fields), $scope.data.is_cart_item || $scope.data.is_wishlist_item ? "" : $scope.data._generatedItemGUID, additional_params).then(function(response) {
            var cartItemId = "";
            if (response && response.data && response.data.result && response.data.result.saved_cart_item_id) {
                cartItemId = response.data.result.saved_cart_item_id;
                if (!$scope.data.is_draft_item) {
                    var payload = {};
                    payload.data = {};
                    payload.name = 'Catalog item added to draft';
                    payload.data['Class name'] = $scope.data.sc_cat_item.sys_class_name;
                    payload.data['Item id'] = $scope.data.sc_cat_item.sys_id;
                    payload.data['Engagement channel'] = ['sp', 'mesp', 'esc'].indexOf($scope.data.portal_suffix) !== -1 ? $scope.data.portal_suffix : 'custom';
                    snAnalytics.addEvent(payload);
                }
            }

            g_form.$private.userState.clearModifiedFields();

            if ($scope.data.is_cart_item || $scope.data.is_wishlist_item) {
                spAriaUtil.sendLiveMessage($scope.data.sc_cat_item.name + " " + $scope.data.is_cart_item ? $scope.m.itemRemovedFromCartMsg : $scope.m.itemRemovedFromWishlistMsg);
                $rootScope.$broadcast($scope.data.is_cart_item ? "$sp.service_catalog.cart.update" : "$sp.service_catalog.wishlist.update");
                if ($scope.data.is_cart_item || $scope.data.current_cart_item == $scope.data.wishlist_item_id) {
                    $location.search('id=sc_cat_item&edit=draft&sys_id=' + cartItemId);
                    return;
                } else {
                    $scope.data.wishlist_item_id = "";
                    $scope.data.is_wishlist_item = false;
                }
            }

            c.status = $scope.data.is_draft_item ? $scope.m.draftUpdateMsg : $scope.m.draftSaveMsg;

            if (!c.isNative) {
                $scope.m.actionMsg = generateMessageWithLink($scope.data.is_draft_item ? $scope.m.draftUpdateMsg : $scope.m.draftSaveMsg, {
                    "link": '?id=my_requests&draftSearchText=' + encodeURIComponent($scope.data.sc_cat_item.name),
                    "message": $scope.m.viewDraftItemMsg,
                    "id": "view_draft_item"
                }, '', true);
                $scope.m.actionMsg = $sce.trustAsHtml($scope.m.actionMsg);
                $scope.data.showMsg = true;
            } else
                cabrillo.message.showMessage(cabrillo.message.SUCCESS_MESSAGE_STYLE, c.status);

            if (!cartItemId) {
                $scope.data._generatedItemGUID = cartItemId;
                $scope.data.sc_cat_item._attachmentGUID = cartItemId;
                $scope.data.draftItemName = name;
                $scope.data.is_draft_item = true;
                $scope.data.sc_cat_item.isCartItem = true;
                //This is to refresh the item level attachments in the UI. As we might be changing the _generatedItemGUID above, we are updating parameters required by the attachment handler.
                $scope.attachmentHandler.setParams($scope.data._attachmentTable, $scope.data._generatedItemGUID, 1024 * 1024 * $scope.data.maxAttachmentSize);
                $scope.attachmentHandler.getAttachmentList();
            }

            hidePageLoader();
            $scope.savingItem = false;
            $scope.submitting = false;
            displayNativeButtons();
            spUtil.scrollTo('#sc_cat_item', 300);
        }, function(response) {
            $scope.savingItem = false;
            displayNativeButtons();
            handleFailure(response);
        });
    }

    function addToWishlist() {
        spAriaUtil.sendLiveMessage($scope.m.submittingMsg);
        var wishlistMsg = $scope.data.is_wishlist_item ? $scope.m.wishlistUpdateMsg : $scope.m.wishlistAddMsg;
        $scope.m.actionMsg = generateMessageWithLink(wishlistMsg, {
            "link": "?id=sc_wishlist",
            "id": "view_wishlist",
            "message": $scope.m.viewWishListMsg
        }, '', true);
        $scope.m.actionMsg = $sce.trustAsHtml($scope.m.actionMsg);
        $scope.is_update_wishlist = false;

        spScUtil.addToWishlist($scope.data.sc_cat_item.sys_id, c.quantity, getValidatedVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID).then(function(response) {
            var cartItemId = "";
            if (response && response.data && response.data.result && response.data.result.items) {
                for (var i = 0; i < response.data.result.items.length; i++) {
                    var item = response.data.result.items[i];
                    if (item.catalog_item_id === $scope.data.sc_cat_item.sys_id) {
                        cartItemId = item.cart_item_id;
                        break;
                    }
                }
            }

            $rootScope.$broadcast("$sp.service_catalog.wishlist.add_item");
            $rootScope.$broadcast("$sp.service_catalog.wishlist.update", cartItemId);

            g_form.$private.userState.clearModifiedFields();
            $scope.is_update_wishlist = true;
            $scope.data.is_wishlist_item = true;
            $scope.data.sc_cat_item.isCartItem = true;
            if (!!cartItemId && $scope.data._generatedItemGUID != cartItemId) {
                $scope.data._generatedItemID = cartItemId;
                $scope.data.sc_cat_item._attachmentGUID = cartItemId;
            }
            $scope.data.showMsg = true;
            $scope.data.wishlist_item_id = cartItemId;
            $scope.submitting = false;
            spUtil.scrollTo('#sc_cat_item', 300);
            $scope.focusElement("view_wishlist", wishlistMsg);
        }, function(response) {
            handleFailure(response);
        });
    }
    $scope.clearAttachmentFields = function() {
        var fields = $scope.data.sc_cat_item._fields;
        for (var x in fields) {
            if (fields[x].type == 'sc_attachment')
                g_form.clearValue(fields[x].name);
        }
    };

    $scope.triggerAddToCart = function(timeout) {
        $scope.data.sc_cat_item.item_action = "add_to_cart";
        $scope.data.sc_cat_item.quantity = c.quantity;
        $scope.$evalAsync(function() {
            if (g_form && !$scope.submitting) {
                $scope.submitting = true;
                spAriaUtil.sendLiveMessage($scope.m.submittingMsg);
                if (!spScUtil.isRegexDone($scope.data.sc_cat_item._fields)) {
                    $scope.submitting = false;
                    $scope.validating = true;
                    $scope.triggerPostValidation = $scope.triggerAddToCart;
                } else if (!g_form.submit()) {
                    timeout = timeout || 1000;
                    $timeout(function() {
                        $scope.$broadcast('$sp.service_catalog.form_submit_failed', {
                            action_name: 'submit'
                        });
                    }, timeout);
                    if (!$scope.data.is_wishlist_item || !$scope.data.is_draft_item)
                        window.GlideWebAnalytics.trackEvent('Service Catalog', 'Catalog Cart' + webAnalyticsMsgSuffix, 'Catalog Item Added to Cart', 0, 0);
                }
            }
        });
    };

    $scope.triggerUpdateCart = function(timeout) {
        $scope.data.sc_cat_item.item_action = "update_cart";
        $scope.data.sc_cat_item.quantity = c.quantity;
        $scope.$evalAsync(function() {
            if (g_form && !$scope.submitting) {
                $scope.submitting = true;
                spAriaUtil.sendLiveMessage($scope.m.submittingMsg);
                if (!spScUtil.isRegexDone($scope.data.sc_cat_item._fields)) {
                    $scope.submitting = false;
                    $scope.validating = true;
                    $scope.triggerPostValidation = $scope.triggerUpdateCart;
                } else if (!g_form.submit()) {
                    timeout = timeout || 1000;
                    $timeout(function() {
                        $scope.$broadcast('$sp.service_catalog.form_submit_failed', {
                            action_name: 'submit'
                        });
                    }, timeout);
                    window.GlideWebAnalytics.trackEvent('Service Catalog', 'Catalog Cart' + webAnalyticsMsgSuffix, 'Catalog Cart Updated', 0, 0);
                }
            }
        });
        return false;
    };

    $scope.triggerOnSubmit = function(timeout) {
        if (c.data.isPreview) return;

        $scope.data.sc_cat_item.item_action = "order";
        $scope.data.sc_cat_item.quantity = c.quantity;
        $scope.$evalAsync(function() {
            if (g_form && !$scope.submitting) {
                $scope.submitting = true;
                spAriaUtil.sendLiveMessage($scope.m.submittingMsg);
                if (!spScUtil.isRegexDone($scope.data.sc_cat_item._fields)) {
                    $scope.submitting = false;
                    $scope.validating = true;
                    $scope.triggerPostValidation = $scope.triggerOnSubmit;
                } else if (!g_form.submit()) {
                    timeout = timeout || 1000;
                    $timeout(function() {
                        $scope.$broadcast('$sp.service_catalog.form_submit_failed', {
                            action_name: 'submit'
                        });
                    }, timeout);
                }
            }
        });
        return false;
    };

    function setFieldsReadonly() {
        var allFields = g_form.getFieldNames();
        for (var fieldName in allFields) {
            g_form.setReadonly(allFields[fieldName], true);
        }
    }
    // order / create request
    function getOne() {
        var requested_for_id = "";
        var requested_for_display = "";
        if ($scope.data.requested_for && $scope.data.requested_for.id && $scope.data.requested_for.displayValue) {
            requested_for_id = $scope.data.requested_for.id;
            requested_for_display = $scope.data.requested_for.displayValue;
        }
        //Required to pass as payload for usage as embeddedWidget
        var embeddedWidgetOptions = {
            "auto_redirect": "true",
            "requested_for_id": requested_for_id,
            "requested_for_display": requested_for_display
        };
        if ($scope.data.sc_cat_item.sys_class_name != "sc_cat_item_producer" && $scope.data.sc_cat_item.sys_class_name != "std_change_record_producer") {
            if ($scope.data.sys_properties.twostep && $scope.data.sc_cat_item.request_method != "submit") {
                var payload = {
                    cart: 'cart_' + $scope.data.sc_cat_item.sys_id,
                    itemDetails: {
                        sys_id: $scope.data.sc_cat_item.sys_id,
                        name: $scope.data.sc_cat_item.name,
                        sys_class_name: $scope.data.sc_cat_item.sys_class_name,
                        quantity: $scope.data.sc_cat_item.quantity,
                        fields: getVarData($scope.data.sc_cat_item._fields),
                        newRecordID: $scope.data._generatedItemGUID,
                        request_method: $scope.data.sc_cat_item.request_method,
                    },
                    action: $scope.data.is_wishlist_item ? "order_wishlist_item" : ($scope.data.is_draft_item ? "order_draft_item" : "order_item"),
                    parentParams: $scope.data.parentParams
                };
                for (var embeddedOption in embeddedWidgetOptions) {
                    payload[embeddedOption] = c.options[embeddedOption] || embeddedWidgetOptions[embeddedOption];
                }
                $scope.server.get(payload).then(function(response) {
                    var orderItemModalCtrl;
                    var unregister = $scope.$on('$sp.service_catalog.cart.cancel_order', function() {
                        $scope.submitting = false;
                        $scope.orderConfirmation = false;
                        registerSubmitListeners();
                        $timeout(function() {
                            if (orderItemModalCtrl)
                                orderItemModalCtrl.close();

                            displayNativeButtons();
                        });
                    });
                    var closeModalOnSubmit = $scope.$on('$sp.service_catalog.cart.submitted', function() {
                        orderItemModalCtrl.close();
                        setFieldsReadonly();
                        $scope.submitted = true;
                    });
                    var orderItemModal = angular.copy(response.data.orderItemModal);
                    orderItemModal.options.afterOpen = function(ctrl) {
                        orderItemModalCtrl = ctrl;
                        if (c.data.isMEE == 'true') {
                            spAriaUtil.sendLiveMessage($scope.m.checkoutDialogMsg);
                        }
                    };
                    orderItemModal.options.afterClose = function() {
                        unregister();
                        closeModalOnSubmit();
                        c.orderItemModal = null;
                        orderItemModalCtrl = null;
                        $('#submit-btn').focus();
                    };
                    c.orderItemModal = orderItemModal;
                });
                $scope.orderConfirmation = true;
            } else {
                var additionalParms = {};
                if ($scope.data.parentParams) {
                    additionalParms.sysparm_parent_sys_id = $scope.data.parentParams.sysparm_parent_sys_id;
                    additionalParms.sysparm_parent_table = $scope.data.parentParams.sysparm_parent_table;
                    additionalParms.is_service_workspace = c.options.isServiceWorkspace;
                }
                additionalParms.engagement_channel = $scope.data.engagement_channel;
                additionalParms.referrer = $scope.data.referrer;
                $scope.submitting = true;
                showPageLoader();
                addOrderButtons();

                if ($scope.data.is_wishlist_item || $scope.data.is_draft_item) {
                    var orderMethod = $scope.data.is_wishlist_item ? spScUtil.orderWishlistedItem : spScUtil.orderDraftItem;

                    orderMethod($scope.data.sc_cat_item.sys_id, $scope.data.sc_cat_item.quantity, getVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID, additionalParms).then(function(response) {
                        $scope.server.get({
                            action: 'log_order_one_step',
                            itemDetails: {
                                sys_id: $scope.data.sc_cat_item.sys_id,
                                name: $scope.data.sc_cat_item.name,
                                sys_class_name: $scope.data.sc_cat_item.sys_class_name
                            }
                        });
                        var a = response.data.result;
                        $scope.$emit("$$uiNotification", a.$$uiNotification);
                        $scope.$emit("$sp.sc_cat_item.submitted", a);
                        if ($scope.data.is_wishlist_item)
                            $rootScope.$broadcast("$sp.service_catalog.wishlist.update");

                        if (c.options.auto_redirect == 'false') {
                            setFieldsReadonly();
                            $scope.submitting = false;
                            $scope.submitted = true;
                            $rootScope.$broadcast("$sp.service_catalog.cart.submitted", true);
                            spUtil.addInfoMessage($scope.m.requestSubmitted);
                            return;
                        } else {
                            if (a.universal_request && !c.options.native_mobile && !c.options.isServiceWorkspace)
                                $location.search('id=standard_ticket&is_new_order=true&table=universal_request&sys_id=' + a.universal_request);
                            else {
                                var url = 'id=sc_request&is_new_order=true&table=sc_request&sys_id=' + a.sys_id;
                                if ($scope.data.referrer)
                                    url = url + "&referrer=" + $scope.data.referrer;
                                $location.search(url);
                            }
                        }
                    });
                } else {
                    spScUtil.orderNow($scope.data.sc_cat_item.sys_id, $scope.data.sc_cat_item.quantity, getVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID, additionalParms, getAlsoRequestForValue($scope.data.sc_cat_item._fields)).then(function(response) {
                        $scope.server.get({
                            action: 'log_order_one_step',
                            itemDetails: {
                                sys_id: $scope.data.sc_cat_item.sys_id,
                                name: $scope.data.sc_cat_item.name,
                                sys_class_name: $scope.data.sc_cat_item.sys_class_name
                            }
                        });
                        var a = response.data.result;
                        $scope.$emit("$$uiNotification", a.$$uiNotification);
                        $scope.$emit("$sp.sc_cat_item.submitted", a);
                        if (c.options.auto_redirect == 'false') {
                            hidePageLoader();
                            setFieldsReadonly();
                            $scope.submitting = false;
                            $scope.submitted = true;
                            $rootScope.$broadcast("$sp.service_catalog.cart.submitted", true);
                            spUtil.addInfoMessage($scope.m.requestSubmitted);
                            return;
                        } else if (!$scope._atf) {
                            removeCabrilloButtons();
                            //redirect to standard ticket page if universal request is created
                            if (a.universal_request && !c.options.native_mobile && !c.options.isServiceWorkspace)
                                $location.search('id=standard_ticket&is_new_order=true&table=universal_request&sys_id=' + a.universal_request);
                            else {
                                var url = 'id=sc_request&is_new_order=true&table=sc_request&sys_id=' + a.sys_id;
                                if ($scope.data.referrer)
                                    url = url + "&referrer=" + $scope.data.referrer;
                                if (c.options.isServiceWorkspace && c.options.hide_actions)
                                    url = url + "&hide_actions=" + c.options.hide_actions;
                                $location.search(url);
                            }
                        }
                    }, function(response) {
                        $scope.$emit('$sp.sc_cat_item.submit_failed');
                        handleFailure(response);
                    });
                }
            }
        } else {
            postCatalogFormRequest().then(function(response) {
                var a = response.data.result;

                if ($scope.data.sys_properties.stopNavigationOnError || $scope.options.isServiceWorkspace) {
                    if (a.sys_id == -1) { //Record Producer didnot generate any record
                        //check for BR Error
                        if (a.$$uiNotification.length > 0) {
                            var errorNotify = a.$$uiNotification.find(function(elem) {
                                if (elem.type == 'error')
                                    return true;
                            });
                            if (errorNotify) {
                                $scope.$emit("$$uiNotification", a.$$uiNotification);
                                $scope.submitted = false;
                                $scope.submitting = false;
                                if ($scope.data.record_producer_label)
                                    $scope.submitButtonMsg = $scope.data.record_producer_label;
                                else
                                    $scope.submitButtonMsg = $scope.m.submitMsg;

                                return;

                            }

                        }
                    }
                }
                $scope.server.get({
                    action: 'log_request_producer',
                    itemDetails: {
                        sys_id: $scope.data.sc_cat_item.sys_id,
                        name: $scope.data.sc_cat_item.name,
                        sys_class_name: $scope.data.sc_cat_item.sys_class_name
                    }
                });

                if (!$scope.options.isServiceWorkspace)
                    $scope.$emit("$$uiNotification", a.$$uiNotification);
                $scope.$emit("$sp.sc_cat_item.submitted", a);
                if ($scope.data.is_wishlist_item)
                    $rootScope.$broadcast("$sp.service_catalog.wishlist.update");

                hidePageLoader();
                if (c.options.auto_redirect == 'false') {
                    setFieldsReadonly();
                    $scope.submitted = true;
                    $scope.submitting = false;
                    $scope.submitButtonMsg = $scope.m.submittedMsg;
                } else if (!$scope._atf)
                    handleRedirect(a.number, a.table, a.sys_id, a.redirect_to, a.redirect_portal_url);

            });
        }
    }

    function addToCart() {
        $scope.server.get({
            action: 'log_request_cart',
            itemDetails: {
                sys_id: $scope.data.sc_cat_item.sys_id,
                name: $scope.data.sc_cat_item.name,
                sys_class_name: $scope.data.sc_cat_item.sys_class_name
            }
        });

        postCatalogFormRequest().then(function(response) {
            $rootScope.$broadcast("$sp.service_catalog.cart.add_item");
            $rootScope.$broadcast("$sp.service_catalog.cart.update");
            $scope.$emit("$sp.sc_cat_item.add_to_cart", $scope.data._generatedItemGUID);
            g_form.$private.userState.clearModifiedFields();
            if ($scope.data.is_wishlist_item) {
                $rootScope.$broadcast("$sp.service_catalog.wishlist.update");
                $scope.data.is_wishlist_item = false;
                $scope.data.sc_cat_item.isCartItem = false;
                if ($location.$$search.edit === "wishlist") {
                    $location.search("id=sc_wishlist");
                    return;
                }
            }
            if ($scope.data.is_draft_item) {
                $scope.data.is_draft_item = false;
                $scope.data.sc_cat_item.isCartItem = false;
                if ($location.$$search.edit === "draft") {
                    $location.search('id=sc_cart');
                    return;
                }
            }
            c.status = i18n.getMessage("Added item to shopping cart");
            var cartResponse = response;
            $scope.server.get({
                action: 'init_item'
            }).then(function(response) {
                $scope.data._generatedItemGUID = response.data._generatedItemGUID;
                $scope.data.sc_cat_item._attachmentGUID = response.data._generatedItemGUID;
                ah.setParams($scope.data._attachmentTable, $scope.data._generatedItemGUID, 1024 * 1024 * $scope.data.maxAttachmentSize);
                $scope.attachmentHandler.getAttachmentList();
                $scope.attachments = [];
                $scope.clearAttachmentFields();
                $scope.data.sc_cat_item.attachment_action_in_progress = false;
                $scope.data.sc_cat_item.attachment_submitted = false;

                if (!c.isNative) {
                    $scope.m.actionMsg = $scope.m.cartAddMsg + $scope.m.cartMakeChangesMsg + addLink('?id=sc_cart', $scope.m.viewCartMsg, "view_cart");
                    $scope.m.actionMsg += '<i class="fa fa-close pull-right pointer close-notification" aria-label="${Close Notification}" tabindex="0" ng-click="c.hideCartMsg()"/>';
                    $scope.m.actionMsg = $sce.trustAsHtml($scope.m.actionMsg);
                    $scope.data.showMsg = true;
                } else {
                    cabrillo.message.showMessage(cabrillo.message.SUCCESS_MESSAGE_STYLE, c.status);
                    if (cartResponse && cartResponse.data && cartResponse.data.result) {
                        var items = cartResponse.data.result.items || [];
                        $scope.showCabrilloCart = true;
                        $scope.cartItemCount = items.length;
                        showCartButton();
                    }
                }
                $scope.submitting = false;
                hidePageLoader();
                cleanFailedSubmit = $scope.$on('$sp.service_catalog.form_submit_failed', function() {
                    $scope.submitting = false;
                });
                spUtil.scrollTo('#sc_cat_item', 300);
                $scope.focusElement("view_cart", $scope.m.cartAddMsg);
                if (c.isNative)
                    displayNativeButtons();
            });
        });
    }

    function updateCart() {
        postCatalogFormRequest().then(function(response) {
            g_form.$private.userState.clearModifiedFields();
            c.status = i18n.getMessage("Updated Item to shopping cart");
            if (c.isNative)
                cabrillo.message.showMessage(cabrillo.message.SUCCESS_MESSAGE_STYLE, c.status);
            removeCabrilloButtons();
            $location.search('id=sc_cart');
        });
    }

    function postCatalogFormRequest() {
        $scope.submitting = true;
        showPageLoader();
        if ($scope.data.sc_cat_item.item_action !== "add_to_cart")
            addOrderButtons();

        var additionalParms = {};
        if ($scope.data.parentParams) {
            mergeMap($scope.data.parentParams, additionalParms);
        }
        additionalParms.engagement_channel = $scope.data.engagement_channel;
        additionalParms.referrer = $scope.data.referrer;

        var isDraftOrWishlistItem = $scope.data.is_wishlist_item || $scope.data.is_draft_item;

        if ($scope.data.is_wishlist_item) {
            $scope.is_update_wishlist = false;
            if ($scope.data.sc_cat_item.sys_class_name === "sc_cat_item_producer")
                return spScUtil.submitWishlistedProducer($scope.data.sc_cat_item.sys_id, getVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID, additionalParms);
            else if ($scope.data.sc_cat_item.sys_class_name === "std_change_record_producer") {
                additionalParms.is_wishlist_item = true;
                return spScUtil.submitStdChgProducer($scope.data.sc_cat_item.sys_id, $scope.data.stdChg.twoStep, $scope.data.stdChg.currentVersion, $scope.data._generatedItemGUID, $scope.portal.url_suffix, additionalParms, $scope.data.stdChg.chgModel, $scope.data.stdChg.defaultType);
            } else if ($scope.data.sc_cat_item.item_action === "add_to_cart") {
                if ($scope.data.sc_cat_item.sys_class_name == 'sc_cat_item_guide')
                    window.GlideWebAnalytics.trackEvent("Service Catalog", "Catalog Cart" + webAnalyticsMsgSuffix, "Order Guide Added to Cart", 0, 0);
                else if ($scope.data.sc_cat_item.sys_class_name == 'sc_cat_item_producer')
                    window.GlideWebAnalytics.trackEvent("Service Catalog", "Catalog Cart" + webAnalyticsMsgSuffix, "Record Producer Added to Cart", 0, 0);
                else if ($scope.data.sc_cat_item.sys_class_name == "sc_cat_item" || $scope.data.sc_cat_item.sys_class_name == "pc_hardware_cat_item" || $scope.data.sc_cat_item.sys_class_name == "pc_software_cat_item")
                    window.GlideWebAnalytics.trackEvent("Service Catalog", "Catalog Cart", "Catalog Item Added to Cart" + webAnalyticsMsgSuffix, 0, 0);
                return spScUtil.addWishlistedItemToCart($scope.data.sc_cat_item.sys_id, $scope.data.sc_cat_item.quantity, getVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID, additionalParms).then(null, function(response) {
                    return handleFailure(response);
                });
            }
        } else if ($scope.data.is_draft_item) {
            additionalParms.wishlist_item_id = $scope.data.wishlist_item_id;
            if ($scope.data.sc_cat_item.sys_class_name === "sc_cat_item_producer")
                return spScUtil.submitDraftProducer($scope.data.sc_cat_item.sys_id, getVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID, additionalParms);
            else if ($scope.data.sc_cat_item.sys_class_name === "std_change_record_producer") {
                additionalParms.is_draft_item = true;
                return spScUtil.submitStdChgProducer($scope.data.sc_cat_item.sys_id, $scope.data.stdChg.twoStep, $scope.data.stdChg.currentVersion, $scope.data._generatedItemGUID, $scope.portal.url_suffix, additionalParms, $scope.data.stdChg.chgModel, $scope.data.stdChg.defaultType);
            } else if ($scope.data.sc_cat_item.item_action === "add_to_cart") {
                if ($scope.data.sc_cat_item.sys_class_name == 'sc_cat_item_guide')
                    window.GlideWebAnalytics.trackEvent("Service Catalog", "Catalog Cart" + webAnalyticsMsgSuffix, "Order Guide Added to Cart", 0, 0);
                else if ($scope.data.sc_cat_item.sys_class_name == 'sc_cat_item_producer')
                    window.GlideWebAnalytics.trackEvent("Service Catalog", "Catalog Cart" + webAnalyticsMsgSuffix, "Record Producer Added to Cart", 0, 0);
                else if ($scope.data.sc_cat_item.sys_class_name == "sc_cat_item" || $scope.data.sc_cat_item.sys_class_name == "pc_hardware_cat_item" || $scope.data.sc_cat_item.sys_class_name == "pc_software_cat_item")
                    window.GlideWebAnalytics.trackEvent("Service Catalog", "Catalog Cart", "Catalog Item Added to Cart" + webAnalyticsMsgSuffix, 0, 0);
                return spScUtil.addDraftItemToCart($scope.data.sc_cat_item.sys_id, $scope.data.sc_cat_item.quantity, getVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID).then(null, function(response) {
                    return handleFailure(response);
                });
            } else if ($scope.data.sc_cat_item.item_action === "update_cart") {
                return spScUtil.updateCart($scope.data._generatedItemGUID, $scope.data.sc_cat_item.quantity, getVarData($scope.data.sc_cat_item._fields), $scope.data.sc_cat_item.sys_id).then(null, function(response) {
                    return handleFailure(response);
                });
            }
        }
        if ($scope.data.is_cart_item && !isDraftOrWishlistItem) {
            return spScUtil.updateCart($scope.data._generatedItemGUID, $scope.data.sc_cat_item.quantity, getVarData($scope.data.sc_cat_item._fields), $scope.data.sc_cat_item.sys_id).then(null, function(response) {
                return handleFailure(response);
            });
        } else if ($scope.data.sc_cat_item.sys_class_name === "sc_cat_item_producer") {
            return spScUtil.submitProducer($scope.data.sc_cat_item.sys_id, getVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID, additionalParms).then(null, function(response) {
                return handleFailure(response);
            });
        } else if ($scope.data.sc_cat_item.sys_class_name === "std_change_record_producer") {
            return spScUtil.submitStdChgProducer($scope.data.sc_cat_item.sys_id, $scope.data.stdChg.twoStep, $scope.data.stdChg.currentVersion, $scope.data._generatedItemGUID, $scope.portal.url_suffix, additionalParms, $scope.data.stdChg.chgModel, $scope.data.stdChg.defaultType);
        } else if ($scope.data.sc_cat_item.item_action === "add_to_cart") {
            return spScUtil.addToCart($scope.data.sc_cat_item.sys_id, $scope.data.sc_cat_item.quantity, getVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID, getAlsoRequestForValue($scope.data.sc_cat_item._fields)).then(null, function(response) {
                return handleFailure(response);
            });
        }
    }
    // spModel populates mandatory - hasMandatory is called by the submit button
    $scope.hasMandatory = function() {
        return c.mandatory && c.mandatory.length > 0;
    };
    //	Listeners
    var cleanFailedSubmit;
    var validationComplete;

    function registerSubmitListeners() {
        cleanFailedSubmit = $scope.$on('$sp.service_catalog.form_submit_failed', function() {
            $scope.submitting = false;
        });
        validationComplete = $rootScope.$on('$sp.service_catalog.form_validation_complete', function() {
            if ($scope.validating) {
                $scope.validating = false;
                if (typeof $scope.triggerPostValidation === 'function')
                    $scope.triggerPostValidation();
            }
            $scope.triggerPostValidation = null;
        });
    }
    registerSubmitListeners();
    $scope.$on("$sp.sc_cat_item.submitted", function() {
        $rootScope.$broadcast("$sp.sc_cat_item.rp_submitted");

        if ($scope.data.sc_cat_item.item_action == "order") {
            if ($scope.data.sc_cat_item.sys_class_name == "sc_cat_item" || $scope.data.sc_cat_item.sys_class_name == "pc_hardware_cat_item" || $scope.data.sc_cat_item.sys_class_name == "pc_software_cat_item")
                window.GlideWebAnalytics.trackEvent("Service Catalog", "Catalog Item Request" + webAnalyticsMsgSuffix, "Catalog Request Submitted", 1, 0);
            else if (scope.data.sc_cat_item.sys_class_name == "sc_cat_item_producer")
                window.GlideWebAnalytics.trackEvent("Service Catalog", "Record Producer Request" + webAnalyticsMsgSuffix, "Catalog Request Submitted", 0, 0);
        }
        g_form.$private.userState.clearModifiedFields();
        if (c.options.auto_redirect == 'false')
            spAriaUtil.sendLiveMessage($scope.m.formSubmittedMsg);
        var payload = {};
        payload.name = "Submit Record Producer Request";
        var className = $scope.data.sc_cat_item.sys_class_name;
        if (className == "sc_cat_item" || className == "pc_hardware_cat_item" || className == "pc_software_cat_item")
            payload.name = "Order Catalog Item Request";

        payload.data = {};
        payload.data["Record Item"] = $scope.data.sc_cat_item.name;
        payload.data["Record ID"] = $scope.data.sc_cat_item.sys_id;
        snAnalytics.addEvent(payload);
    });

    // switch catalog items
    var unregister = $scope.$on('$sp.list.click', onListClick);
    $scope.$on("$destroy", function() {
        $rootScope.$broadcast("$sp.service_catalog.item.close");
        if (g_form)
            spSCNavStateManager.unregisterForms([g_form.getSysId()]);

        unregister();
        mespClosePopupUnregister();
        mespOpenPopupUnregister();
        validationComplete();
    });
    $rootScope.$on('spModel.gForm.rendered', function() {
        spAriaUtil.sendLiveMessage($scope.m.catItemOpenedMsg);
    });

    function onListClick(evt, arg) {
        $scope.data.sys_id = arg.sys_id;
        spUtil.update($scope);
    }

    function formatRedirectUrl(page, table, sys_id, hide_actions) {
        var url;
        var paramObj = {
            page: page,
            table: table,
            sys_id: sys_id
        };
        url = spUtil.format(c.options.url, paramObj);
        if ($scope.data.referrer)
            url = url + '&referrer=' + $scope.data.referrer;
        if (hide_actions)
            url = url + "&hide_actions=" + hide_actions;
        return url;
    }

    function handleRedirect(n, table, sys_id, redirectTo, redirectUrl) {
        var page = 'form';
        if (table == 'sc_request')
            page = 'sc_request';
        else if (n)
            page = 'ticket';

        if (sys_id == -1)
            sys_id = undefined;

        if (redirectTo == 'catalog_home')
            page = 'sc_home';

        //For Standard change, always direct to form if not in Workspace
        if ($scope.data.sc_cat_item.sys_class_name === "std_change_record_producer") {
            if ($scope.options.isServiceWorkspace == 'true') {
                var params = {};
                params.msg = 'TARGET_RECORD_SELECTED';
                params.target_table = table;
                params.target_sys_id = '-1';
                if (sys_id)
                    params.target_sys_id = sys_id;

                if ($scope.data.stdChg.twoStep) {
                    var genURL = new URL($window.location.origin + "/" + redirectUrl).searchParams;
                    params.target_query = genURL.get("query");
                }

                window.postMessage(params, $window.location.origin);
                return;
            } else
                page = 'form';
        }
        removeCabrilloButtons();
        if (c.options.page) {
            page = c.options.page;
        }
        if (c.options.table) {
            table = c.options.table;
        }
        var hide_actions = c.options.isServiceWorkspace && c.options.hide_actions;
        var url;
        if (page === 'sc_home') {
            url = "id=" + page;
        } else {
            url = formatRedirectUrl(page, table, sys_id, hide_actions);
        }
        if ($scope.data.sc_cat_item.sys_class_name === "sc_cat_item_producer" || $scope.data.sc_cat_item.sys_class_name === "std_change_record_producer") {
            if (redirectUrl) {
                if (isPortalURL(redirectUrl)) {
                    var queryParamURL = getQueryParams(redirectUrl);
                    var currentParamURL = getQueryParams($location.$$url);
                    if (queryParamURL == currentParamURL)
                        $location.search(queryParamURL + '&' + Date.now());
                    else
                        $location.search(queryParamURL);
                } else
                    $window.location.href = redirectUrl;
            } else {
                var newURL = $location.search(url);
                spAriaFocusManager.navigateToLink(newURL.url());
            }
            return;
        }
        hide_actions = c.options.isServiceWorkspace && c.options.hide_actions;
        $location.search(formatRedirectUrl('sc_request', 'sc_request', sys_id, hide_actions));
        return;
    }

    function isPortalURL(url) {
        var currentPortalName = $location.path().replace('/', '');
        var paramIndex = getQueryParameterIndex(url);
        var redirectPortalName = url.substr(0, paramIndex).replace('/', '');
        return currentPortalName === redirectPortalName || paramIndex == 0;
    }

    function getQueryParams(url) {
        var paramIndex = getQueryParameterIndex(url);
        return url.substr(paramIndex + 1, url.length);
    }

    function getQueryParameterIndex(url) {
        var paramIndex = url.search(/\?/);
        return paramIndex >= 0 ? paramIndex : url.length;
    }

    $timeout(function() {
        if ($document[0].getElementsByClassName('sc-sticky-item-header').length > 0) {
            var titleHeight = $document[0].getElementsByClassName('sc-sticky-item-header')[0].clientHeight;
            $scope.stickyHeaderTop = '-' + (titleHeight - 20 - $document[0].getElementsByClassName('sc-cat-item-short-description')[0].clientHeight) + 'px;';
        }
    });


    function setBottomButtons(buttonInfoArray) {
        if (!c.isNative) return;

        var buttons = buttonInfoArray.map(function(buttonInfo) {
            return {
                title: buttonInfo.title,
                enabled: buttonInfo.enabled,
                backgroundColor: buttonInfo.backgroundColor,
                textColor: buttonInfo.textColor
            };
        });

        cabrillo.viewLayout.setBottomButtons(buttons, function(buttonIndex) {
            if (buttonInfoArray[buttonIndex] && typeof buttonInfoArray[buttonIndex].action === 'function') {
                $timeout(function() {
                    buttonInfoArray[buttonIndex].action();
                }, 500);
            }
        });
    }

    function getSaveButtonTitle() {
        return !$scope.data.is_draft_item ? (!$scope.savingItem ? $scope.m.saveAsDraft : $scope.m.savingMsg) : (!$scope.savingItem ? $scope.m.updateDraft : $scope.m.updatingMsg);
    }

    function addOrderButtons() {
        if (!c.isNative) return;
        showCartButton();

        var orderButtons = [];

        if (c.showDraftButtons()) {
            orderButtons.push({
                title: getSaveButtonTitle(),
                enabled: !$scope.submitting && !$scope.savingItem,
                backgroundColor: '#f7f7f7',
                textColor: '#000000',
                action: function() {
                    $scope.triggerSaveItem();
                }
            });
        }

        if ($scope.c.data.sys_properties.cartEnabled && $scope.c.showAddCartBtn()) {
            orderButtons.push({
                title: $scope.m.addToCart,
                enabled: !$scope.submitting && !$scope.savingItem,
                backgroundColor: '#f7f7f7',
                textColor: '#000000',
                action: function() {
                    $scope.triggerAddToCart();
                }
            });
        }

        orderButtons.push({
            title: $scope.submitting && !$scope.savingItem ? $scope.m.submittingMsg : $scope.submitButtonMsg,
            enabled: !$scope.submitting && !$scope.savingItem,
            backgroundColor: $scope.data.sys_properties.isPolaris == "true" ? null : $scope.data.sys_properties.mobileNativeColor,
            textColor: $scope.data.sys_properties.isPolaris == "true" ? null : '#FFFFFF',
            action: function() {
                $scope.triggerOnSubmit();
            }
        });


        setBottomButtons(orderButtons);
    }



    function addRPButton() {
        if (!c.isNative) return;

        var rpButtons = [];

        if (c.showDraftButtons()) {
            rpButtons.push({
                title: getSaveButtonTitle(),
                enabled: !$scope.submitting && !$scope.savingItem,
                backgroundColor: '#f7f7f7',
                textColor: '#000000',
                action: function() {
                    $scope.triggerSaveItem();
                }
            });
        }

        rpButtons.push({
            title: $scope.submitting && !$scope.savingItem ? $scope.m.submittingMsg : $scope.submitButtonMsg,
            enabled: !$scope.submitting && !$scope.savingItem,
            backgroundColor: $scope.data.sys_properties.isPolaris == "true" ? null : $scope.data.sys_properties.mobileNativeColor,
            textColor: $scope.data.sys_properties.isPolaris == "true" ? null : '#FFFFFF',
            action: function() {
                $scope.triggerOnSubmit();
            }
        });

        setBottomButtons(rpButtons);
    }

    function showCartButton() {
        if (!c.isNative || !$scope.showCabrilloCart) return;

        var button = [{
            imageName: 'cart',
            badgeCount: $scope.cartItemCount,
            backgroundColor: '#2ff5f9',
            textColor: '#FFFFFF',
            enabled: true
        }];

        cabrillo.viewLayout.setNavigationBarButtons(button, function(index) {
            $location.search('id=sc_cart');
        });

    }

    function addCartItemButtons() {
        if (!c.isNative) return;
        var cartItemButtons = [

            {
                title: getSaveButtonTitle(),
                enabled: !$scope.submitting && !$scope.savingItem,
                backgroundColor: '#f7f7f7',
                textColor: '#000000',
                action: function() {
                    $scope.triggerSaveItem();
                }
            },

            {
                title: $scope.m.updateCart,
                enabled: !$scope.submitting && !$scope.savingItem,
                backgroundColor: $scope.data.sys_properties.isPolaris == "true" ? null : $scope.data.sys_properties.mobileNativeColor,
                textColor: $scope.data.sys_properties.isPolaris == "true" ? null : '#FFFFFF',
                action: function() {
                    $scope.triggerUpdateCart();
                }
            }

        ];

        setBottomButtons(cartItemButtons);
        nativeGoBackToCart();
    }

    function removeCabrilloButtons() {
        if (!c.isNative) return;
        cabrillo.viewLayout.setBottomButtons();
    }

    function showPageLoader() {
        if (!c.isNative) return;
        cabrillo.viewLayout.showSpinner();
    }

    function hidePageLoader() {
        if (!c.isNative) return;
        cabrillo.viewLayout.hideSpinner();
    }

    function handleFailure(response) {
        registerSubmitListeners();

        $scope.submitting = false;
        hidePageLoader();
        if ($scope.data.sc_cat_item.item_action !== "add_to_cart")
            addOrderButtons();
        if (response.data.result && response.data.result.errMsg)
            spUtil.addErrorMessage(response.data.result.errMsg);

        return $q.reject(response);
    }

    function mergeMap(fromMap, toMap) {
        for (var key in fromMap) {
            toMap[key] = fromMap[key];
        }
    }


    function generateMessageWithLink(preLinkMsg, linkMsgObj, postLinkMsg, showCloseBtn) {
        var linkTemplate = ('{0} ' + '<a id=' + linkMsgObj.id + ' class="link alert-link" href=' + linkMsgObj.link + '> {1}</a> ') + (!postLinkMsg ? '{2}' : '');
        if (showCloseBtn)
            linkTemplate += '<i class="fa fa-close pull-right pointer" aria-label="${Close Notification}" tabindex="0" ng-click="c.hideCartMsg()"/>';

        return i18n.format(linkTemplate, preLinkMsg, linkMsgObj.message, postLinkMsg);
    }

    $scope.sendLiveMessage = function(message, timeout) {
        if (!message)
            return;

        if (!timeout)
            timeout = 0;

        setTimeout(function() {
            spAriaUtil.sendLiveMessage(message);
        }, timeout);
    };

    $window.onpageshow = function() {
        if (c.isNative)
            $scope.$emit('spModel.gForm.showNativeMobileButtons');
    };

    var favoriteEvent = $rootScope.$on('favorite', function(e, favorite) {
        $scope.showFavorite = favorite.showFavorite;
        $scope.isFavorite = favorite.isFavorite;
    });
    $scope.$on("$destroy", favoriteEvent);

    $scope.toggleFavorite = function($event) {
        $event.preventDefault();
        $event.stopPropagation();
        $scope.$broadcast('toggleFavorite');
    };
}]]></client_script>
        <controller_as/>
        <css>$border-radius-base: 4px !default;
			$sp-space--xs: 4px !default;
			$sp-space--xxs: 2px !default;
			.btn-group.attachment-mobile &gt; button {
			padding: 1px 6px;
			}

			.panel-button {
			float: none;
			}

			.sp-attachment-add {
			padding: 5px;
			}

			.p-t-none {
			padding-top: 0 !important;
			}

			.file-list-wrap {
			margin-bottom: 10px;
			}

			.sc-btn {
			color: $text-color;
			}

			.dismiss-button {
			position: absolute;
			top: 1rem;
			right: 10px;
			color: $text-color;
			cursor: pointer;
			}

			.item-header {
			padding-top: 10px !important;
			padding-bottom: 10px !important;
			}

			.sc-item-description img {
			max-width: 100%;
			height: auto;
			}
			.sc-sticky-item-header {
			position: sticky;
			position: -webkit-sticky;
			position: -ms-sticky;
			top: -($font-size-h2 + $font-size-base);
			z-index: 10;
			background-color: $sp-homepage-bg;
			border-radius: $border-radius-base $border-radius-base 0 0;
			}
			.sc-fixed {
			position: fixed;
			max-height: 100%;
			width: 17.67777%;
			z-index: 1;
			}
			.no-margin {
			margin: 0px;
			}
			.sc-item-error-messages {
			max-height: 100%;
			position: absolute;
			overflow-y: auto;
			overflow-x: hidden;
			width: 100%;
			}
			.sc-field-error-label {
			margin-right: .5em;
			display: inline-block;
			cursor: pointer;
			background-color: $sc-field-error-color;
			text-overflow: ellipsis;
			overflow: hidden;
			white-space: nowrap;
			}
			.image-gallery {
			font-size: 8px;
			color: #CECECE;
			.active {
			color: #717171;
			}
			i {
			padding: 0 5px;
			}
			}
			.relative {
			position: relative;
			}
			.sc-order-widget-btn {
			position: absolute;
			left: 9%;
			}

			.sc-cat-item-legend {
			margin-top: 1rem;
			margin-bottom: 1.5rem;
			}

			.cart-icon-margin {
			margin-right: 3px;
			}

			.cart-icon-padding-top {
			padding-top: $sp-space--xxs;
			}

			.bottom-button-width {
			width: 20%
			}

			.cat-item-quantity-box-bottom-cart {
			padding-top: $sp-space--xs;
			width: 20%;
			}

			.cat-item-quantity-box {
			flex-grow: 1;
			padding-left: 1.2rem;
			}

			.cat-item-quantity-group {
			display: flex;
			justify-content: space-between;
			align-items: baseline;
			}

			.close-notification {
			position: absolute;
			top: 10px;
			right: 18px;
			}
			.help-tag-icon {
			color: $sc-field-error-color;
			}

			.sc-reqd-info-btn {
			margin-right: .5em;
			display: inline-block;
			white-space:normal !important;
			word-break: break-word !important;
			}

			.cat-mobile-favorite{
			margin-top:24px;
			margin-bottom:16px;
			margin-left: 0.525rem;
			width: fit-content;
			width: -moz-fit-content;
			.v523f6529532d0110fedfddeeff7b1298{
			float: left;
			}
			.favorite-button{
			width : 1.2rem;
			height: auto;
			background-color: transparent;
			outline: transparent;
			box-shadow: none;
			.fa{
			color: $tropical-rain;
			}
			}
			.favorite-text{
			margin-left: 8px;
			font-size: $font-size-base;
			font-weight: 600;
			color: $tropical-rain;
			}
			}

			@media only screen and (max-width : 992px) {
			.sc-fixed {
			position: relative;
			width: 100%;
			}
			.wishlist-update-message {
			display : block;
			}
			.sc-item-error-messages {
			position: relative;
			}
			.read-more, .read-less {
			font-size: $font-size-h2/3;
			cursor: pointer;
			font-weight: 850;
			border-width: 0.125rem;
			}
			.more-text {
			display: none;
			}
			.inline-cart {
			display: none;
			}
			.right-side-cart {
			display: inherit !important;
			}
			.sp-attachment-add {
			margin-left: 0;
			padding: 0;
			}
			}
			@media only screen and (max-width : 768px) {
			.sc-sticky-item-header {
			position: inherit;
			}

			.sc-cat-item-short-description {
			width: 80%;
			}
			}
			.inline-cart {
			.quantity-selector {
			display: inline-block;
			width: 65px;
			padding-top: $sp-space--xxs;
			}
			}
			.alert-success .link {
			text-decoration: underline;
			}

			.alert-info-border {
			border-color: $alert-info-border;
			}

			.attachment-text {
			color: $primary;
			}

			.native-mobile {
			.panel {
			border-left: 0;
			border-right: 0;
			}
			.read-more, .read-less {
			font-size: $font-size-h2/2;
			cursor: pointer;
			}
			.more-text {
			display: none;
			}
			}

			.flex-center {
			display: flex;
			justify-content: center;
			align-items: center;
			}

			.flex-end {
			display: flex;
			justify-content: flex-end;
			}

			#catItemTop .panel.panel-default &gt; div:last-child {
			border-bottom: none;
			}

			.attachment-height {
			height: 80px;
			}</css>
        <data_table>sp_instance</data_table>
        <demo_data>{&#13;
			"options": {&#13;
			"sys_id": "04b7e94b4f7b4200086eeed18110c7fd"&#13;
			}&#13;
			}</demo_data>
        <description/>
        <docs/>
        <field_list>color</field_list>
        <has_preview>false</has_preview>
        <id>visitor-catalog-item</id>
        <internal>false</internal>
        <link><![CDATA[function visitorCatalogLink(scope, elem) {
    scope.setFocusToAttachment = function() {
        setTimeout(function() {
            var inboxArray = elem.find("a.view-attachment")[0];
            if (inboxArray)
                inboxArray.focus();
        }, 100);
    };
    scope.setFocusToAttachmentButton = function() {
        elem.find('.sp-attachment-add')[0].focus();
    };

    scope.focusElement = function(elemId, liveMessage) {
        setTimeout(function() {
            var elem = $('#' + elemId);
            if (elem)
                elem.focus().after(function() {
                    scope.sendLiveMessage(liveMessage, 500);
                });
        }, 100);
    };
}]]></link>
        <name>Visitor Catalog Item</name>
        <option_schema>[{"name":"show_add_cart_button","section":"other","label":"Show Add Cart Button","type":"boolean"},{"hint":"If you turn on this, you will be able to see field validation messages on right side","name":"show_field_validation_messages","default_value":"true","section":"other","label":"Show field validation messages","type":"boolean"},{"hint":"Show Add/Update Wish List buttons","name":"show_add_to_wishlist_button","default_value":"false","section":"other","label":"Show Add/Update Wish List buttons","type":"boolean"},{"hint":"Order item section on top. If you uncheck this, order section will be displayed at bottom of screen","name":"display_cart_on_right","default_value":"true","section":"other","label":"Order Item Section On Top","type":"boolean"},{"hint":"Show item description in few words with an option to read more","name":"show_less_description","default_value":"true","section":"other","label":"Enable Show More/Less for Item description on Mobile","type":"boolean"},{"hint":"Hide Save as Draft button","name":"hide_save_as_draft_button","default_value":"false","section":"other","label":"Hide Save as Draft button","type":"boolean"},{"hint":"Hide the Delivery Time in the widget","name":"hide_delivery_time","section":"other","default_value":"false","label":"Hide Delivery Time","type":"boolean"},{"hint":"Makes it a preview page","name":"is_preview","section":"other","default_value":"false","label":"Is preview","type":"boolean"}]</option_schema>
        <public>true</public>
        <roles/>
        <script><![CDATA[// populate the 'data' variable with catalog item, variables, and variable view
(function() {
    var localInput = input; //to safeguard pullution of "input" via BR or other scripts

    var engagementChannelOptions = { //extracting here to safeguard pollution of 'options' via other scripts
        native_mobile: options.native_mobile,
        isServiceWorkspace: options.isServiceWorkspace
    };
    data.engagement_channel = new global.GlobalServiceCatalogUtil().getEngagementChannel(engagementChannelOptions);
    data.referrer = $sp.getParameter("referrer");
    data.portal_suffix = $sp.getPortalRecord().getValue("url_suffix");

    var embeddedWidgetOptions = ['auto_redirect', 'requested_for_id', 'requested_for_display'];
    if (localInput && localInput.action == "from_attachment")
        return;

    if (localInput && localInput.action == "get_requested_for") {
        data.requested_for = new global.GlobalServiceCatalogUtil().getRequestedFor(localInput.parentParams);
        return;
    }

    if (localInput && localInput.action == 'init_item') {
        data._generatedItemGUID = gs.generateGUID();
        return;
    } else if (localInput && localInput.action === "order_item") {
        //Minimum set of widget options supported for Embedded widget
        embeddedWidgetOptions.forEach(function(embeddedWidgetOption) {
            if (typeof localInput[embeddedWidgetOption] != 'undefined')
                options[embeddedWidgetOption] = localInput[embeddedWidgetOption];
        });
        data.orderItemModal = $sp.getWidget('widget-modal', {
            embeddedWidgetId: 'sc-checkout',
            embeddedWidgetOptions: {
                cart: {
                    name: localInput.cart
                },
                action: 'order_now',
                item: localInput.itemDetails,
                requested_for: {
                    id: options.requested_for_id,
                    displayValue: options.requested_for_display
                },
                auto_redirect: options.auto_redirect,
                parentParams: localInput.parentParams,
                native_mobile: options.native_mobile,
                isServiceWorkspace: options.isServiceWorkspace,
                referrer: data.referrer,
                hide_actions: options.hide_actions
            },
            backdrop: 'static',
            keyboard: false,
            size: 'md'
        });
        return;
    } else if (localInput && localInput.action === "save_item") {
        data.saveItemModal = $sp.getWidget('widget-modal', {
            embeddedWidgetId: 'sc-item-save',
            embeddedWidgetOptions: {
                native_mobile: options.native_mobile,
                draftName: localInput.draftName,
                message: localInput.message,
                infoMessage: localInput.infoMessage,
            },
            backdrop: 'static',
            keyboard: false,
            size: 'md'
        });
        return;

    } else if (localInput && (localInput.action == "order_wishlist_item" || localInput.action == "order_draft_item")) {
        //Minimum set of widget options supported for Embedded widget
        embeddedWidgetOptions.forEach(function(embeddedWidgetOption) {
            if (typeof localInput[embeddedWidgetOption] != 'undefined')
                options[embeddedWidgetOption] = localInput[embeddedWidgetOption];
        });
        data.orderItemModal = $sp.getWidget('widget-modal', {
            embeddedWidgetId: 'sc-checkout',
            embeddedWidgetOptions: {
                cart: {
                    name: localInput.cart
                },
                action: localInput.action == "order_wishlist_item" ? 'order_now_wishlisted_item' : 'order_now_draft_item',
                item: localInput.itemDetails,
                requested_for: {
                    id: options.requested_for_id,
                    displayValue: options.requested_for_display
                },
                auto_redirect: options.auto_redirect,
                parentParams: localInput.parentParams,
                native_mobile: options.native_mobile,
                referrer: data.referrer
            },
            backdrop: 'static',
            keyboard: false,
            size: 'md'
        });
        return;
    } else if (localInput && localInput.action === 'log_request_cart') {
        $sp.logStat('Add to Cart Request', localInput.itemDetails.sys_class_name, localInput.itemDetails.sys_id, localInput.itemDetails.name, $sp.getPortalRecord().getUniqueValue());
        return;
    } else if (localInput && localInput.action === "log_order_one_step") {
        $sp.logStat('Order Now Request', localInput.itemDetails.sys_class_name, localInput.itemDetails.sys_id, localInput.itemDetails.name, $sp.getPortalRecord().getUniqueValue());
        $sp.logStat('Cat Item Request', localInput.itemDetails.sys_class_name, localInput.itemDetails.sys_id, localInput.itemDetails.name, $sp.getPortalRecord().getUniqueValue());
        return;
    } else if (localInput && localInput.action === 'log_request_producer') {
        $sp.logStat('Cat Item Request', localInput.itemDetails.sys_class_name, localInput.itemDetails.sys_id, localInput.itemDetails.name, $sp.getPortalRecord().getUniqueValue());
        return;
    }

    // portal can specify a catalog and catalog category home page
    var catalogID = $sp.getParameter("catalog_id") ? $sp.getParameter("catalog_id") + "" : "-1";
    data.sc_catalog_page = $sp.getDisplayValue("sc_catalog_page") || "sc_home";
    data.sc_category_page = $sp.getDisplayValue("sc_category_page") || "sc_category";
    var edit_parm = $sp.getParameter('edit');
    data.is_cart_item = edit_parm == 'cart';
    data.is_wishlist_item = edit_parm == 'wishlist';
    data.is_draft_item = edit_parm == 'draft';
    data.isPreview = options.is_preview == 'true' || $sp.getParameter("is_preview") == 'true';
    data.wishlist_item_id = "";
    data.recordFound = true;
    options.show_add_cart_button = (options.show_add_cart_button == "true");
    data.isMEE = options.native_mobile;
    var athTblName = 'sc_cart_item';
    var choicelistQuantityData = [];
    data.choiceListQuantity = choicelistQuantityData;
    data.quantity = 0;
    if (options.page) {
        var pageGR = new GlideRecord("sp_page");
        options.page = (pageGR.get(options.page)) ? pageGR.getValue("id") : null;
    }
    if (options.table) {
        var tableGR = new GlideRecord("sys_db_object");
        options.table = (tableGR.get(options.table)) ? tableGR.getValue("name") : null;
    }
    options.url = options.url || "id={page}&is_new_order=true&table={table}&sys_id={sys_id}";

    data.showPrices = $sp.showCatalogPrices();
    var m = data.msgs = {};
    m.submitMsg = gs.getMessage("Submit");
    m.deletedOutdatedItemMsg = gs.getMessage("The draft catalog item you’re trying to open is deleted because the catalog item was updated after you saved it as a draft. You’re redirected to a new catalog item page.");
    m.requestMsg = gs.getMessage("Request");
    m.orderNowMsg = gs.getMessage("Order Now");
    m.submittedMsg = gs.getMessage("Submitted");
    m.formSubmittedMsg = gs.getMessage("Form submitted successfully");
    m.submittingMsg = gs.getMessage("Submitting");
    m.savingMsg = gs.getMessage("Saving");
    m.updatingMsg = gs.getMessage("Updating");
    m.createdMsg = gs.getMessage("Created");
    m.trackMsg = gs.getMessage("track using 'Requests' in the header or");
    m.clickMsg = gs.getMessage("click here to view");
    m.dialogTitle = gs.getMessage("Delete Attachment");
    m.dialogMessage = gs.getMessage("Are you sure?");
    m.dialogOK = gs.getMessage("OK");
    m.dialogCancel = gs.getMessage("Cancel");
    m.dialogSave = gs.getMessage("Save");
    m.dialogUpdate = gs.getMessage("Update");
    m.addToCart = gs.getMessage("Add to Cart");
    m.updateCart = gs.getMessage("Update Cart");
    m.saveAsDraft = gs.getMessage("Save as draft");
    m.updateDraft = gs.getMessage("Update draft");
    m.alsoReqForClearConfirmMsg = gs.getMessage("This will clear the values entered in 'Also requested for'. Do you want to proceed?");
    m.attachmentAddedMsg = gs.getMessage("Attachment added successfully");
    m.renameSuccessMsg = gs.getMessage("Attachment renamed successfully");
    m.deleteSuccessMsg = gs.getMessage("Attachment deleted successfully");
    m.wishlistMsg = gs.getMessage('Wish List');
    m.cartMsg = gs.getMessage('Cart');
    m.myRequestsMsg = gs.getMessage('My Requests');
    m.draftItemMsg = gs.getMessage('Draft Items');
    m.itemWishlistMsg = gs.getMessage('This item is already in your Wish List. If you attempt to add this item to your Wish List it will overwrite the existing item.');
    m.invalidRecordMsg = gs.getMessage('You are either not authorized or record is not valid.');
    m.wishlistUpdateMsg = gs.getMessage('Your Wish List has been updated.');
    m.wishlistAddMsg = gs.getMessage('Your item has been added to your Wish List.');
    m.draftSaveMsg = gs.getMessage('Your item has been saved in My Requests.');
    m.draftUpdateMsg = gs.getMessage('Your draft item has been updated.');
    m.viewDraftItemMsg = gs.getMessage('View Drafts');
    m.cartAddMsg = gs.getMessage('Your item has been added to your Cart. ');
    m.cartMakeChangesMsg = gs.getMessage('To make changes to the items in your cart, click ');
    m.viewWishListMsg = gs.getMessage('View Wish List');
    m.viewCartMsg = gs.getMessage('View Cart');
    m.delete_attachment = gs.getMessage("Delete Attachment?");
    m.regexError = gs.getMessage("Item with invalid variable can't be saved");
    m.requestSubmitted = gs.getMessage("Thank you, your request has been submitted.");
    data.maxAttachmentSize = parseInt(gs.getProperty("com.glide.attachment.max_size", 1024));
    m.updatedMsg = gs.getMessage("Updated");
    m.quantityToMsg = gs.getMessage("quantity to");
    if (isNaN(data.maxAttachmentSize)) {
        data.maxAttachmentSize = 24;
    }
    m.largeAttachmentMsg = gs.getMessage("Attached files must be smaller than {0} - please try again", "" + data.maxAttachmentSize + "MB");
    m.checkoutDialogMsg = gs.getMessage("Catalog checkout dialog");
    m.saveItemDialogMsg = gs.getMessage("Catalog item save dialog");
    m.notForMobileMsg = gs.getMessage('Not viewable in mobile');
    m.save_draft = gs.getMessage('Save draft');
    m.update_draft = gs.getMessage('Update draft');
    m.save_draft_as = gs.getMessage('Save draft as');
    m.hereMsg = gs.getMessage("here.");
    m.draftExistsMsg = gs.getMessage('A draft for this item already exists. You can view all the drafts');
    m.newDraftInfoMsg = gs.getMessage("If you save this item now, a new draft item would be created.");
    m.itemSavedMsg = gs.getMessage('Item saved successfully');
    m.itemRemovedFromCartMsg = gs.getMessage("has been removed from your cart");
    m.itemRemovedFromWishlistMsg = gs.getMessage("has been removed from your wishlist");
    m.saveDraftNameLengthErrMsg = gs.getMessage('Draft Item name should not exceed 200 characters.');
    m.save_draft_description = gs.getMessage('Give a unique name to save this item as a draft to continue working on it later.');
    m.wishlistItemDeletionMsg = gs.getMessage("This catalog item is on your wish list. After you save the draft, the item will be deleted from the wishlist.");
    m.cartItemDeletionMsg = gs.getMessage("This catalog item is in your cart. After you save the draft, the item will be deleted from the cart.");
    m.draftAlreadyExistCabrilloMsg = gs.getMessage("A draft for this item already exists.");
    if (options.record_producer_label)
        data.record_producer_label = gs.getMessage(options.record_producer_label);

    if (options.native_mobile == 'true') {
        var listScreenGr = new GlideRecord("sys_sg_list_screen");
        listScreenGr.addQuery("sys_id", "31307d1787232300e0ef0cf888cb0b15");
        listScreenGr.setWorkflow(false);
        listScreenGr.query();
        if (listScreenGr.next()) {
            var deepLinkGen = new global.MobileDeepLinkGenerator('request');
            data.nativeMyRequestsScreenLink = deepLinkGen.getScreenLink('31307d1787232300e0ef0cf888cb0b15');
        } else
            data.nativeMyRequestsScreenLink = "";
    }

    if (edit_parm) {
        var cartName = data.is_cart_item ? 'DEFAULT' : (data.is_wishlist_item ? 'saved_items' : 'draft_items');
        var cart = new sn_sc.CartJS(cartName);

        var cart_item_id = $sp.getParameter("sys_id");
        var gr = new GlideRecord("sc_cart_item");
        if (!gr.get(cart_item_id) || gr.cart != cart.getCartID() ||
            (!new sn_sc.CatItem(gr.getValue('cat_item')).canView())) {
            data.recordFound = false;
            return;
        }
        data.showWishlist = data.is_wishlist_item;
        if (gr.isValidField('cart_item_name'))
            data.draftItemName = gr.getValue('cart_item_name');

        var catItemData = {};
        catItemData.sys_id = gr.getValue('cat_item');
        catItemData.cart_item_id = gr.getUniqueValue();
        catItemData.table = "sc_cart_item";
        catItemData.is_ordering = true;
        catItemData.from_guide = !!gr.getValue('order_guide');
        data.current_cart_item = cart_item_id;
        data.sc_cat_item = $sp.getCatalogItem(catItemData);
        var className = data.sc_cat_item.sys_class_name;
        if (!new global.CatalogItemTypeProcessor().canCreateNormalCartItem(className)) {
            if (className == 'sc_cat_item_producer' || className == 'std_change_record_producer')
                athTblName = data.sc_cat_item.target_table_name;
        }
        data._attachmentTable = athTblName;

        data.sc_cat_item.isCartItem = true;
        data.sc_cat_item.cart_guide = gr.getValue('order_guide');
        data.sc_cat_item.native_mobile = data.isMEE == 'true';
        data.hideDeliveryTime = data.sc_cat_item.no_delivery_time;
        if (!data.hideDeliveryTime)
            data.hideDeliveryTime = (options.hide_delivery_time == "true" || data.sc_cat_item.sys_class_name == 'sc_cat_item_producer' || data.sc_cat_item.sys_class_name == 'sc_cat_item_guide' || data.sc_cat_item.sys_class_name == 'std_change_record_producer');

        if (data.is_draft_item && typeof sn_sc.CartJS.isSameVersion == "function" && !sn_sc.CartJS.isSameVersion(cart_item_id, gr.getValue('cat_item'))) {
            var cartRecord = new sn_sc.CartJS("draft_items");
            cartRecord.remove(cart_item_id);
            if (athTblName != 'sc_cart_item')
                new global.GlobalServiceCatalogUtil().deleteAttachments(athTblName, cart_item_id);

            gs.getSession().putClientData('invalidVersionItem_' + data.sc_cat_item.sys_id, true);
            data.redirectToItem = true;
            return;
        }
        var values = getValues(cart_item_id);
        for (var f in data.sc_cat_item._fields) {
            // Put the values into the cat item fields
            var field = data.sc_cat_item._fields[f];
            if (typeof values[f] != "undefined" && typeof values[f].value != "undefined") {
                if (values[f].type == 9 || values[f].type == 10)
                    field.value = values[f].displayValue;
                else if (values[f].type == 25)
                    field.value = values[f].decrypted_value;
                else
                    field.value = values[f].value;
                field.displayValue = values[f].displayValue;
                field.display_value_list = values[f].display_value_list;
            }
            updatePriceOnField(field);

        }

        data._generatedItemGUID = cart_item_id;
        data.quantity = '' + gr.quantity;
    } else {

        if (localInput)
            data.sys_id = localInput.sys_id;
        else if (options.sys_id)
            data.sys_id = options.sys_id;
        else
            data.sys_id = $sp.getParameter("sys_id") || $sp.getParameter('sl_sys_id');

        if (!data.sys_id) {
            data.recordFound = false;
            return;
        }

        data._generatedItemGUID = gs.generateGUID();

        var validatedItem = new sn_sc.CatItem('' + data.sys_id);
        if (!data.isPreview) {
            if (!validatedItem.canView() || !validatedItem.isVisibleServicePortal()) {
                data.recordFound = false;
                return;
            }
        }

        data.sc_cat_item = $sp.getCatalogItem({
            sys_id: data.sys_id + '',
            is_ordering: true
        });

        className = data.sc_cat_item.sys_class_name;
        if (!new global.CatalogItemTypeProcessor().canCreateNormalCartItem(className)) {
            if (className == 'sc_cat_item_producer' || className == 'std_change_record_producer')
                athTblName = data.sc_cat_item.target_table_name;
        }
        data._attachmentTable = athTblName;

        data.favoriteWidget = $sp.getWidget('ec_favorite', {
            'table': data.sc_cat_item.sys_class_name,
            'sys_id': data.sc_cat_item.sys_id
        });

        if (options.native_mobile == 'true') {
            if (gs.getProperty('glide.sc.mobile.item_class_not_supported', '').split(',').indexOf(data.sc_cat_item.sys_class_name) > -1) {
                data.not_for_mobile = true;
                data.sc_cat_item = {};
                return;
            }
            if (gs.getProperty('glide.sc.mobile.include_desktop_only_items', 'true') == 'false') {
                if (data.sc_cat_item.availability == 'on_desktop') {
                    data.not_for_mobile = true;
                    data.sc_cat_item = {};
                    return;
                }
            }
        }

        data.sc_cat_item.native_mobile = data.isMEE == 'true';
        data.hideDeliveryTime = data.sc_cat_item.no_delivery_time;
        if (!data.hideDeliveryTime)
            data.hideDeliveryTime = (options.hide_delivery_time == "true" || data.sc_cat_item.sys_class_name == 'sc_cat_item_producer' || data.sc_cat_item.sys_class_name == 'sc_cat_item_guide' || data.sc_cat_item.sys_class_name == 'std_change_record_producer');

        if (data.sc_cat_item.dynamic)
            updatePortalConfigOfDynamicContentItem(data.sc_cat_item.dynamic, data.sc_cat_item);


        if (data.sc_cat_item.category) {
            var categoryJS;
            var categoryID = validatedItem.getFirstAccessibleCategoryForSearch((catalogID && catalogID != "-1") ? catalogID : $sp.getCatalogs().value + "");
            if (GlideStringUtil.isEligibleSysID($sp.getParameter("sysparm_category"))) {
                categoryJS = new sn_sc.CatCategory($sp.getParameter("sysparm_category") + "");
                categoryID = $sp.getParameter("sysparm_category") + "";
            } else if (categoryID) {
                categoryJS = new sn_sc.CatCategory(categoryID);
            }
            if (categoryJS && GlideStringUtil.isEligibleSysID(categoryJS.getID())) {
                if (categoryJS.getCatalog()) {
                    catalogID = categoryJS.getCatalog();
                    data.catalog_id = catalogID;
                    var catalogObj = new sn_sc.Catalog('' + catalogID);
                    data.sc_catalog = catalogObj.getTitle();
                    data.showWishlist = catalogObj.isWishlistEnabled();
                }
                data.category = {
                    name: categoryJS.getTitle(),
                    url: '?id=' + data.sc_category_page + '&sys_id=' + categoryID
                };
                data.categories = [];
                data.categories.push({
                    label: categoryJS.getTitle(),
                    url: '?id=' + data.sc_category_page + '&sys_id=' + categoryID
                });
                while (categoryJS.getParent()) {
                    var parentId = categoryJS.getParent();
                    categoryJS = new sn_sc.CatCategory(parentId);
                    var category = {
                        label: categoryJS.getTitle(),
                        url: '?id=' + data.sc_category_page + '&sys_id=' + parentId
                    };
                    data.categories.unshift(category);
                }
                if ((($sp.getCatalogs().value + "").split(",")).length > 1) {
                    data.all_catalog_msg = gs.getMessage("All Catalogs");
                }
            }
        }

    }

    var wishlistGr = new GlideRecord('sc_cart_item');
    wishlistGr.addQuery('cart', new sn_sc.CartJS('saved_items').getCartID());
    wishlistGr.addQuery('cat_item', data.sc_cat_item.sys_id);
    wishlistGr.query();
    if (wishlistGr.next() && !options.isServiceWorkspace)
        data.wishlist_item_id = wishlistGr.getUniqueValue();

    if (gs.nil(data.draftItemName))
        data.draftItemName = gs.getMessage("{0} draft", data.sc_cat_item.name);

    data.draft_buttons_hidden_via_property = (gs.getProperty('glide.sc.disable.save_as_draft') == 'true') || (gs.getProperty('glide.sc.enable.save_as_draft.portal.' + data.portal_suffix) != 'true');
    if (!gs.getSession().getClientData('invalidVersionItem_' + data.sc_cat_item.sys_id)) {
     //   gs.getSession().clearClientData('invalidVersionItem_' + data.sc_cat_item.sys_id);
        data.isInvalidVersion = true;
    }

    if (!data.draft_buttons_hidden_via_property && (options.hide_save_as_draft_button != "true") && !data.sc_cat_item.no_save_as_draft) {
        var draftItemGr = new GlideRecord('sc_cart_item');
        draftItemGr.addQuery('cart', new sn_sc.CartJS('draft_items').getCartID());
        draftItemGr.addQuery('cat_item', data.sc_cat_item.sys_id);
        draftItemGr.query();
        data.hasDraftItem = draftItemGr.hasNext();
    }

    data.sys_properties = {
        twostep: gs.getProperty("glide.sc.sp.twostep", "true") == 'true' && !data.sc_cat_item.has_requested_for_variable,
        mobileNativeColor: gs.getProperty("glide.sc.mobile.primary_color", "#1f8476"),
        cartEnabled: gs.getProperty("glide.sc.cart.enabled", "false") == "true",
        stopNavigationOnError: gs.getProperty("glide.sc.stop_navigation_on_error", "true") == "true",
        isPolaris: gs.getProperty("glide.ui.polaris.experience", "false")
    };

    m.catItemOpenedMsg = gs.getMessage("Catalog item {0} opened", data.sc_cat_item.name);

    className = data.sc_cat_item.sys_class_name;
    data.can_create_cart_item = canCreateCartItem(className) && !gs.hasRole('snc_read_only');

    function canCreateCartItem(className) {
        var allowedClasses = ['sc_cat_item_producer', 'std_change_record_producer', 'sc_cat_item_producer_service'];
        if (allowedClasses.indexOf(className) > -1)
            return true;

        var invalidClasses = ('sc_cat_item_content,' + gs.getProperty('glide.sc.item.not_normal_cart_item', '')).split(',');

        return invalidClasses.indexOf(className) < 0;
    }


    data.stdChg = {};
    if (className === 'std_change_record_producer') {
        //Populate scope with the porperty for two step
        data.stdChg.twoStep = false;
        var twoStepProp = new global.StdChangeUtils().getValue('two_step') + '';
        if (twoStepProp)
            data.stdChg.twoStep = twoStepProp === '1';
        var stdChgProducerGr = new GlideRecord('std_change_record_producer');
        stdChgProducerGr.get(data.sc_cat_item.sys_id);
        if (stdChgProducerGr.isValidRecord())
            data.stdChg.currentVersion = stdChgProducerGr.getValue('current_version');
        if (gs.getProperty('com.snc.change_management.change_model.type_compatibility', 'false') !== 'true')
            data.stdChg.chgModel = new global.StdChangeUtils().DEFAULT_CHG_MODEL;
        data.stdChg.defaultType = new global.StdChangeUtils().DEFAULT_CHG_TYPE;
    }

    if (data.sc_cat_item.sys_class_name !== 'sc_cat_item_content')
        $sp.logStat('Cat Item View', data.sc_cat_item.sys_class_name, data.sc_cat_item.sys_id, data.sc_cat_item.name, $sp.getPortalRecord().getUniqueValue());

    function getValues(sys_id) {
        var qs = new sn_sc.VariablePoolQuestionSetJS();
        qs.setCartID(sys_id);
        qs.load();
        var values = {};
        var questions = qs.getFlatQuestions();
        for (var i = 0; i < questions.length; i++) {
            var qKey = questions[i].name;
            if (typeof qKey == 'undefined' || qKey == '')
                qKey = "IO:" + questions[i].sys_id;
            values[qKey] = questions[i];
        }
        return values;
    }

    function setPrice(field, p, rp) {
        if (p != undefined)
            field.price = p;
        if (rp != undefined)
            field.recurring_price = rp;
    }

    function updatePriceForReferenceTable(field) {
        var tableName = field.refTable + '';
        if (tableName != undefined && tableName != null && tableName != '') {
            var gr = new GlideRecord(tableName);
            if (gr.isValid()) {
                if (gr.get(field.value) && gr.isValidRecord()) {
                    updatePrice(gr, field);
                    updateRecurringPrice(gr, field);
                }
            }
        }
    }

    function updatePriceForListCollector(field) {
        var tableName = field.refTable + '';
        if (tableName != undefined && tableName != null && tableName != '') {
            var gr = new GlideRecord(tableName);
            if (gr.isValid()) {
                var values = field.value.split(',');
                gr.addQuery('sys_id', values);
                gr.query();
                var p = 0.0;
                var rp = 0.0;
                var price_value_list = [];
                while (gr.next()) {
                    var price_field = {};
                    updatePrice(gr, price_field);
                    updateRecurringPrice(gr, price_field);
                    if (price_field.price)
                        p += Number(price_field.price);
                    else
                        price_field.price = 0.0;
                    if (price_field.recurring_price)
                        rp += Number(price_field.recurring_price);
                    else
                        price_field.recurring_price = 0.0;
                    price_value_list.push(price_field);
                }
                field.price = p;
                field.recurring_price = rp;
                field.price_value_list = price_value_list;
            }
        }
    }

    function updatePrice(gr, field) {
        if (gr.isValidField('price'))
            field.price = gr.getValue('price');
        else if (gr.isValidField('u_price'))
            field.price = gr.getValue('u_price');
    }

    function updateRecurringPrice(gr, field) {
        if (gr.isValidField('recurring_price'))
            field.recurring_price = gr.getValue('recurring_price');
        else if (gr.isValidField('u_recurring_price'))
            field.recurring_price = gr.getValue('u_recurring_price');
    }

    function updatePriceOnField(field) {
        if (field.type == 'boolean' || field.type == 'boolean_confirm') {
            if (field.value == 'true' || field.value == true)
                setPrice(field, field._pricing.price_if_checked, field._pricing.recurring_price_if_checked);
            else
                setPrice(field, 0, 0);
        } else if (field.choices) {
            var valueExistInChoices = false;
            field.choices.forEach(function(choice) {
                if (choice.value + '' == field.value + '') {
                    setPrice(field, choice.price, choice.recurring_price);
                    valueExistInChoices = true;
                }
            });
            if (!valueExistInChoices)
                setPrice(field, 0, 0);
        } else if (field._pricing && field._pricing.pricing_implications === true) {
            if (field.type == 'reference')
                updatePriceForReferenceTable(field);
            else if (field.type == 'glide_list')
                updatePriceForListCollector(field);
        }
    }

    function updatePortalConfigOfDynamicContentItem(dynamicContents, item) {
        var portalUrl = new global.DynamicCatalogContentUtil().getServicePortalUrl(dynamicContents.model, dynamicContents.content);
        if (portalUrl)
            item.portalUrl = portalUrl;
    }
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-28 20:40:57</sys_created_on>
        <sys_id>897fdbe3c3341210a7705fd1b4013171</sys_id>
        <sys_mod_count>9</sys_mod_count>
        <sys_name>Visitor Catalog Item</sys_name>
        <sys_package display_value="Visitor Management" source="x_845458_visitorsa">3ab4f6ebc3301210a7705fd1b4013154</sys_package>
        <sys_policy/>
        <sys_scope display_value="Visitor Management">3ab4f6ebc3301210a7705fd1b4013154</sys_scope>
        <sys_update_name>sp_widget_897fdbe3c3341210a7705fd1b4013171</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-28 21:56:20</sys_updated_on>
        <template><![CDATA[<div id="sc_cat_item" ng-if="::(data.recordFound && !data.not_for_mobile)" sn-atf-blacklist="IS_SERVICE_CATALOG">
  <sp-widget widget="c.orderItemModal" ng-if="c.orderItemModal"></sp-widget>
  <sp-widget widget="c.saveItemModal" ng-if="c.saveItemModal"></sp-widget>
  <div class="row" ng-if="::data.sc_cat_item" ng-class="{'native-mobile': options.native_mobile == 'true'}">
    <div class="col-sm-12" ng-class="{'col-md-9': options.display_cart_on_right === 'true', 'col-md-12': options.display_cart_on_right !== 'true', 'no-padder': options.native_mobile == 'true'}" id="catItemTop">
      <!-- Info Message Box -->
      <div  ng-if="data.hasDraftItem && !data.is_draft_item && !c.data.sc_cat_item.no_save_as_draft && !c.isNative" class="alert alert-info" sc-bind-html-compile="::c.draftExistsWithLinkMsg">
      </div>
      <div ng-if="c.showAddToWishlist()  && !data.is_wishlist_item && !!data.wishlist_item_id && data.wishlist_item_id != data._generatedItemGUID" class="alert alert-info" role="status">
        {{::m.itemWishlistMsg}}
      </div>
      <div class="alert alert-danger" ng-if="data.isInvalidVersion">
        <span>
          {{::m.deletedOutdatedItemMsg}}
        </span>
       <i class="fa fa-close pull-right pointer" aria-label="${Close Notification}" tabindex="0" ng-click="data.isInvalidVersion = false"/>
      </div>
      <!--	Success Message Box	-->
      <div class="alert alert-success" ng-if="data.showMsg" sc-bind-html-compile="m.actionMsg">
      </div>
      <div class="panel panel-default">
        <!-- Title Section -->
        <div role="region" aria-label="${Item Details}">
        	<div class="wrapper-md b-b break-word item-header clearfix" ng-class="{true: '', false: 'sc-sticky-item-header'}[!c.data.sc_cat_item.short_description]" style="top: {{stickyHeaderTop}}">
	          <span class="pull-right" ng-if="!c.isNative">
                <sp-widget widget="data.favoriteWidget"></sp-widget>
              </span>
          <h2 class="h2 m-t-none m-b-sm font-thin" ng-if="::data.sc_cat_item.name && options.native_mobile != 'true'">{{::data.sc_cat_item.name}}</h2>
          <div class="text-muted sc-cat-item-short-description" ng-if="::data.sc_cat_item.short_description">{{::data.sc_cat_item.short_description}}</div>
          <div ng-if="c.isNative && !c.isAgentApp" class="cat-mobile-favorite" ng-click="toggleFavorite($event)">
              <sp-widget widget="data.favoriteWidget"></sp-widget>
              <span ng-if = "showFavorite">
                <span class="favorite-text" ng-if="isFavorite === true">${Favorited}</span>
                <span class="favorite-text" ng-if="isFavorite === false">${Favorite}</span>
              </span>
          </div>
        </div>
        	<div class="row b-b no-margin" ng-if="c.data.sc_cat_item.picture || c.data.sc_cat_item.trusted_description" ng-class="{'wrapper-md': options.native_mobile != 'true', 'wrapper-sm': options.native_mobile == 'true'}">
          <div class="col-sm-4 col-xs-12 no-padder" ng-if="c.data.sc_cat_item.picture">
            <div class="wrapper-md text-center">
              <i class="fa fa-chevron-left pointer" style="position:absolute; top:50%; left:4%; color:#CECECE" ng-if="options.image_gallery"></i>
              <img class="img-responsive catalog-item-image" alt="{{c.isNative ? data.sc_cat_item.name : ''}}" role="{{c.isNative ? 'img' : 'presentation'}}" style="display: inline" ng-src="{{::data.sc_cat_item.picture}}?t=medium" />
              <i class="fa fa-chevron-right pointer" style="position:absolute; top:50%; right:4%; color:#CECECE" ng-if="options.image_gallery"></i>
              <div class="image-gallery padding-top" ng-if="options.image_gallery">
                <i class="fa fa-circle active"></i>
                <i class="fa fa-circle"></i>
                <i class="fa fa-circle"></i>
              </div>
            </div>
          </div>
          <div class="col-xs-12 break-word"
               ng-class="{true: 'col-sm-12 no-padder', false: 'col-sm-8'}[!c.data.sc_cat_item.picture]">
            <div class="visible-md visible-lg" ng-class="{false : 'visible-xs visible-sm', true : 'hidden-xs hidden-sm'}[c.options.show_less_description === 'true']" style="overflow : auto">
              <div ng-bind-html="::data.sc_cat_item.trusted_description" class="sc-item-description"></div>
            </div>
            <div class="col-xs-12 col-sm-12 visible-xs visible-sm" ng-if="c.options.show_less_description === 'true'">
              <sc-toggle-data sn-data="::data.sc_cat_item.trusted_description"></sc-toggle-data>
            </div>
          </div>
        </div>
        </div>
        <div class="b-b wrapper-md" ng-show="!data.no_fields" aria-label="${Form}">
          <sp-cat-item item="::data.sc_cat_item" ></sp-cat-item>
	  <div ng-if="c.mandatory.length > 0" class="sc-cat-item-legend" ng-attr-role="{{c.isNative ? 'text' : undefined}}">
           <span class="fa fa-asterisk mandatory" title="${asterisk}" style="padding-right: .25rem">
		<span class="sr-only">${asterisk}</span>
	    </span>
            <span>${Indicates required}</span>
     	  </div>
          <form id="catalog-form">
            <!-- display view and model -->
            <sp-model form-model="::data.sc_cat_item" mandatory="c.mandatory"></sp-model>
          </form>
        </div>
        <div class="b-b wrapper-md" ng-if="::(data.sc_cat_item.content_type == 'external' || data.sc_cat_item.content_type == 'kb' || data.sc_cat_item.content_type == 'dynamic')">
          <div ng-if="::data.sc_cat_item.content_type == 'external'" class="wrapper-md m-l-sm">
            <a ng-href="{{::data.sc_cat_item.url}}" target={{::data.sc_cat_item.target}}>${Go to Link:} {{::data.sc_cat_item.url}} ➚</a>
          </div>
          <div ng-if="::data.sc_cat_item.content_type == 'kb'" class="wrapper-md m-l-sm">
            <a  ng-href="?id=kb_article&sys_id={{::data.sc_cat_item.kb_article}}">${Go to KB Article:} {{::data.sc_cat_item.kb_article_description}}</a>
          </div>
          <div ng-if="::data.sc_cat_item.content_type == 'dynamic'" class="wrapper-md m-l-sm">
            	<a ng-if="::data.sc_cat_item.portalUrl" ng-href="{{::data.sc_cat_item.portalUrl}}">${Go to Link:} {{::data.sc_cat_item.portalUrl}}</a>
                <a ng-if="::!data.sc_cat_item.portalUrl" ng-href="{{::data.sc_cat_item.url}}" target={{::data.sc_cat_item.target}}>${Go to Link:} {{::data.sc_cat_item.url}} ➚</a>
          </div>
        </div>
        <!-- Bottom cart -->
        <div class="inline-cart" ng-if="::(options.display_cart_on_right !== 'true' && options.native_mobile != 'true')" role="region" aria-label="${Page Actions}">
          <div ng-if="c.showCart()" class="wrapper-md b-b">
            <div ng-if="::c.allowOrder() && c.showQuantitySelector()" class="m-b">
               <label for="catItemQuantity"><b>${Quantity}</b></label>
               <div class="cat-item-quantity-box-bottom-cart">
                 <select id="catItemQuantity"
                          title="${Quantity}"
                          ng-disabled="disableControls()"
                          class="m-r-xs sn-select-basic"
                          ng-model="c.quantity"
                          sn-select-width="65px"
                          ng-change="c.updateQuantity(data.sc_cat_item)"
                          aria-hidden="true">
                   <option ng-repeat="num in data.choiceListQuantity" value={{::num.value}}>{{::num.label}}</option>
                 </select>
               </div>
            </div>
            <div class="m-b" ng-if="c.showPrice()" >
              <b>${Price}</b>
              <div>
                {{data.sc_cat_item.price_display}}<em ng-if="data.sc_cat_item.recurring_price" class="cat_item_price"> {{data.sc_cat_item.price ? '+' : ''}} {{data.sc_cat_item.recurring_price_display + ' ' + data.sc_cat_item.recurring_price_frequency}}</em>
              </div>
            </div>
             <div class="m-b" ng-if="c.showDeliveryTime()">
              <b>${Delivery Time}</b>
              <div>
                {{::data.sc_cat_item.estimated_delivery_time}}
              </div>
            </div>
            <div ng-if="::c.allowOrder()" class="text-right">
              <button sp-ellipsis-tooltip sp-ellipsis-tooltip-title="${Add to Cart}" tabindex="0" ng-if="c.showAddCartBtn()" name="add_to_cart" ng-disabled="disableControls()" ng-click="triggerAddToCart()" class="btn btn-default m-r-xs bottom-button-width text-overflow-ellipsis">
                <i class="fa fa fa-shopping-cart pull-left cart-icon-padding-top" aria-hidden="true"></i>
                ${Add to Cart}
              </button>
              <button sp-ellipsis-tooltip sp-ellipsis-tooltip-title="${Update Cart}" tabindex="0" ng-if="data.is_cart_item" name="update" ng-disabled="disableControls()" ng-click="triggerUpdateCart()" class="btn btn-default m-r-xs bottom-button-width text-overflow-ellipsis">
                <i class="fa fa fa-shopping-cart pull-left cart-icon-padding-top" aria-hidden="true"></i>
                ${Update Cart}
              </button>
              <span class="form-group relative" ng-if="c.showAddToWishlist()">
                <button sp-ellipsis-tooltip sp-ellipsis-tooltip-title="${Add to Wish List}" ng-if="!data.is_wishlist_item" name="add_to_wishlist" ng-click="triggerAddToWishlist()" ng-disabled="disableControls()" class="btn btn-default m-r-xs bottom-button-width text-overflow-ellipsis">
                  <i class="icon-sp-wishlist pull-left cart-icon-margin" aria-hidden="true"></i>
                  ${Add to Wish List}
                </button>
                <button sp-ellipsis-tooltip sp-ellipsis-tooltip-title="${Update Wish List}" ng-if="data.is_wishlist_item" name="update_wishlist" ng-click="triggerAddToWishlist()" ng-disabled="disableControls()" class="btn btn-default m-r-xs bottom-button-width text-overflow-ellipsis">
                  <i class="icon-sp-wishlist pull-left cart-icon-margin" aria-hidden="true"></i>
                  ${Update Wish List}
                </button>
              </span>
              <span class="form-group relative">
                <button sp-ellipsis-tooltip sp-ellipsis-tooltip-title="${Save as Draft}" ng-if="c.showDraftButtons() && !data.is_draft_item" name="save_item" ng-click="triggerSaveItem()" ng-disabled="disableControls()" class="btn btn-default m-r-xs bottom-button-width text-overflow-ellipsis">
                  <i class="icon-save pull-left cart-icon-margin" aria-hidden="true"></i>
                  ${Save as Draft}
                </button>
                <button sp-ellipsis-tooltip sp-ellipsis-tooltip-title="${Update Draft}" ng-if="c.showDraftButtons() && data.is_draft_item" name="update_saved_item" ng-click="triggerSaveItem()" ng-disabled="disableControls()" class="btn btn-default m-r-xs bottom-button-width text-overflow-ellipsis">
                  <i class="icon-save pull-left cart-icon-margin" aria-hidden="true"></i>
                  ${Update Draft}
                </button>
              </span>
              <button sp-ellipsis-tooltip sp-ellipsis-tooltip-title="{{submitButtonMsg}}" ng-if="::c.showOrderNowButton()" tabindex="0" name="submit" ng-disabled="disableControls()" ng-click="triggerOnSubmit()" class="btn btn-primary bottom-button-width text-overflow-ellipsis" id="submit-btn" aria-live="assertive">{{submitButtonMsg}}</button>
              <span ng-if="submitting" style="padding-left:4px">${Submitting...}</span>
              <span ng-if="validating" style="padding-left:4px">${Validating...}</span>
            </div>
            <div ng-show="hasMandatory(c.mandatory)" class="alert alert-info" style="margin-top: .5em" ng-if="c.options.show_field_validation_messages === 'true'" aria-live="assertive">
              <div id="required_field_bottom" role="group" aria-label="${Required information - clicking on any button in this group will take you to the corresponding mandatory field}">
                <div id="required_information_bottom" ng-if="hasMandatory(c.mandatory)" aria-hidden="true">${Required information} </div>
                <div style="display:flex; flex-wrap:wrap; grid-row-gap:3px;">
                  <div ng-repeat="f in c.mandatory">
                    <div role="alert">
                      <span class="sr-only" id="req_info_bottom_{{::f.name}}">${Required information}</span>
                  		<button for="req_info_bottom_{{::f.name}}" class="label sc-field-error-label sc-reqd-info-btn" ng-click="getFocus(f)" title="{{::f.label}}">{{::f.label}}</button>
                    </div>
                </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div ng-if="c.showAttachments()" class="wrapper-md row no-margin" role="region" data-label="Attachments" aria-label="${Attachments}">
          <now-attachments-list template="sp_attachment_single_line" ></now-attachments-list>
          <div ng-class="{'flex-center attachment-height': options.native_mobile == 'true', 'flex-end': options.native_mobile != 'true'}">
            <label ng-if="!submitting && !submitted" style="font-weight:normal;cursor:pointer;">
              <sp-attachment-button modal="true" required="{{data.sc_cat_item.mandatory_attachment}}"></sp-attachment-button>
              <span class="fa fa-asterisk mandatory"
                      ng-if="data.sc_cat_item.mandatory_attachment"
                      ng-class="{'mandatory-filled': data.sc_cat_item.mandatory_attachment && (data.sc_cat_item.attachment_submitted || attachments.length > 0)}"
                      style="vertical-align:super" aria-hidden="true"></span>
              <span ng-class="{'attachment-text' : options.native_mobile == 'true'}" aria-hidden="true">${Add attachments}</span>
            </label>
          </div>
        </div>
      </div>
    </div>
    <!-- Right side content -->
    <div class="col-sm-12 col-md-3 right-side-cart" ng-show="::options.display_cart_on_right === 'true' || c.isNative === true" ng-class="{'no-padder': options.native_mobile == 'true'}" role="region" aria-label="${Page Actions}">
      <!-- Right side cart( If you are chaning anything here, please change in bottom cart section also) -->
      <div ng-class="{true:'sc-fixed', false:'' }[isSCCartFixed]">
        <div ng-if="c.showCart()" class="panel panel-{{::options.color}} b" ng-class="{'wrapper-md': options.native_mobile != 'true', 'wrapper-sm': options.native_mobile == 'true'}">
          <div ng-if="::c.allowOrder()" ng-class="{'form-group': options.native_mobile == 'true'}">
            <div ng-if="c.showQuantitySelector()" class="cat-item-quantity-group">
			   <label for="catItemQuantity"><b>${Quantity}:</b></label>
              <div class="cat-item-quantity-box">
                <select id="catItemQuantity"
                    title="${Quantity}"
                    ng-disabled="disableControls()"
                    class="m-b sn-select-basic"
                    ng-model="c.quantity"
                    ng-change="c.updateQuantity(data.sc_cat_item)"
                    aria-hidden="true">
                  <option ng-repeat="num in data.choiceListQuantity" value={{::num.value}}>{{::num.label}}</option>
                </select>
              </div>
            </div>
          </div>
          <div class="form-group relative" ng-if="c.options.native_mobile == 'true'">
            <div class="" ng-if="c.showPrice()">
              <b aria-hidden="true">{{data.sc_cat_item.price_display}}</b>
              <span class="sr-only">${Price} {{data.sc_cat_item.price_display}}</span>
              <em aria-hidden="true" ng-if="data.sc_cat_item.recurring_price" class="cat_item_price"> {{data.sc_cat_item.price ? '+' : ''}} {{data.sc_cat_item.recurring_price_display + ' ' + data.sc_cat_item.recurring_price_frequency}}</em>
              <span class="sr-only" ng-if="data.sc_cat_item.recurring_price">${Recurring Price} {{data.sc_cat_item.recurring_price_display}} {{data.sc_cat_item.recurring_price_frequency}}</span>
            </div>
            <div class="text-muted" ng-if="c.showDeliveryTime()">
              ${Delivery Time}: {{::data.sc_cat_item.estimated_delivery_time}}
            </div>
          </div>
          <div class="form-group relative" ng-if="c.options.native_mobile != 'true'">
            <div class="form-group" ng-if="c.showPrice()">
              <b>${Price}:</b> {{data.sc_cat_item.price_display}}<em ng-if="data.sc_cat_item.recurring_price" class="cat_item_price"> {{data.sc_cat_item.price ? '+' : ''}} {{data.sc_cat_item.recurring_price_display + ' ' + data.sc_cat_item.recurring_price_frequency}}</em>
            </div>
            <div class="form-group" ng-if="c.showDeliveryTime()">
              <b>${Delivery Time}:</b> {{::data.sc_cat_item.estimated_delivery_time}}
            </div>
            <button sp-ellipsis-tooltip sp-ellipsis-tooltip-title="${Add to Cart}" tabindex="0" ng-if="c.showAddCartBtn()" name="add_to_cart" ng-disabled="disableControls()" ng-click="triggerAddToCart()" class="btn btn-default sc-btn form-control text-overflow-ellipsis">
              <i class="fa fa fa-shopping-cart pull-left cart-icon-padding-top" aria-hidden="true"></i>
              ${Add to Cart}
            </button>
            <button sp-ellipsis-tooltip sp-ellipsis-tooltip-title="${Update Cart}" tabindex="0" ng-if="data.is_cart_item" name="update" ng-disabled="disableControls()" ng-click="triggerUpdateCart()" class="btn btn-default sc-btn form-control text-overflow-ellipsis">
              <i class="fa fa fa-shopping-cart pull-left cart-icon-padding-top" aria-hidden="true"></i>
              ${Update Cart}
            </button>
          </div>
          <div class="form-group relative" ng-if="c.showAddToWishlist()">
            <button sp-ellipsis-tooltip sp-ellipsis-tooltip-title="${Add to Wish List}" ng-if="!data.is_wishlist_item" name="add_to_wishlist" ng-click="triggerAddToWishlist()" ng-disabled="disableControls()" class="btn btn-default sc-btn form-control text-overflow-ellipsis">
              <i class="icon-sp-wishlist pull-left cart-icon-margin" aria-hidden="true"></i>
              ${Add to Wish List}
            </button>
            <button sp-ellipsis-tooltip sp-ellipsis-tooltip-title="${Update Wish List}" ng-if="data.is_wishlist_item" name="update_wishlist" ng-click="triggerAddToWishlist()" ng-disabled="disableControls()" class="btn btn-default sc-btn form-control text-overflow-ellipsis">
              <i class=" icon-sp-wishlist pull-left cart-icon-margin" aria-hidden="true"></i>
              ${Update Wish List}
            </button>
          </div>
          <div class="form-group relative" ng-if="c.options.native_mobile != 'true'">
            <button sp-ellipsis-tooltip sp-ellipsis-tooltip-title="${Save as Draft}" ng-if="c.showDraftButtons() && !data.is_draft_item" name="save_item" ng-click="triggerSaveItem()" ng-disabled="disableControls()" class="btn btn-default sc-btn form-control text-overflow-ellipsis">
              <i class="icon-save pull-left cart-icon-margin" aria-hidden="true"></i>
              ${Save as Draft}
            </button>
            <button sp-ellipsis-tooltip sp-ellipsis-tooltip-title="${Update Draft}" ng-if="c.showDraftButtons() && data.is_draft_item" name="update_saved_item" ng-click="triggerSaveItem()" ng-disabled="disableControls()" class="btn btn-default sc-btn form-control text-overflow-ellipsis">
              <i class="icon-save pull-left cart-icon-margin" aria-hidden="true"></i>
              ${Update Draft}
            </button>
          </div>
          <div class="form-group m-b-xs" ng-if="c.options.native_mobile != 'true'">
            <button sp-ellipsis-tooltip sp-ellipsis-tooltip-title="{{submitButtonMsg}}" ng-if="::c.showOrderNowButton()" tabindex="0" name="submit" id="submit-btn" ng-disabled="disableControls()" ng-click="triggerOnSubmit()" class="btn btn-primary btn-block text-overflow-ellipsis">{{submitButtonMsg}}</button>
            <span ng-if="submitting" style="padding-left:4px">${Submitting...}</span>
            <span ng-if="validating" style="padding-left:4px">${Validating...}</span>
          </div>
          <div class="form-group m-b-xs flex-center" ng-if="c.options.native_mobile == 'true' && 1==2">
            <button tabindex="0" ng-if="c.showAddCartBtn()" name="add_to_cart" ng-disabled="disableControls()" ng-click="triggerAddToCart()" class="btn btn-default sc-btn native-btn rounded m-r-lg padder-xl">
              ${Add to Cart}
            </button>
            <button tabindex="0" ng-if="data.is_cart_item" name="update" ng-disabled="disableControls()" ng-click="triggerUpdateCart()" class="btn btn-default sc-btn native-btn rounded m-r-lg padder-xl">
              <i class="fa fa fa-shopping-cart sc-order-widget-btn pull-left" aria-hidden="true"></i>
              ${Update Cart}
            </button>
            <div class="form-group m-b-xs">
              <button ng-if="::c.showOrderNowButton()" tabindex="0" name="submit" id="submit-btn" ng-disabled="disableControls()" ng-click="triggerOnSubmit()" class="btn btn-primary rounded m-l-lg padder-xl">{{submitButtonMsg}}</button>
              <span ng-if="submitting" style="padding-left:4px">${Submitting...}</span>
            </div>
          </div>
        </div>
        <div class="sc-item-error-messages" ng-if="c.options.show_field_validation_messages === 'true'">
          <div ng-if="hasMandatory(c.mandatory)" class="row alert alert-info-border" style="margin-top: .5em" aria-live="assertive">
            <div class="col-sm-12">
              <div id="required_field_bottom" role="group" aria-label="${Required information - clicking on any button in this group will take you to the corresponding mandatory field}">
                <div id="required_information_bottom" ng-if="hasMandatory(c.mandatory)" aria-hidden="true">${Required information} </div>
                <div style="display:flex; flex-wrap:wrap; grid-row-gap:3px;">
                  <div ng-repeat="f in c.mandatory">
                      <span class="sr-only" id="req_info_bottom_{{::f.name}}">${Required information}</span>
                  		<button for="req_info_bottom_{{::f.name}}" class="label sc-field-error-label sc-reqd-info-btn" ng-click="getFocus(f)" title="{{::f.label}}">{{::f.label}}</button>
                </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div ng-if="::!data.sc_cat_item" >
    <div class="panel panel-default">
      <div class="panel-heading"><h4 class="panel-title">${Item not found}</h4></div>
      <div class="panel-body wrapper">
        <p>${This item is not found or currently not available}</p>
        <p>${Suggestions}:</p>
        <ul>
          <li>${Try searching for the item}</li>
          <li>${Go to the Service Catalog homepage}</li>
        </ul>
      </div>
    </div>
  </div>
  <div class="sr-only" aria-live="assertive">{{::c.status}}</div>
</div>
<div ng-if="::!data.recordFound" class="alert alert-info">{{::m.invalidRecordMsg}}</div>
<div ng-if="::data.not_for_mobile">
  <div class="wrapper-lg flex-center">
    ${We're sorry, this item isn't available on mobile}
  </div>
  <div class="flex-center">
    <img src="not_viewable.png" width="300"/>
  </div>
</div>
<now-message key="Added item to shopping cart" value="${Added item to shopping cart}"></now-message>
<now-message key="Updated Item to shopping cart" value="${Updated Item to shopping cart}"></now-message>
<now-message key="Attachment(s) are not added" value="${Attachment(s) are not added}"></now-message>
<now-message key="Please wait, attachment deletion in progress" value="${Please wait, attachment deletion in progress}"></now-message>
<now-message key="Leave page?" value="${Leave page?}"></now-message>
<now-message key="Changes you made will be lost." value="${Changes you made will be lost.}"></now-message>
<now-message key="Cancel" value="${Cancel}"></now-message>
<now-message key="Leave" value="${Leave}"></now-message>]]></template>
    </sp_widget>
    <sys_es_latest_script action="DELETE">
        <id>897fdbe3c3341210a7705fd1b4013171</id>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-28 20:41:36</sys_created_on>
        <sys_id>a29fd3e3c3341210a7705fd1b4013158</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-28 20:41:36</sys_updated_on>
        <table>sp_widget</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="Visitor Management">3ab4f6ebc3301210a7705fd1b4013154</application>
        <file_path/>
        <instance_id>32376ab41b0e7198699443f4bd4bcbfb</instance_id>
        <instance_name>dev191029</instance_name>
        <name>sp_widget_897fdbe3c3341210a7705fd1b4013171</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sp_widget"&gt;&lt;sp_widget action="INSERT_OR_UPDATE"&gt;&lt;category&gt;sc&lt;/category&gt;&lt;client_script&gt;&lt;![CDATA[function visitorCatalogController($scope, $http, spScUtil, spUtil, nowAttachmentHandler, $rootScope, $sanitize, $window, $sce, i18n, $timeout, $log, spAriaUtil, $document, spModal, $q, spAtf, $location, spAriaFocusManager, spSCNavStateManager, cabrillo, snAnalytics) {
    var c = this;
    c.isNative = cabrillo.isNative() &amp;&amp; c.data.isMEE == 'true';
    c.isAgentApp = navigator.userAgent.indexOf('Agent') &gt; -1;
    var webAnalyticsMsgSuffix = c.isNative ? " - NOW Mobile" : "";
    if (c.data.sc_cat_item &amp;&amp; $scope.data.hasOwnProperty("_generatedItemGUID")) {
        c.data.sc_cat_item._attachmentGUID = $scope.data._generatedItemGUID;
    }

    $scope.m = $scope.data.msgs;

    if ($scope.data.redirectToItem) {
        $location.search("id=sc_cat_item&amp;sys_id=" + $scope.data.sc_cat_item.sys_id);
        return;
    }

    if (c.isNative &amp;&amp; c.data.hasDraftItem &amp;&amp; !c.data.is_draft_item &amp;&amp; !c.data.sc_cat_item.no_save_as_draft)
        cabrillo.message.showMessage(cabrillo.message.INFO_MESSAGE_STYLE, $scope.m.draftAlreadyExistCabrilloMsg);

    c.isAccessibilityEnabled = $window.g_accessibility;

    c.draftExistsWithLinkMsg = (!!c.data.sc_cat_item &amp;&amp; !!c.data.sc_cat_item.name) ? $sce.trustAsHtml(generateMessageWithLink($scope.m.draftExistsMsg, {
        "message": $scope.m.hereMsg,
        "id": "view_draft",
        "link": "?id=my_requests&amp;draftSearchText=" + encodeURIComponent(c.data.sc_cat_item.name)
    }, $scope.m.newDraftInfoMsg, false)) : "";

    $scope.isSCCartFixed = (c.options.display_cart_on_right === 'true' &amp;&amp; c.isAccessibilityEnabled == 'false');
    $rootScope.isSCCartFixed = $scope.isSCCartFixed;

    $scope.setDefaultValue = !$scope.data.is_cart_item &amp;&amp; !$scope.data.is_wishlist_item &amp;&amp; !$scope.data.is_draft_item;

    $scope.disableControls = function() {
        return $scope.submitting || $scope.submitted || c.data.isPreview || !!$scope.validating;
    };

    if (c.data.isPreview) {
        spUtil.recordWatch($scope, "sc_item_produced_record", "record_key=" + c.data.sys_id, function(response, data) {
            $window.location.reload();
        });
    }
    $scope.getFocus = function(field) {
        var focusVar = (field.type == "reference") ? "sp_formfield_reference_" : "sp_formfield_";
        focusVar += (field.name.startsWith("IO:") ? field._children[0] : field.name);
        var elem = document.getElementById(focusVar);
        if (field.type == "url" &amp;&amp; elem.style.display == "none")
            elem = document.getElementById(focusVar + "_unlock");
        else if (field.type == "sc_multi_row")
            elem = document.getElementById(field.sys_id + "_add_row");
        else if (field.type == "sc_attachment") {
            var buttonElem = angular.element(elem).find('button')[0];
            if (buttonElem)
                elem = buttonElem;
        } else if (field.type != "html") {
            var inputElem = angular.element(elem).find('input')[0];
            if (inputElem)
                elem = inputElem;
        }
        if (elem)
            elem.focus();
    };

    c.quantity = c.data.quantity ? c.data.quantity + "" : "1";
    c.mandatory = [];
    $scope.stickyHeaderTop = '0px';
    c.widget._debugContextMenu = [
        [i18n.getMessage("Open") + " sc_cat_item", function() {
            var item = c.data.sc_cat_item;
            $window.open("/sp_config?id=form&amp;table=" + item.table + "&amp;sys_id=" + item.sys_id);
        }]
    ];

    spUtil.recordWatch($scope, "sys_attachment", "table_sys_id=" + $scope.data._generatedItemGUID, function(response, data) {
        $scope.attachmentHandler.getAttachmentList();
        if (response.data) {
            var options = {};
            options.operation = response.data.operation;
            options.filename = response.data.display_value;
            options.state = (response.data.record &amp;&amp; response.data.record.state) ? response.data.record.state.value : "";
            if (options.operation === 'update' &amp;&amp; options.state === 'not_available')
                $rootScope.$broadcast("$$uiNotification", {
                    type: 'error',
                    message: i18n.getMessage('Upload file scan failed').withValues([options.filename])
                });
        }
    });


    $rootScope.$on('spModel.gForm.rendered', function() {
        $timeout(function() {
            spAtf.init().then(function(atf) {
                $scope._atf = atf;
                atf.expose('catalog_util', catalogUtil);
            });
        }, 10);
    });

    //	ATF helper object
    var catalogUtil = {
        updateGform: function() {
            $scope._atf.expose('g_form', spAtf.augmentForm(g_form));
        },

        addRow: function(fieldId, timeoutInMS) {
            if (timeoutInMS &lt;= 0)
                timeoutInMS = 1000;
            var deferred = $q.defer();
            $scope.$broadcast("$sp.sc_multi_row.create_row", fieldId, $scope.data.sc_cat_item.sys_id);
            $scope.$on('spModel.gForm.initialized', function(e, gFormInstance) {
                if (gFormInstance.getSysId() == fieldId)
                    deferred.resolve();
            });
            $timeout(function() {
                deferred.reject();
            }, timeoutInMS);
            return deferred.promise;
        },

        submit: function(timeout) {
            var deferred = $q.defer();
            $scope.triggerOnSubmit(timeout);
            var cleanup = $scope.$on('$sp.service_catalog.form_submit_failed', function() {
                cleanup();
                deferred.reject("Can't submit form");
            });
            if (g_form) {
                g_form.$private.events.on('submitted', function() {
                    var cleanUp = $scope.$on('$sp.sc_cat_item.submitted', function(o, result) {
                        $timeout(function() {
                            cleanUp();
                            deferred.resolve(result);
                        }, 10);
                    });
                });
            } else
                deferred.reject('g_form not initialized');

            return deferred.promise;
        },

        addToCart: function(timeout) {
            var defer = $q.defer();
            $scope.triggerAddToCart(timeout);
            var cleanup = $scope.$on('$sp.service_catalog.form_submit_failed', function() {
                cleanup();
                defer.reject("Can't submit form");
            });
            if (g_form) {
                g_form.$private.events.on('submitted', function() {
                    var cleanup = $scope.$on('$sp.sc_cat_item.add_to_cart', function(o, result) {
                        $timeout(function() {
                            cleanup();
                            defer.resolve(result);
                        }, 10);
                    });
                });
            } else
                defer.reject('g_form not initialized');
            return defer.promise;
        },

        submitCatItem: function(timeout) {
            var defer = $q.defer();
            $scope.triggerOnSubmit(timeout);
            var cleanup = $scope.$on('$sp.service_catalog.form_submit_failed', function() {
                cleanup();
                defer.reject("Can't submit form");
            });
            if (g_form) {
                g_form.$private.events.on('submitted', function() {
                    if ($scope.data.sys_properties.twostep &amp;&amp; $scope.data.sc_cat_item.request_method != "submit") {
                        defer.resolve();
                    } else { //When not two step, if reached this step means the form validation is done and it is the item submission that should be monitored
                        if (cleanup &amp;&amp; typeof cleanup === 'function')
                            cleanup();

                        var cleanUp = $scope.$on('$sp.sc_cat_item.submitted', function(o, result) {
                            $timeout(function() {
                                cleanUp();
                                result.single_step = true;
                                defer.resolve(result);
                            }, 10);
                        });

                        var failedSubmitCleanUp = $scope.$on('$sp.sc_cat_item.submit_failed', function() {
                            failedSubmitCleanUp();
                            defer.reject("Can't submit form");
                        });
                    }
                });
            } else
                defer.reject('g_form not initialized');

            return defer.promise;
        },

        setQuantity: function(quantity) {
            if ($scope.c.data.sc_cat_item.sys_class_name !== "sc_cat_item_producer" &amp;&amp; $scope.c.data.sc_cat_item.sys_class_name !== "std_change_record_producer") {
                $scope.c.quantity = quantity;
                $scope.$apply();
            }
        },

        getQuantity: function() {
            return $scope.c.quantity;
        },

        getPrice: function() {
            var obj = {};
            obj.price = $scope.data.sc_cat_item.price_display;
            obj.recurring_price = $scope.data.sc_cat_item.recurring_price_display;
            obj.recurring_frequency = $scope.data.sc_cat_item.recurring_frequency;
            return obj;
        }
    };

    c.showAddCartBtn = function() {
        return !$scope.submitted &amp;&amp;
            c.options.show_add_cart_button &amp;&amp;
            c.data.sc_cat_item.sys_class_name !== "sc_cat_item_producer" &amp;&amp;
            c.data.sc_cat_item.sys_class_name !== "std_change_record_producer" &amp;&amp;
            !c.data.sc_cat_item.no_cart &amp;&amp; !c.data.is_cart_item;
    };

    c.showPrice = function() {
        return c.data.showPrices &amp;&amp;
            ((c.data.sc_cat_item.price ? true : false) ||
                (c.data.sc_cat_item.recurring_price ? true : false));
    };

    c.showDeliveryTime = function() {
        return !c.data.hideDeliveryTime &amp;&amp;
            !c.data.sc_cat_item.no_delivery_time &amp;&amp;
            (c.data.sc_cat_item.estimated_delivery_time ? true : false);
    };
    var i18nQuantity = i18n.getMessage("Quantity {0}");
    c.showQuantitySelector = function() {
        if (c.data.isMEE == 'true' &amp;&amp; $('#catItemQuantity') != null) {
            var quantityElement = $('#catItemQuantity');
            $timeout(function() {
                var prevDiv = quantityElement.prev();
                var anchor = prevDiv.find('.select2-choice');
                anchor.attr('role', 'button').attr('tabindex', '0').attr('aria-label', i18nQuantity.withValues(['']));
                prevDiv.find('.select2-search-choice-close').attr('aria-hidden', 'true');
            }, 100);
        }

        return c.data.sc_cat_item.sys_class_name !== "sc_cat_item_producer" &amp;&amp;
            c.data.sc_cat_item.sys_class_name !== "std_change_record_producer" &amp;&amp;
            !c.data.sc_cat_item.no_quantity &amp;&amp; !c.data.sc_cat_item.read_only_quantity &amp;&amp;
            (c.data.sc_cat_item.cart_guide === undefined || c.data.sc_cat_item.cart_guide === null) &amp;&amp;
            (!c.data.sc_cat_item.no_order_now || !c.data.sc_cat_item.no_cart);
    };
    c.showOrderNowButton = function() {
        return !$scope.data.is_cart_item &amp;&amp; (c.data.sc_cat_item.use_sc_layout || !c.data.sc_cat_item.no_order_now);
    };
    c.showAddToWishlist = function() {
        return !$scope.submitted &amp;&amp;
            (c.data.showWishlist &amp;&amp;
                !c.data.sc_cat_item.no_wishlist &amp;&amp; !c.data.is_draft_item &amp;&amp;
                !c.data.is_cart_item &amp;&amp;
                c.options.show_add_to_wishlist_button === 'true');
    };

    c.showDraftButtons = function() {
        return !!spScUtil.saveCatalogItem &amp;&amp; !c.data.sc_cat_item.no_save_as_draft &amp;&amp; !(c.options.hide_save_as_draft_button == "true") &amp;&amp; !c.data.draft_buttons_hidden_via_property;
    };


    c.allowOrder = function() {
        if (c.data.sc_cat_item.use_sc_layout)
            return true;
        if (c.data.sc_cat_item.no_order)
            return false;
        if (c.data.sc_cat_item.no_order_now &amp;&amp; c.data.sc_cat_item.no_cart)
            return false;
        return true;
    };

    c.showCart = function() {
        return c.data.can_create_cart_item &amp;&amp; (c.data.is_cart_item ||
            c.showPrice() || c.showDeliveryTime() || c.showAddCartBtn() ||
            c.showOrderNowButton() || c.showAddToWishlist());
    };

    c.hideCartMsg = function() {
        $scope.data.showMsg = false;
    };

    c.showAttachments = function() {
        return !$scope.submitted &amp;&amp;
            c.data.sc_cat_item &amp;&amp; !c.data.sc_cat_item.no_attachments &amp;&amp;
            c.data.sc_cat_item.sys_class_name !== "std_change_record_producer";
    };

    c.updateQuantity = function(item) {
        spAriaUtil.sendLiveMessage(c.data.msgs.updatedMsg + " " + item.name + " " + c.data.msgs.quantityToMsg + " " + c.quantity);
    };

    $scope.$on('dialog.upload_too_large.show', function(e) {
        $log.error($scope.m.largeAttachmentMsg);
        spUtil.addErrorMessage($scope.m.largeAttachmentMsg);
    });

    var ah = $scope.attachmentHandler = new nowAttachmentHandler(setAttachments, appendError);

    function appendError(error) {
        spUtil.addErrorMessage(error.msg + error.fileName);
    }
    ah.setParams($scope.data._attachmentTable, $scope.data._generatedItemGUID, 1024 * 1024 * $scope.data.maxAttachmentSize);

    function setAttachments(attachments, action) {
        if (!angular.equals($scope.attachments, attachments))
            $scope.attachments = attachments;
        if (action === "added") {
            spAriaUtil.sendLiveMessage($scope.m.attachmentAddedMsg);
            if ($scope.attachments.length &gt; 0)
                $scope.data.sc_cat_item.attachment_submitted = true;
        }
        if (action === "renamed")
            spAriaUtil.sendLiveMessage($scope.m.renameSuccessMsg);
        if (action === "deleted") {
            spAriaUtil.sendLiveMessage($scope.m.deleteSuccessMsg);
            if ($scope.attachments.length == 0)
                $scope.data.sc_cat_item.attachment_submitted = false;
        }
        $scope.data.sc_cat_item.attachment_action_in_progress = false;
        spUtil.get($scope, {
            action: "from_attachment"
        });
    }
    if (c.showAttachments() &amp;&amp;
        (c.data.is_cart_item || c.data.is_wishlist_item || c.data.is_draft_item))
        $scope.attachmentHandler.getAttachmentList();
    $scope.confirmDeleteAttachment = function(attachment) {
        if (c.isNative) {
            if (confirm($scope.data.msgs.delete_attachment)) {
                $scope.data.sc_cat_item.attachment_action_in_progress = true;
                $scope.attachmentHandler.deleteAttachment(attachment);
                $scope.setFocusToAttachmentButton();
            }
        } else {
            spModal.confirm($scope.data.msgs.delete_attachment).then(function() {
                $scope.data.sc_cat_item.attachment_action_in_progress = true;
                $scope.attachmentHandler.deleteAttachment(attachment);
                $scope.setFocusToAttachmentButton();
            });
        }
    };
    $scope.dismissWishListMessage = function() {
        $scope.is_update_wishlist = false;
    };

    if ($scope.data.sc_cat_item) {

        /*if ($scope.data.sc_cat_item.content_type == 'external') {
        	$window.location.href = $scope.data.sc_cat_item.url;
        	return;
        }

        if ($scope.data.sc_cat_item.content_type == 'kb') {
        	$location.search("id=kb_article&amp;sys_id=" + $scope.data.sc_cat_item.kb_article);
        	return;
        }*/

        $scope.data.sc_cat_item.trusted_description = $sce.trustAsHtml($scope.data.sc_cat_item.description);
        if (!$scope.data.sc_cat_item._fields || angular.equals($scope.data.sc_cat_item._fields, {}))
            $scope.data.no_fields = true;
        if ($scope.data.sc_cat_item.sys_class_name !== "sc_cat_item_producer" &amp;&amp;
            $scope.data.sc_cat_item.sys_class_name !== "std_change_record_producer") {
            if ($scope.data.sc_cat_item.request_method == "request")
                $scope.submitButtonMsg = $scope.m.requestMsg;
            else if ($scope.data.sc_cat_item.request_method == "submit")
                $scope.submitButtonMsg = $scope.m.submitMsg;
            else
                $scope.submitButtonMsg = $scope.m.orderNowMsg;
        } else {
            if ($scope.data.sc_cat_item.sys_class_name == "sc_cat_item_producer" &amp;&amp; $scope.data.record_producer_label)
                $scope.submitButtonMsg = $scope.data.record_producer_label;
            else
                $scope.submitButtonMsg = $scope.m.submitMsg;
        }

        // Breadcrumbs
        if (!$scope.data.categories)
            $scope.data.categories = [];
        $scope.data.categories.forEach(function(category, index, categories) {
            categories[index].url = category.url + '&amp;catalog_id=' + $scope.data.catalog_id;
        });
        if ($scope.data.is_wishlist_item) {
            $scope.data.categories.unshift({
                label: $scope.m.wishlistMsg,
                url: '?id=sc_wishlist'
            });
            $scope.data.categories.push({
                label: $scope.data.sc_cat_item.name,
                url: '#'
            });
        } else if ($scope.data.is_cart_item) {
            $scope.data.categories.unshift({
                label: $scope.m.cartMsg,
                url: '?id=sc_cart'
            });
            $scope.data.categories.push({
                label: $scope.data.sc_cat_item.name,
                url: '#'
            });
        } else if ($scope.data.is_draft_item) {
            $scope.data.categories.unshift({
                label: $scope.m.draftItemMsg,
                url: '?id=my_requests&amp;selectDraftTab=true'
            });
            $scope.data.categories.unshift({
                label: $scope.m.myRequestsMsg,
                url: '?id=my_requests'
            });
            $scope.data.categories.push({
                label: $scope.data.draftItemName,
                url: '#'
            });
        } else if ($scope.data.categories.length &gt; 0) {
            $scope.data.categories.unshift({
                label: $scope.data.sc_catalog || $scope.page.title,
                url: '?id=' + $scope.data.sc_category_page + "&amp;catalog_id=" + $scope.data.catalog_id
            });
            $scope.data.categories.push({
                label: $scope.data.sc_cat_item.name,
                url: '#'
            });
            if ($scope.data.all_catalog_msg) {
                $scope.data.categories.unshift({
                    label: $scope.data.all_catalog_msg,
                    url: '?id=' + $scope.data.sc_category_page + "&amp;catalog_id=-1"
                });
            }
        } else {
            $scope.data.categories.push({
                label: $scope.data.sc_cat_item.name,
                url: '#'
            });
        }

        $timeout(function() {
            $scope.$emit('sp.update.breadcrumbs', $scope.data.categories);
        });
        spUtil.setSearchPage('sc');

        // Set Title in Mobile
        if (c.isNative)
            cabrillo.viewLayout.setTitle($scope.data.sc_cat_item.name);

        // Set Title in Workspace
        else if ($scope.options.isServiceWorkspace)
            $window.postMessage({
                msg: 'CATALOG_ITEM_SET_TITLE',
                title: $scope.data.sc_cat_item.name
            }, $location.origin);

    } else {
        var notFoundBC = [{
            label: $scope.page.title,
            url: '?id=' + $scope.data.sc_catalog_page
        }];
        $timeout(function() {
            $scope.$emit('sp.update.breadcrumbs', notFoundBC);
        });
        spUtil.setSearchPage('sc');
    }
    c.getItemId = function() {
        return $scope.data.sc_cat_item ? $scope.data.sc_cat_item.sys_id : -1;
    };

    function showNativeMobileButtons() {
        if ($scope.data.sc_cat_item.sys_class_name == 'sc_cat_item_content')
            return;
        if (c.isNative) {
            cabrillo.viewLayout.setTitle($scope.data.sc_cat_item.name);
            if ($scope.data.is_cart_item)
                addCartItemButtons();
            else if ($scope.data.sc_cat_item.sys_class_name == "sc_cat_item_producer" || $scope.data.sc_cat_item.sys_class_name == "std_change_record_producer")
                addRPButton();
            else
                addOrderButtons();
        }
    }

    function nativeGoBackToCart() {
        cabrillo.viewLayout.setNavigationBarButtons();
        var button = [{
            imageName: 'back',
            buttonStyle: cabrillo.viewLayout.REPLACE_BACK_BUTTON_STYLE,
            enabled: true
        }];

        cabrillo.viewLayout.setNavigationBarButtons(button, function() {
            $location.search('id=sc_cart');
        });
    }

    function displayNativeButtons() {
        if (c.isNative &amp;&amp; (!$scope.orderConfirmation &amp;&amp; !$scope.saveConfirmation)) {
            cabrillo.viewLayout.setTitle($scope.data.sc_cat_item.name);
            showNativeMobileButtons();
            cabrillo.viewLayout.showBackButton();

            if ($scope.data.is_cart_item) {
                cabrillo.viewLayout.hideBackButton();
                cabrillo.viewLayout.setNavigationBarButtons();
                nativeGoBackToCart();
            }
        }
    }

    var mespClosePopupUnregister = $rootScope.$on("mesp.popup.close", function() {
        //Do not display cabrillo buttons when there is an active mrvs row as it will have it's own buttons.
        var activeRowElement = document.getElementById("mrvs_active_row");
        if (!activeRowElement)
            return;

        // Timeout is to give a better user experience otherwise when this popup opens,
        // the cabrillo buttons will be displayed immediately giving a bad user experience.
        $timeout(function() {
            displayNativeButtons();
        });
    });

    var mespOpenPopupUnregister = $rootScope.$on("mesp.popup.open", function() {
        // Timeout is to give a better user experience otherwise when this popup opens,
        // the cabrillo buttons will be displayed immediately giving a bad user experience.
        $timeout(function() {
            removeCabrilloButtons();
        });
    });

    if ($scope.options.isServiceWorkspace &amp;&amp; $window.frameElement) {
        var workspaceParams = {};
        workspaceParams.sysparm_parent_table = $window.frameElement.getAttribute('parent-table') || $window.frameElement.dataParentTable;
        workspaceParams.sysparm_parent_sys_id = $window.frameElement.getAttribute('parent-sys-id') || $window.frameElement.dataParentSysId;
        //Extract the query if there is one passed in
        var urlParams = new URLSearchParams($window.frameElement.src);
        var params = Object.fromEntries(urlParams);
        if (params.query)
            workspaceParams.target_query = params.query;
        $scope.data.parentParams = workspaceParams;
    } else if (!$scope.options.isServiceWorkspace &amp;&amp; $scope.options.parentTable &amp;&amp; $scope.options.parentSysId) {
        var portalParentParams = {};
        portalParentParams.sysparm_parent_table = $scope.options.parentTable;
        portalParentParams.sysparm_parent_sys_id = $scope.options.parentSysId;
        $scope.data.parentParams = portalParentParams;
    }

    var g_form;
    $scope.$on('spModel.gForm.initialized', function(e, gFormInstance) {
        if (gFormInstance.getSysId() != -1 &amp;&amp; gFormInstance.getSysId() != c.getItemId())
            return;
        g_form = gFormInstance;
        spSCNavStateManager.register(g_form);
        spSCNavStateManager.isNative(c.isNative);
        spSCNavStateManager.isPreview(c.data.isPreview);

        if (c.isNative) {
            cabrillo.viewLayout.setTitle($scope.data.sc_cat_item.name);
            $rootScope.$on('spModel.gForm.showNativeMobileButtons', displayNativeButtons);
        }

        if ($scope.setDefaultValue &amp;&amp; c.options.requested_for_id &amp;&amp; c.options.requested_for_display &amp;&amp; $scope.data.sc_cat_item.requested_for_variable_name) {
            $scope.setDefaultValue = false;
            $scope.data.sc_cat_item.hideAlsoRequestFor = true;
            setValueInNextDigestCycle(g_form, c.options.requested_for_id, c.options.requested_for_display);
        } else if ($scope.setDefaultValue &amp;&amp; $scope.data.parentParams &amp;&amp; $scope.data.parentParams.sysparm_parent_table &amp;&amp; $scope.data.parentParams.sysparm_parent_sys_id) {
            $scope.setDefaultValue = false;
            $scope.data.sc_cat_item.hideAlsoRequestFor = true;
            $scope.server.get({
                action: 'get_requested_for',
                parentParams: $scope.data.parentParams
            }).then(function(response) {
                if (response.data.requested_for) {
                    $scope.data.requested_for = response.data.requested_for;
                    setValueInNextDigestCycle(g_form, response.data.requested_for.id, response.data.requested_for.displayValue);
                }
            });
        }

        $timeout(function() {
            $rootScope.$emit('spModel.gForm.rendered', g_form);
            showNativeMobileButtons();
        }, 175);

        // This runs after all onSubmit scripts have executed
        g_form.$private.events.on('submitted', function() {
            cleanFailedSubmit();
            $scope.submitting = true;
            if ($scope.data.sc_cat_item.item_action === "order")
                getOne();
            else if ($scope.data.sc_cat_item.item_action === "add_to_cart")
                addToCart();
            else if ($scope.data.sc_cat_item.item_action == "update_cart")
                updateCart();

            spUtil.simulateFakeFormSubmitForAutoComplete('catalog-form', $scope.data.sc_cat_item._fields);
        });
    });

    function setValueInNextDigestCycle(g_form, value, displayValue) {
        $timeout(function() {
            g_form.setValue($scope.data.sc_cat_item.requested_for_variable_name, value, displayValue);
        });
    }

    function getVarData(fields) {
        var reqData = {};
        for (var obj in fields)
            reqData[fields[obj].name] = fields[obj].value;
        return reqData;
    }

    function getValidatedVarData(fields) {
        //Filtering out invalid masked variables, to avoid adding them to wishlist
        var validFields = Object.values(fields).filter(function(field) {
            return !(field.type == 'masked' &amp;&amp; field.useConfirmation &amp;&amp; field.value != field.confirmPassword);
        });
        return getVarData(validFields);
    }

    function addLink(url, msg, elem_id) {
        return "&lt;a id=" + elem_id + " class='link alert-link' href=" + url + "&gt;" + msg + "&lt;/a&gt;";
    }

    function getAlsoRequestForValue(fields) {
        if ($scope.data.sc_cat_item.requested_for_variable_name) {
            var requested_for_variable = fields[$scope.data.sc_cat_item.requested_for_variable_name];
            if (!!requested_for_variable &amp;&amp; requested_for_variable.hasOwnProperty('also_request_for_value'))
                return fields[$scope.data.sc_cat_item.requested_for_variable_name].also_request_for_value;

            return "";
        }
    }

    function confirmAlsoRequestedFor(successFn) {
        $scope.submitting = true;
        var alsoRequestFor = getAlsoRequestForValue($scope.data.sc_cat_item._fields);
        if (alsoRequestFor) {
            spModal.confirm($scope.m.alsoReqForClearConfirmMsg).then(successFn, function() {
                $scope.submitting = false;
            });
        } else
            successFn();
    }


    $scope.triggerAddToWishlist = function() {
        confirmAlsoRequestedFor(addToWishlist);
    };

    $scope.triggerSaveItem = function() {
        confirmAlsoRequestedFor(function() {
            if ($scope.data.hasDraftItem &amp;&amp; !$scope.data.is_draft_item)
                showSaveAsDraftModal($scope.data.draftItemName);
            else
                saveCatalogItem($scope.data.draftItemName);
        });
    };

    function showSaveAsDraftModal(name) {
        var payload = {
            action: "save_item",
            draftName: name,
            message: $scope.m.save_draft_description,
            infoMessage: $scope.data.is_cart_item ? $scope.m.cartItemDeletionMsg : ($scope.data.is_wishlist_item ? $scope.m.wishlistItemDeletionMsg : null),
        };

        $scope.server.get(payload).then(function(response) {
            var saveItemModalCtrl;
            var unregisterSave = $scope.$on('$sp.service_catalog.save.cancel', function() {
                $scope.submitting = false;
                $timeout(function() {
                    if (saveItemModalCtrl)
                        saveItemModalCtrl.close();
                });
                $scope.saveConfirmation = false;
                displayNativeButtons();
            });
            var closeModalOnSave = $scope.$on('$sp.service_catalog.save.submitted', function(event, payload) {
                $timeout(function() {
                    if (saveItemModalCtrl)
                        saveItemModalCtrl.close();

                    $scope.saveConfirmation = false;
                    saveCatalogItem(payload.draft_name);
                });

            });
            var saveItemModal = angular.copy(response.data.saveItemModal);
            saveItemModal.options.afterOpen = function(ctrl) {
                saveItemModalCtrl = ctrl;
                if (c.data.isMEE == 'true') {
                    spAriaUtil.sendLiveMessage($scope.m.saveItemDialogMsg);
                }
            };
            saveItemModal.options.afterClose = function() {
                unregisterSave();
                closeModalOnSave();
                c.saveItemModal = null;
                saveItemModalCtrl = null;
                $scope.saveConfirmation = false;
                displayNativeButtons();
            };
            c.saveItemModal = saveItemModal;
        });
        $scope.saveConfirmation = true;
    }

    function saveCatalogItem(name) {
        spAriaUtil.sendLiveMessage($scope.m.submittingMsg);
        showPageLoader();
        $scope.savingItem = true;
        displayNativeButtons();
        var additional_params = {};
        if (!$scope.data.wishlist_item_id) {
            additional_params.wishlist_item_id = $scope.data.wishlist_item_id;
            if ($scope.data.sc_cat_item.sys_class_name == 'sc_cat_item_producer' || $scope.data.sc_cat_item.sys_class_name == 'std_change_record_producer')
                additional_params.wishlistAttachmentTable = $scope.data._attachmentTable;
        }
        if ($scope.data.is_cart_item || $scope.data.is_wishlist_item)
            additional_params.current_cart_item_id = $scope.data._generatedItemGUID;


        spScUtil.saveCatalogItem($scope.data.sc_cat_item.sys_id, name, c.quantity, getValidatedVarData($scope.data.sc_cat_item._fields), $scope.data.is_cart_item || $scope.data.is_wishlist_item ? "" : $scope.data._generatedItemGUID, additional_params).then(function(response) {
            var cartItemId = "";
            if (response &amp;&amp; response.data &amp;&amp; response.data.result &amp;&amp; response.data.result.saved_cart_item_id) {
                cartItemId = response.data.result.saved_cart_item_id;
                if (!$scope.data.is_draft_item) {
                    var payload = {};
                    payload.data = {};
                    payload.name = 'Catalog item added to draft';
                    payload.data['Class name'] = $scope.data.sc_cat_item.sys_class_name;
                    payload.data['Item id'] = $scope.data.sc_cat_item.sys_id;
                    payload.data['Engagement channel'] = ['sp', 'mesp', 'esc'].indexOf($scope.data.portal_suffix) !== -1 ? $scope.data.portal_suffix : 'custom';
                    snAnalytics.addEvent(payload);
                }
            }

            g_form.$private.userState.clearModifiedFields();

            if ($scope.data.is_cart_item || $scope.data.is_wishlist_item) {
                spAriaUtil.sendLiveMessage($scope.data.sc_cat_item.name + " " + $scope.data.is_cart_item ? $scope.m.itemRemovedFromCartMsg : $scope.m.itemRemovedFromWishlistMsg);
                $rootScope.$broadcast($scope.data.is_cart_item ? "$sp.service_catalog.cart.update" : "$sp.service_catalog.wishlist.update");
                if ($scope.data.is_cart_item || $scope.data.current_cart_item == $scope.data.wishlist_item_id) {
                    $location.search('id=sc_cat_item&amp;edit=draft&amp;sys_id=' + cartItemId);
                    return;
                } else {
                    $scope.data.wishlist_item_id = "";
                    $scope.data.is_wishlist_item = false;
                }
            }

            c.status = $scope.data.is_draft_item ? $scope.m.draftUpdateMsg : $scope.m.draftSaveMsg;

            if (!c.isNative) {
                $scope.m.actionMsg = generateMessageWithLink($scope.data.is_draft_item ? $scope.m.draftUpdateMsg : $scope.m.draftSaveMsg, {
                    "link": '?id=my_requests&amp;draftSearchText=' + encodeURIComponent($scope.data.sc_cat_item.name),
                    "message": $scope.m.viewDraftItemMsg,
                    "id": "view_draft_item"
                }, '', true);
                $scope.m.actionMsg = $sce.trustAsHtml($scope.m.actionMsg);
                $scope.data.showMsg = true;
            } else
                cabrillo.message.showMessage(cabrillo.message.SUCCESS_MESSAGE_STYLE, c.status);

            if (!cartItemId) {
                $scope.data._generatedItemGUID = cartItemId;
                $scope.data.sc_cat_item._attachmentGUID = cartItemId;
                $scope.data.draftItemName = name;
                $scope.data.is_draft_item = true;
                $scope.data.sc_cat_item.isCartItem = true;
                //This is to refresh the item level attachments in the UI. As we might be changing the _generatedItemGUID above, we are updating parameters required by the attachment handler.
                $scope.attachmentHandler.setParams($scope.data._attachmentTable, $scope.data._generatedItemGUID, 1024 * 1024 * $scope.data.maxAttachmentSize);
                $scope.attachmentHandler.getAttachmentList();
            }

            hidePageLoader();
            $scope.savingItem = false;
            $scope.submitting = false;
            displayNativeButtons();
            spUtil.scrollTo('#sc_cat_item', 300);
        }, function(response) {
            $scope.savingItem = false;
            displayNativeButtons();
            handleFailure(response);
        });
    }

    function addToWishlist() {
        spAriaUtil.sendLiveMessage($scope.m.submittingMsg);
        var wishlistMsg = $scope.data.is_wishlist_item ? $scope.m.wishlistUpdateMsg : $scope.m.wishlistAddMsg;
        $scope.m.actionMsg = generateMessageWithLink(wishlistMsg, {
            "link": "?id=sc_wishlist",
            "id": "view_wishlist",
            "message": $scope.m.viewWishListMsg
        }, '', true);
        $scope.m.actionMsg = $sce.trustAsHtml($scope.m.actionMsg);
        $scope.is_update_wishlist = false;

        spScUtil.addToWishlist($scope.data.sc_cat_item.sys_id, c.quantity, getValidatedVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID).then(function(response) {
            var cartItemId = "";
            if (response &amp;&amp; response.data &amp;&amp; response.data.result &amp;&amp; response.data.result.items) {
                for (var i = 0; i &lt; response.data.result.items.length; i++) {
                    var item = response.data.result.items[i];
                    if (item.catalog_item_id === $scope.data.sc_cat_item.sys_id) {
                        cartItemId = item.cart_item_id;
                        break;
                    }
                }
            }

            $rootScope.$broadcast("$sp.service_catalog.wishlist.add_item");
            $rootScope.$broadcast("$sp.service_catalog.wishlist.update", cartItemId);

            g_form.$private.userState.clearModifiedFields();
            $scope.is_update_wishlist = true;
            $scope.data.is_wishlist_item = true;
            $scope.data.sc_cat_item.isCartItem = true;
            if (!!cartItemId &amp;&amp; $scope.data._generatedItemGUID != cartItemId) {
                $scope.data._generatedItemID = cartItemId;
                $scope.data.sc_cat_item._attachmentGUID = cartItemId;
            }
            $scope.data.showMsg = true;
            $scope.data.wishlist_item_id = cartItemId;
            $scope.submitting = false;
            spUtil.scrollTo('#sc_cat_item', 300);
            $scope.focusElement("view_wishlist", wishlistMsg);
        }, function(response) {
            handleFailure(response);
        });
    }
    $scope.clearAttachmentFields = function() {
        var fields = $scope.data.sc_cat_item._fields;
        for (var x in fields) {
            if (fields[x].type == 'sc_attachment')
                g_form.clearValue(fields[x].name);
        }
    };

    $scope.triggerAddToCart = function(timeout) {
        $scope.data.sc_cat_item.item_action = "add_to_cart";
        $scope.data.sc_cat_item.quantity = c.quantity;
        $scope.$evalAsync(function() {
            if (g_form &amp;&amp; !$scope.submitting) {
                $scope.submitting = true;
                spAriaUtil.sendLiveMessage($scope.m.submittingMsg);
                if (!spScUtil.isRegexDone($scope.data.sc_cat_item._fields)) {
                    $scope.submitting = false;
                    $scope.validating = true;
                    $scope.triggerPostValidation = $scope.triggerAddToCart;
                } else if (!g_form.submit()) {
                    timeout = timeout || 1000;
                    $timeout(function() {
                        $scope.$broadcast('$sp.service_catalog.form_submit_failed', {
                            action_name: 'submit'
                        });
                    }, timeout);
                    if (!$scope.data.is_wishlist_item || !$scope.data.is_draft_item)
                        window.GlideWebAnalytics.trackEvent('Service Catalog', 'Catalog Cart' + webAnalyticsMsgSuffix, 'Catalog Item Added to Cart', 0, 0);
                }
            }
        });
    };

    $scope.triggerUpdateCart = function(timeout) {
        $scope.data.sc_cat_item.item_action = "update_cart";
        $scope.data.sc_cat_item.quantity = c.quantity;
        $scope.$evalAsync(function() {
            if (g_form &amp;&amp; !$scope.submitting) {
                $scope.submitting = true;
                spAriaUtil.sendLiveMessage($scope.m.submittingMsg);
                if (!spScUtil.isRegexDone($scope.data.sc_cat_item._fields)) {
                    $scope.submitting = false;
                    $scope.validating = true;
                    $scope.triggerPostValidation = $scope.triggerUpdateCart;
                } else if (!g_form.submit()) {
                    timeout = timeout || 1000;
                    $timeout(function() {
                        $scope.$broadcast('$sp.service_catalog.form_submit_failed', {
                            action_name: 'submit'
                        });
                    }, timeout);
                    window.GlideWebAnalytics.trackEvent('Service Catalog', 'Catalog Cart' + webAnalyticsMsgSuffix, 'Catalog Cart Updated', 0, 0);
                }
            }
        });
        return false;
    };

    $scope.triggerOnSubmit = function(timeout) {
        if (c.data.isPreview) return;

        $scope.data.sc_cat_item.item_action = "order";
        $scope.data.sc_cat_item.quantity = c.quantity;
        $scope.$evalAsync(function() {
            if (g_form &amp;&amp; !$scope.submitting) {
                $scope.submitting = true;
                spAriaUtil.sendLiveMessage($scope.m.submittingMsg);
                if (!spScUtil.isRegexDone($scope.data.sc_cat_item._fields)) {
                    $scope.submitting = false;
                    $scope.validating = true;
                    $scope.triggerPostValidation = $scope.triggerOnSubmit;
                } else if (!g_form.submit()) {
                    timeout = timeout || 1000;
                    $timeout(function() {
                        $scope.$broadcast('$sp.service_catalog.form_submit_failed', {
                            action_name: 'submit'
                        });
                    }, timeout);
                }
            }
        });
        return false;
    };

    function setFieldsReadonly() {
        var allFields = g_form.getFieldNames();
        for (var fieldName in allFields) {
            g_form.setReadonly(allFields[fieldName], true);
        }
    }
    // order / create request
    function getOne() {
        var requested_for_id = "";
        var requested_for_display = "";
        if ($scope.data.requested_for &amp;&amp; $scope.data.requested_for.id &amp;&amp; $scope.data.requested_for.displayValue) {
            requested_for_id = $scope.data.requested_for.id;
            requested_for_display = $scope.data.requested_for.displayValue;
        }
        //Required to pass as payload for usage as embeddedWidget
        var embeddedWidgetOptions = {
            "auto_redirect": "true",
            "requested_for_id": requested_for_id,
            "requested_for_display": requested_for_display
        };
        if ($scope.data.sc_cat_item.sys_class_name != "sc_cat_item_producer" &amp;&amp; $scope.data.sc_cat_item.sys_class_name != "std_change_record_producer") {
            if ($scope.data.sys_properties.twostep &amp;&amp; $scope.data.sc_cat_item.request_method != "submit") {
                var payload = {
                    cart: 'cart_' + $scope.data.sc_cat_item.sys_id,
                    itemDetails: {
                        sys_id: $scope.data.sc_cat_item.sys_id,
                        name: $scope.data.sc_cat_item.name,
                        sys_class_name: $scope.data.sc_cat_item.sys_class_name,
                        quantity: $scope.data.sc_cat_item.quantity,
                        fields: getVarData($scope.data.sc_cat_item._fields),
                        newRecordID: $scope.data._generatedItemGUID,
                        request_method: $scope.data.sc_cat_item.request_method,
                    },
                    action: $scope.data.is_wishlist_item ? "order_wishlist_item" : ($scope.data.is_draft_item ? "order_draft_item" : "order_item"),
                    parentParams: $scope.data.parentParams
                };
                for (var embeddedOption in embeddedWidgetOptions) {
                    payload[embeddedOption] = c.options[embeddedOption] || embeddedWidgetOptions[embeddedOption];
                }
                $scope.server.get(payload).then(function(response) {
                    var orderItemModalCtrl;
                    var unregister = $scope.$on('$sp.service_catalog.cart.cancel_order', function() {
                        $scope.submitting = false;
                        $scope.orderConfirmation = false;
                        registerSubmitListeners();
                        $timeout(function() {
                            if (orderItemModalCtrl)
                                orderItemModalCtrl.close();

                            displayNativeButtons();
                        });
                    });
                    var closeModalOnSubmit = $scope.$on('$sp.service_catalog.cart.submitted', function() {
                        orderItemModalCtrl.close();
                        setFieldsReadonly();
                        $scope.submitted = true;
                    });
                    var orderItemModal = angular.copy(response.data.orderItemModal);
                    orderItemModal.options.afterOpen = function(ctrl) {
                        orderItemModalCtrl = ctrl;
                        if (c.data.isMEE == 'true') {
                            spAriaUtil.sendLiveMessage($scope.m.checkoutDialogMsg);
                        }
                    };
                    orderItemModal.options.afterClose = function() {
                        unregister();
                        closeModalOnSubmit();
                        c.orderItemModal = null;
                        orderItemModalCtrl = null;
                        $('#submit-btn').focus();
                    };
                    c.orderItemModal = orderItemModal;
                });
                $scope.orderConfirmation = true;
            } else {
                var additionalParms = {};
                if ($scope.data.parentParams) {
                    additionalParms.sysparm_parent_sys_id = $scope.data.parentParams.sysparm_parent_sys_id;
                    additionalParms.sysparm_parent_table = $scope.data.parentParams.sysparm_parent_table;
                    additionalParms.is_service_workspace = c.options.isServiceWorkspace;
                }
                additionalParms.engagement_channel = $scope.data.engagement_channel;
                additionalParms.referrer = $scope.data.referrer;
                $scope.submitting = true;
                showPageLoader();
                addOrderButtons();

                if ($scope.data.is_wishlist_item || $scope.data.is_draft_item) {
                    var orderMethod = $scope.data.is_wishlist_item ? spScUtil.orderWishlistedItem : spScUtil.orderDraftItem;

                    orderMethod($scope.data.sc_cat_item.sys_id, $scope.data.sc_cat_item.quantity, getVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID, additionalParms).then(function(response) {
                        $scope.server.get({
                            action: 'log_order_one_step',
                            itemDetails: {
                                sys_id: $scope.data.sc_cat_item.sys_id,
                                name: $scope.data.sc_cat_item.name,
                                sys_class_name: $scope.data.sc_cat_item.sys_class_name
                            }
                        });
                        var a = response.data.result;
                        $scope.$emit("$$uiNotification", a.$$uiNotification);
                        $scope.$emit("$sp.sc_cat_item.submitted", a);
                        if ($scope.data.is_wishlist_item)
                            $rootScope.$broadcast("$sp.service_catalog.wishlist.update");

                        if (c.options.auto_redirect == 'false') {
                            setFieldsReadonly();
                            $scope.submitting = false;
                            $scope.submitted = true;
                            $rootScope.$broadcast("$sp.service_catalog.cart.submitted", true);
                            spUtil.addInfoMessage($scope.m.requestSubmitted);
                            return;
                        } else {
                            if (a.universal_request &amp;&amp; !c.options.native_mobile &amp;&amp; !c.options.isServiceWorkspace)
                                $location.search('id=standard_ticket&amp;is_new_order=true&amp;table=universal_request&amp;sys_id=' + a.universal_request);
                            else {
                                var url = 'id=sc_request&amp;is_new_order=true&amp;table=sc_request&amp;sys_id=' + a.sys_id;
                                if ($scope.data.referrer)
                                    url = url + "&amp;referrer=" + $scope.data.referrer;
                                $location.search(url);
                            }
                        }
                    });
                } else {
                    spScUtil.orderNow($scope.data.sc_cat_item.sys_id, $scope.data.sc_cat_item.quantity, getVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID, additionalParms, getAlsoRequestForValue($scope.data.sc_cat_item._fields)).then(function(response) {
                        $scope.server.get({
                            action: 'log_order_one_step',
                            itemDetails: {
                                sys_id: $scope.data.sc_cat_item.sys_id,
                                name: $scope.data.sc_cat_item.name,
                                sys_class_name: $scope.data.sc_cat_item.sys_class_name
                            }
                        });
                        var a = response.data.result;
                        $scope.$emit("$$uiNotification", a.$$uiNotification);
                        $scope.$emit("$sp.sc_cat_item.submitted", a);
                        if (c.options.auto_redirect == 'false') {
                            hidePageLoader();
                            setFieldsReadonly();
                            $scope.submitting = false;
                            $scope.submitted = true;
                            $rootScope.$broadcast("$sp.service_catalog.cart.submitted", true);
                            spUtil.addInfoMessage($scope.m.requestSubmitted);
                            return;
                        } else if (!$scope._atf) {
                            removeCabrilloButtons();
                            //redirect to standard ticket page if universal request is created
                            if (a.universal_request &amp;&amp; !c.options.native_mobile &amp;&amp; !c.options.isServiceWorkspace)
                                $location.search('id=standard_ticket&amp;is_new_order=true&amp;table=universal_request&amp;sys_id=' + a.universal_request);
                            else {
                                var url = 'id=sc_request&amp;is_new_order=true&amp;table=sc_request&amp;sys_id=' + a.sys_id;
                                if ($scope.data.referrer)
                                    url = url + "&amp;referrer=" + $scope.data.referrer;
                                if (c.options.isServiceWorkspace &amp;&amp; c.options.hide_actions)
                                    url = url + "&amp;hide_actions=" + c.options.hide_actions;
                                $location.search(url);
                            }
                        }
                    }, function(response) {
                        $scope.$emit('$sp.sc_cat_item.submit_failed');
                        handleFailure(response);
                    });
                }
            }
        } else {
            postCatalogFormRequest().then(function(response) {
                var a = response.data.result;

                if ($scope.data.sys_properties.stopNavigationOnError || $scope.options.isServiceWorkspace) {
                    if (a.sys_id == -1) { //Record Producer didnot generate any record
                        //check for BR Error
                        if (a.$$uiNotification.length &gt; 0) {
                            var errorNotify = a.$$uiNotification.find(function(elem) {
                                if (elem.type == 'error')
                                    return true;
                            });
                            if (errorNotify) {
                                $scope.$emit("$$uiNotification", a.$$uiNotification);
                                $scope.submitted = false;
                                $scope.submitting = false;
                                if ($scope.data.record_producer_label)
                                    $scope.submitButtonMsg = $scope.data.record_producer_label;
                                else
                                    $scope.submitButtonMsg = $scope.m.submitMsg;

                                return;

                            }

                        }
                    }
                }
                $scope.server.get({
                    action: 'log_request_producer',
                    itemDetails: {
                        sys_id: $scope.data.sc_cat_item.sys_id,
                        name: $scope.data.sc_cat_item.name,
                        sys_class_name: $scope.data.sc_cat_item.sys_class_name
                    }
                });

                if (!$scope.options.isServiceWorkspace)
                    $scope.$emit("$$uiNotification", a.$$uiNotification);
                $scope.$emit("$sp.sc_cat_item.submitted", a);
                if ($scope.data.is_wishlist_item)
                    $rootScope.$broadcast("$sp.service_catalog.wishlist.update");

                hidePageLoader();
                if (c.options.auto_redirect == 'false') {
                    setFieldsReadonly();
                    $scope.submitted = true;
                    $scope.submitting = false;
                    $scope.submitButtonMsg = $scope.m.submittedMsg;
                } else if (!$scope._atf)
                    handleRedirect(a.number, a.table, a.sys_id, a.redirect_to, a.redirect_portal_url);

            });
        }
    }

    function addToCart() {
        $scope.server.get({
            action: 'log_request_cart',
            itemDetails: {
                sys_id: $scope.data.sc_cat_item.sys_id,
                name: $scope.data.sc_cat_item.name,
                sys_class_name: $scope.data.sc_cat_item.sys_class_name
            }
        });

        postCatalogFormRequest().then(function(response) {
            $rootScope.$broadcast("$sp.service_catalog.cart.add_item");
            $rootScope.$broadcast("$sp.service_catalog.cart.update");
            $scope.$emit("$sp.sc_cat_item.add_to_cart", $scope.data._generatedItemGUID);
            g_form.$private.userState.clearModifiedFields();
            if ($scope.data.is_wishlist_item) {
                $rootScope.$broadcast("$sp.service_catalog.wishlist.update");
                $scope.data.is_wishlist_item = false;
                $scope.data.sc_cat_item.isCartItem = false;
                if ($location.$$search.edit === "wishlist") {
                    $location.search("id=sc_wishlist");
                    return;
                }
            }
            if ($scope.data.is_draft_item) {
                $scope.data.is_draft_item = false;
                $scope.data.sc_cat_item.isCartItem = false;
                if ($location.$$search.edit === "draft") {
                    $location.search('id=sc_cart');
                    return;
                }
            }
            c.status = i18n.getMessage("Added item to shopping cart");
            var cartResponse = response;
            $scope.server.get({
                action: 'init_item'
            }).then(function(response) {
                $scope.data._generatedItemGUID = response.data._generatedItemGUID;
                $scope.data.sc_cat_item._attachmentGUID = response.data._generatedItemGUID;
                ah.setParams($scope.data._attachmentTable, $scope.data._generatedItemGUID, 1024 * 1024 * $scope.data.maxAttachmentSize);
                $scope.attachmentHandler.getAttachmentList();
                $scope.attachments = [];
                $scope.clearAttachmentFields();
                $scope.data.sc_cat_item.attachment_action_in_progress = false;
                $scope.data.sc_cat_item.attachment_submitted = false;

                if (!c.isNative) {
                    $scope.m.actionMsg = $scope.m.cartAddMsg + $scope.m.cartMakeChangesMsg + addLink('?id=sc_cart', $scope.m.viewCartMsg, "view_cart");
                    $scope.m.actionMsg += '&lt;i class="fa fa-close pull-right pointer close-notification" aria-label="${Close Notification}" tabindex="0" ng-click="c.hideCartMsg()"/&gt;';
                    $scope.m.actionMsg = $sce.trustAsHtml($scope.m.actionMsg);
                    $scope.data.showMsg = true;
                } else {
                    cabrillo.message.showMessage(cabrillo.message.SUCCESS_MESSAGE_STYLE, c.status);
                    if (cartResponse &amp;&amp; cartResponse.data &amp;&amp; cartResponse.data.result) {
                        var items = cartResponse.data.result.items || [];
                        $scope.showCabrilloCart = true;
                        $scope.cartItemCount = items.length;
                        showCartButton();
                    }
                }
                $scope.submitting = false;
                hidePageLoader();
                cleanFailedSubmit = $scope.$on('$sp.service_catalog.form_submit_failed', function() {
                    $scope.submitting = false;
                });
                spUtil.scrollTo('#sc_cat_item', 300);
                $scope.focusElement("view_cart", $scope.m.cartAddMsg);
                if (c.isNative)
                    displayNativeButtons();
            });
        });
    }

    function updateCart() {
        postCatalogFormRequest().then(function(response) {
            g_form.$private.userState.clearModifiedFields();
            c.status = i18n.getMessage("Updated Item to shopping cart");
            if (c.isNative)
                cabrillo.message.showMessage(cabrillo.message.SUCCESS_MESSAGE_STYLE, c.status);
            removeCabrilloButtons();
            $location.search('id=sc_cart');
        });
    }

    function postCatalogFormRequest() {
        $scope.submitting = true;
        showPageLoader();
        if ($scope.data.sc_cat_item.item_action !== "add_to_cart")
            addOrderButtons();

        var additionalParms = {};
        if ($scope.data.parentParams) {
            mergeMap($scope.data.parentParams, additionalParms);
        }
        additionalParms.engagement_channel = $scope.data.engagement_channel;
        additionalParms.referrer = $scope.data.referrer;

        var isDraftOrWishlistItem = $scope.data.is_wishlist_item || $scope.data.is_draft_item;

        if ($scope.data.is_wishlist_item) {
            $scope.is_update_wishlist = false;
            if ($scope.data.sc_cat_item.sys_class_name === "sc_cat_item_producer")
                return spScUtil.submitWishlistedProducer($scope.data.sc_cat_item.sys_id, getVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID, additionalParms);
            else if ($scope.data.sc_cat_item.sys_class_name === "std_change_record_producer") {
                additionalParms.is_wishlist_item = true;
                return spScUtil.submitStdChgProducer($scope.data.sc_cat_item.sys_id, $scope.data.stdChg.twoStep, $scope.data.stdChg.currentVersion, $scope.data._generatedItemGUID, $scope.portal.url_suffix, additionalParms, $scope.data.stdChg.chgModel, $scope.data.stdChg.defaultType);
            } else if ($scope.data.sc_cat_item.item_action === "add_to_cart") {
                if ($scope.data.sc_cat_item.sys_class_name == 'sc_cat_item_guide')
                    window.GlideWebAnalytics.trackEvent("Service Catalog", "Catalog Cart" + webAnalyticsMsgSuffix, "Order Guide Added to Cart", 0, 0);
                else if ($scope.data.sc_cat_item.sys_class_name == 'sc_cat_item_producer')
                    window.GlideWebAnalytics.trackEvent("Service Catalog", "Catalog Cart" + webAnalyticsMsgSuffix, "Record Producer Added to Cart", 0, 0);
                else if ($scope.data.sc_cat_item.sys_class_name == "sc_cat_item" || $scope.data.sc_cat_item.sys_class_name == "pc_hardware_cat_item" || $scope.data.sc_cat_item.sys_class_name == "pc_software_cat_item")
                    window.GlideWebAnalytics.trackEvent("Service Catalog", "Catalog Cart", "Catalog Item Added to Cart" + webAnalyticsMsgSuffix, 0, 0);
                return spScUtil.addWishlistedItemToCart($scope.data.sc_cat_item.sys_id, $scope.data.sc_cat_item.quantity, getVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID, additionalParms).then(null, function(response) {
                    return handleFailure(response);
                });
            }
        } else if ($scope.data.is_draft_item) {
            additionalParms.wishlist_item_id = $scope.data.wishlist_item_id;
            if ($scope.data.sc_cat_item.sys_class_name === "sc_cat_item_producer")
                return spScUtil.submitDraftProducer($scope.data.sc_cat_item.sys_id, getVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID, additionalParms);
            else if ($scope.data.sc_cat_item.sys_class_name === "std_change_record_producer") {
                additionalParms.is_draft_item = true;
                return spScUtil.submitStdChgProducer($scope.data.sc_cat_item.sys_id, $scope.data.stdChg.twoStep, $scope.data.stdChg.currentVersion, $scope.data._generatedItemGUID, $scope.portal.url_suffix, additionalParms, $scope.data.stdChg.chgModel, $scope.data.stdChg.defaultType);
            } else if ($scope.data.sc_cat_item.item_action === "add_to_cart") {
                if ($scope.data.sc_cat_item.sys_class_name == 'sc_cat_item_guide')
                    window.GlideWebAnalytics.trackEvent("Service Catalog", "Catalog Cart" + webAnalyticsMsgSuffix, "Order Guide Added to Cart", 0, 0);
                else if ($scope.data.sc_cat_item.sys_class_name == 'sc_cat_item_producer')
                    window.GlideWebAnalytics.trackEvent("Service Catalog", "Catalog Cart" + webAnalyticsMsgSuffix, "Record Producer Added to Cart", 0, 0);
                else if ($scope.data.sc_cat_item.sys_class_name == "sc_cat_item" || $scope.data.sc_cat_item.sys_class_name == "pc_hardware_cat_item" || $scope.data.sc_cat_item.sys_class_name == "pc_software_cat_item")
                    window.GlideWebAnalytics.trackEvent("Service Catalog", "Catalog Cart", "Catalog Item Added to Cart" + webAnalyticsMsgSuffix, 0, 0);
                return spScUtil.addDraftItemToCart($scope.data.sc_cat_item.sys_id, $scope.data.sc_cat_item.quantity, getVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID).then(null, function(response) {
                    return handleFailure(response);
                });
            } else if ($scope.data.sc_cat_item.item_action === "update_cart") {
                return spScUtil.updateCart($scope.data._generatedItemGUID, $scope.data.sc_cat_item.quantity, getVarData($scope.data.sc_cat_item._fields), $scope.data.sc_cat_item.sys_id).then(null, function(response) {
                    return handleFailure(response);
                });
            }
        }
        if ($scope.data.is_cart_item &amp;&amp; !isDraftOrWishlistItem) {
            return spScUtil.updateCart($scope.data._generatedItemGUID, $scope.data.sc_cat_item.quantity, getVarData($scope.data.sc_cat_item._fields), $scope.data.sc_cat_item.sys_id).then(null, function(response) {
                return handleFailure(response);
            });
        } else if ($scope.data.sc_cat_item.sys_class_name === "sc_cat_item_producer") {
            return spScUtil.submitProducer($scope.data.sc_cat_item.sys_id, getVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID, additionalParms).then(null, function(response) {
                return handleFailure(response);
            });
        } else if ($scope.data.sc_cat_item.sys_class_name === "std_change_record_producer") {
            return spScUtil.submitStdChgProducer($scope.data.sc_cat_item.sys_id, $scope.data.stdChg.twoStep, $scope.data.stdChg.currentVersion, $scope.data._generatedItemGUID, $scope.portal.url_suffix, additionalParms, $scope.data.stdChg.chgModel, $scope.data.stdChg.defaultType);
        } else if ($scope.data.sc_cat_item.item_action === "add_to_cart") {
            return spScUtil.addToCart($scope.data.sc_cat_item.sys_id, $scope.data.sc_cat_item.quantity, getVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID, getAlsoRequestForValue($scope.data.sc_cat_item._fields)).then(null, function(response) {
                return handleFailure(response);
            });
        }
    }
    // spModel populates mandatory - hasMandatory is called by the submit button
    $scope.hasMandatory = function() {
        return c.mandatory &amp;&amp; c.mandatory.length &gt; 0;
    };
    //	Listeners
    var cleanFailedSubmit;
    var validationComplete;

    function registerSubmitListeners() {
        cleanFailedSubmit = $scope.$on('$sp.service_catalog.form_submit_failed', function() {
            $scope.submitting = false;
        });
        validationComplete = $rootScope.$on('$sp.service_catalog.form_validation_complete', function() {
            if ($scope.validating) {
                $scope.validating = false;
                if (typeof $scope.triggerPostValidation === 'function')
                    $scope.triggerPostValidation();
            }
            $scope.triggerPostValidation = null;
        });
    }
    registerSubmitListeners();
    $scope.$on("$sp.sc_cat_item.submitted", function() {
        $rootScope.$broadcast("$sp.sc_cat_item.rp_submitted");

        if ($scope.data.sc_cat_item.item_action == "order") {
            if ($scope.data.sc_cat_item.sys_class_name == "sc_cat_item" || $scope.data.sc_cat_item.sys_class_name == "pc_hardware_cat_item" || $scope.data.sc_cat_item.sys_class_name == "pc_software_cat_item")
                window.GlideWebAnalytics.trackEvent("Service Catalog", "Catalog Item Request" + webAnalyticsMsgSuffix, "Catalog Request Submitted", 1, 0);
            else if (scope.data.sc_cat_item.sys_class_name == "sc_cat_item_producer")
                window.GlideWebAnalytics.trackEvent("Service Catalog", "Record Producer Request" + webAnalyticsMsgSuffix, "Catalog Request Submitted", 0, 0);
        }
        g_form.$private.userState.clearModifiedFields();
        if (c.options.auto_redirect == 'false')
            spAriaUtil.sendLiveMessage($scope.m.formSubmittedMsg);
        var payload = {};
        payload.name = "Submit Record Producer Request";
        var className = $scope.data.sc_cat_item.sys_class_name;
        if (className == "sc_cat_item" || className == "pc_hardware_cat_item" || className == "pc_software_cat_item")
            payload.name = "Order Catalog Item Request";

        payload.data = {};
        payload.data["Record Item"] = $scope.data.sc_cat_item.name;
        payload.data["Record ID"] = $scope.data.sc_cat_item.sys_id;
        snAnalytics.addEvent(payload);
    });

    // switch catalog items
    var unregister = $scope.$on('$sp.list.click', onListClick);
    $scope.$on("$destroy", function() {
        $rootScope.$broadcast("$sp.service_catalog.item.close");
        if (g_form)
            spSCNavStateManager.unregisterForms([g_form.getSysId()]);

        unregister();
        mespClosePopupUnregister();
        mespOpenPopupUnregister();
        validationComplete();
    });
    $rootScope.$on('spModel.gForm.rendered', function() {
        spAriaUtil.sendLiveMessage($scope.m.catItemOpenedMsg);
    });

    function onListClick(evt, arg) {
        $scope.data.sys_id = arg.sys_id;
        spUtil.update($scope);
    }

    function formatRedirectUrl(page, table, sys_id, hide_actions) {
        var url;
        var paramObj = {
            page: page,
            table: table,
            sys_id: sys_id
        };
        url = spUtil.format(c.options.url, paramObj);
        if ($scope.data.referrer)
            url = url + '&amp;referrer=' + $scope.data.referrer;
        if (hide_actions)
            url = url + "&amp;hide_actions=" + hide_actions;
        return url;
    }

    function handleRedirect(n, table, sys_id, redirectTo, redirectUrl) {
        var page = 'form';
        if (table == 'sc_request')
            page = 'sc_request';
        else if (n)
            page = 'ticket';

        if (sys_id == -1)
            sys_id = undefined;

        if (redirectTo == 'catalog_home')
            page = 'sc_home';

        //For Standard change, always direct to form if not in Workspace
        if ($scope.data.sc_cat_item.sys_class_name === "std_change_record_producer") {
            if ($scope.options.isServiceWorkspace == 'true') {
                var params = {};
                params.msg = 'TARGET_RECORD_SELECTED';
                params.target_table = table;
                params.target_sys_id = '-1';
                if (sys_id)
                    params.target_sys_id = sys_id;

                if ($scope.data.stdChg.twoStep) {
                    var genURL = new URL($window.location.origin + "/" + redirectUrl).searchParams;
                    params.target_query = genURL.get("query");
                }

                window.postMessage(params, $window.location.origin);
                return;
            } else
                page = 'form';
        }
        removeCabrilloButtons();
        if (c.options.page) {
            page = c.options.page;
        }
        if (c.options.table) {
            table = c.options.table;
        }
        var hide_actions = c.options.isServiceWorkspace &amp;&amp; c.options.hide_actions;
        var url;
        if (page === 'sc_home') {
            url = "id=" + page;
        } else {
            url = formatRedirectUrl(page, table, sys_id, hide_actions);
        }
        if ($scope.data.sc_cat_item.sys_class_name === "sc_cat_item_producer" || $scope.data.sc_cat_item.sys_class_name === "std_change_record_producer") {
            if (redirectUrl) {
                if (isPortalURL(redirectUrl)) {
                    var queryParamURL = getQueryParams(redirectUrl);
                    var currentParamURL = getQueryParams($location.$$url);
                    if (queryParamURL == currentParamURL)
                        $location.search(queryParamURL + '&amp;' + Date.now());
                    else
                        $location.search(queryParamURL);
                } else
                    $window.location.href = redirectUrl;
            } else {
                var newURL = $location.search(url);
                spAriaFocusManager.navigateToLink(newURL.url());
            }
            return;
        }
        hide_actions = c.options.isServiceWorkspace &amp;&amp; c.options.hide_actions;
        $location.search(formatRedirectUrl('sc_request', 'sc_request', sys_id, hide_actions));
        return;
    }

    function isPortalURL(url) {
        var currentPortalName = $location.path().replace('/', '');
        var paramIndex = getQueryParameterIndex(url);
        var redirectPortalName = url.substr(0, paramIndex).replace('/', '');
        return currentPortalName === redirectPortalName || paramIndex == 0;
    }

    function getQueryParams(url) {
        var paramIndex = getQueryParameterIndex(url);
        return url.substr(paramIndex + 1, url.length);
    }

    function getQueryParameterIndex(url) {
        var paramIndex = url.search(/\?/);
        return paramIndex &gt;= 0 ? paramIndex : url.length;
    }

    $timeout(function() {
        if ($document[0].getElementsByClassName('sc-sticky-item-header').length &gt; 0) {
            var titleHeight = $document[0].getElementsByClassName('sc-sticky-item-header')[0].clientHeight;
            $scope.stickyHeaderTop = '-' + (titleHeight - 20 - $document[0].getElementsByClassName('sc-cat-item-short-description')[0].clientHeight) + 'px;';
        }
    });


    function setBottomButtons(buttonInfoArray) {
        if (!c.isNative) return;

        var buttons = buttonInfoArray.map(function(buttonInfo) {
            return {
                title: buttonInfo.title,
                enabled: buttonInfo.enabled,
                backgroundColor: buttonInfo.backgroundColor,
                textColor: buttonInfo.textColor
            };
        });

        cabrillo.viewLayout.setBottomButtons(buttons, function(buttonIndex) {
            if (buttonInfoArray[buttonIndex] &amp;&amp; typeof buttonInfoArray[buttonIndex].action === 'function') {
                $timeout(function() {
                    buttonInfoArray[buttonIndex].action();
                }, 500);
            }
        });
    }

    function getSaveButtonTitle() {
        return !$scope.data.is_draft_item ? (!$scope.savingItem ? $scope.m.saveAsDraft : $scope.m.savingMsg) : (!$scope.savingItem ? $scope.m.updateDraft : $scope.m.updatingMsg);
    }

    function addOrderButtons() {
        if (!c.isNative) return;
        showCartButton();

        var orderButtons = [];

        if (c.showDraftButtons()) {
            orderButtons.push({
                title: getSaveButtonTitle(),
                enabled: !$scope.submitting &amp;&amp; !$scope.savingItem,
                backgroundColor: '#f7f7f7',
                textColor: '#000000',
                action: function() {
                    $scope.triggerSaveItem();
                }
            });
        }

        if ($scope.c.data.sys_properties.cartEnabled &amp;&amp; $scope.c.showAddCartBtn()) {
            orderButtons.push({
                title: $scope.m.addToCart,
                enabled: !$scope.submitting &amp;&amp; !$scope.savingItem,
                backgroundColor: '#f7f7f7',
                textColor: '#000000',
                action: function() {
                    $scope.triggerAddToCart();
                }
            });
        }

        orderButtons.push({
            title: $scope.submitting &amp;&amp; !$scope.savingItem ? $scope.m.submittingMsg : $scope.submitButtonMsg,
            enabled: !$scope.submitting &amp;&amp; !$scope.savingItem,
            backgroundColor: $scope.data.sys_properties.isPolaris == "true" ? null : $scope.data.sys_properties.mobileNativeColor,
            textColor: $scope.data.sys_properties.isPolaris == "true" ? null : '#FFFFFF',
            action: function() {
                $scope.triggerOnSubmit();
            }
        });


        setBottomButtons(orderButtons);
    }



    function addRPButton() {
        if (!c.isNative) return;

        var rpButtons = [];

        if (c.showDraftButtons()) {
            rpButtons.push({
                title: getSaveButtonTitle(),
                enabled: !$scope.submitting &amp;&amp; !$scope.savingItem,
                backgroundColor: '#f7f7f7',
                textColor: '#000000',
                action: function() {
                    $scope.triggerSaveItem();
                }
            });
        }

        rpButtons.push({
            title: $scope.submitting &amp;&amp; !$scope.savingItem ? $scope.m.submittingMsg : $scope.submitButtonMsg,
            enabled: !$scope.submitting &amp;&amp; !$scope.savingItem,
            backgroundColor: $scope.data.sys_properties.isPolaris == "true" ? null : $scope.data.sys_properties.mobileNativeColor,
            textColor: $scope.data.sys_properties.isPolaris == "true" ? null : '#FFFFFF',
            action: function() {
                $scope.triggerOnSubmit();
            }
        });

        setBottomButtons(rpButtons);
    }

    function showCartButton() {
        if (!c.isNative || !$scope.showCabrilloCart) return;

        var button = [{
            imageName: 'cart',
            badgeCount: $scope.cartItemCount,
            backgroundColor: '#2ff5f9',
            textColor: '#FFFFFF',
            enabled: true
        }];

        cabrillo.viewLayout.setNavigationBarButtons(button, function(index) {
            $location.search('id=sc_cart');
        });

    }

    function addCartItemButtons() {
        if (!c.isNative) return;
        var cartItemButtons = [

            {
                title: getSaveButtonTitle(),
                enabled: !$scope.submitting &amp;&amp; !$scope.savingItem,
                backgroundColor: '#f7f7f7',
                textColor: '#000000',
                action: function() {
                    $scope.triggerSaveItem();
                }
            },

            {
                title: $scope.m.updateCart,
                enabled: !$scope.submitting &amp;&amp; !$scope.savingItem,
                backgroundColor: $scope.data.sys_properties.isPolaris == "true" ? null : $scope.data.sys_properties.mobileNativeColor,
                textColor: $scope.data.sys_properties.isPolaris == "true" ? null : '#FFFFFF',
                action: function() {
                    $scope.triggerUpdateCart();
                }
            }

        ];

        setBottomButtons(cartItemButtons);
        nativeGoBackToCart();
    }

    function removeCabrilloButtons() {
        if (!c.isNative) return;
        cabrillo.viewLayout.setBottomButtons();
    }

    function showPageLoader() {
        if (!c.isNative) return;
        cabrillo.viewLayout.showSpinner();
    }

    function hidePageLoader() {
        if (!c.isNative) return;
        cabrillo.viewLayout.hideSpinner();
    }

    function handleFailure(response) {
        registerSubmitListeners();

        $scope.submitting = false;
        hidePageLoader();
        if ($scope.data.sc_cat_item.item_action !== "add_to_cart")
            addOrderButtons();
        if (response.data.result &amp;&amp; response.data.result.errMsg)
            spUtil.addErrorMessage(response.data.result.errMsg);

        return $q.reject(response);
    }

    function mergeMap(fromMap, toMap) {
        for (var key in fromMap) {
            toMap[key] = fromMap[key];
        }
    }


    function generateMessageWithLink(preLinkMsg, linkMsgObj, postLinkMsg, showCloseBtn) {
        var linkTemplate = ('{0} ' + '&lt;a id=' + linkMsgObj.id + ' class="link alert-link" href=' + linkMsgObj.link + '&gt; {1}&lt;/a&gt; ') + (!postLinkMsg ? '{2}' : '');
        if (showCloseBtn)
            linkTemplate += '&lt;i class="fa fa-close pull-right pointer" aria-label="${Close Notification}" tabindex="0" ng-click="c.hideCartMsg()"/&gt;';

        return i18n.format(linkTemplate, preLinkMsg, linkMsgObj.message, postLinkMsg);
    }

    $scope.sendLiveMessage = function(message, timeout) {
        if (!message)
            return;

        if (!timeout)
            timeout = 0;

        setTimeout(function() {
            spAriaUtil.sendLiveMessage(message);
        }, timeout);
    };

    $window.onpageshow = function() {
        if (c.isNative)
            $scope.$emit('spModel.gForm.showNativeMobileButtons');
    };

    var favoriteEvent = $rootScope.$on('favorite', function(e, favorite) {
        $scope.showFavorite = favorite.showFavorite;
        $scope.isFavorite = favorite.isFavorite;
    });
    $scope.$on("$destroy", favoriteEvent);

    $scope.toggleFavorite = function($event) {
        $event.preventDefault();
        $event.stopPropagation();
        $scope.$broadcast('toggleFavorite');
    };
}]]&gt;&lt;/client_script&gt;&lt;controller_as/&gt;&lt;css&gt;$border-radius-base: 4px !default;
			$sp-space--xs: 4px !default;
			$sp-space--xxs: 2px !default;
			.btn-group.attachment-mobile &amp;gt; button {
			padding: 1px 6px;
			}

			.panel-button {
			float: none;
			}

			.sp-attachment-add {
			padding: 5px;
			}

			.p-t-none {
			padding-top: 0 !important;
			}

			.file-list-wrap {
			margin-bottom: 10px;
			}

			.sc-btn {
			color: $text-color;
			}

			.dismiss-button {
			position: absolute;
			top: 1rem;
			right: 10px;
			color: $text-color;
			cursor: pointer;
			}

			.item-header {
			padding-top: 10px !important;
			padding-bottom: 10px !important;
			}

			.sc-item-description img {
			max-width: 100%;
			height: auto;
			}
			.sc-sticky-item-header {
			position: sticky;
			position: -webkit-sticky;
			position: -ms-sticky;
			top: -($font-size-h2 + $font-size-base);
			z-index: 10;
			background-color: $sp-homepage-bg;
			border-radius: $border-radius-base $border-radius-base 0 0;
			}
			.sc-fixed {
			position: fixed;
			max-height: 100%;
			width: 17.67777%;
			z-index: 1;
			}
			.no-margin {
			margin: 0px;
			}
			.sc-item-error-messages {
			max-height: 100%;
			position: absolute;
			overflow-y: auto;
			overflow-x: hidden;
			width: 100%;
			}
			.sc-field-error-label {
			margin-right: .5em;
			display: inline-block;
			cursor: pointer;
			background-color: $sc-field-error-color;
			text-overflow: ellipsis;
			overflow: hidden;
			white-space: nowrap;
			}
			.image-gallery {
			font-size: 8px;
			color: #CECECE;
			.active {
			color: #717171;
			}
			i {
			padding: 0 5px;
			}
			}
			.relative {
			position: relative;
			}
			.sc-order-widget-btn {
			position: absolute;
			left: 9%;
			}

			.sc-cat-item-legend {
			margin-top: 1rem;
			margin-bottom: 1.5rem;
			}

			.cart-icon-margin {
			margin-right: 3px;
			}

			.cart-icon-padding-top {
			padding-top: $sp-space--xxs;
			}

			.bottom-button-width {
			width: 20%
			}

			.cat-item-quantity-box-bottom-cart {
			padding-top: $sp-space--xs;
			width: 20%;
			}

			.cat-item-quantity-box {
			flex-grow: 1;
			padding-left: 1.2rem;
			}

			.cat-item-quantity-group {
			display: flex;
			justify-content: space-between;
			align-items: baseline;
			}

			.close-notification {
			position: absolute;
			top: 10px;
			right: 18px;
			}
			.help-tag-icon {
			color: $sc-field-error-color;
			}

			.sc-reqd-info-btn {
			margin-right: .5em;
			display: inline-block;
			white-space:normal !important;
			word-break: break-word !important;
			}

			.cat-mobile-favorite{
			margin-top:24px;
			margin-bottom:16px;
			margin-left: 0.525rem;
			width: fit-content;
			width: -moz-fit-content;
			.v523f6529532d0110fedfddeeff7b1298{
			float: left;
			}
			.favorite-button{
			width : 1.2rem;
			height: auto;
			background-color: transparent;
			outline: transparent;
			box-shadow: none;
			.fa{
			color: $tropical-rain;
			}
			}
			.favorite-text{
			margin-left: 8px;
			font-size: $font-size-base;
			font-weight: 600;
			color: $tropical-rain;
			}
			}

			@media only screen and (max-width : 992px) {
			.sc-fixed {
			position: relative;
			width: 100%;
			}
			.wishlist-update-message {
			display : block;
			}
			.sc-item-error-messages {
			position: relative;
			}
			.read-more, .read-less {
			font-size: $font-size-h2/3;
			cursor: pointer;
			font-weight: 850;
			border-width: 0.125rem;
			}
			.more-text {
			display: none;
			}
			.inline-cart {
			display: none;
			}
			.right-side-cart {
			display: inherit !important;
			}
			.sp-attachment-add {
			margin-left: 0;
			padding: 0;
			}
			}
			@media only screen and (max-width : 768px) {
			.sc-sticky-item-header {
			position: inherit;
			}

			.sc-cat-item-short-description {
			width: 80%;
			}
			}
			.inline-cart {
			.quantity-selector {
			display: inline-block;
			width: 65px;
			padding-top: $sp-space--xxs;
			}
			}
			.alert-success .link {
			text-decoration: underline;
			}

			.alert-info-border {
			border-color: $alert-info-border;
			}

			.attachment-text {
			color: $primary;
			}

			.native-mobile {
			.panel {
			border-left: 0;
			border-right: 0;
			}
			.read-more, .read-less {
			font-size: $font-size-h2/2;
			cursor: pointer;
			}
			.more-text {
			display: none;
			}
			}

			.flex-center {
			display: flex;
			justify-content: center;
			align-items: center;
			}

			.flex-end {
			display: flex;
			justify-content: flex-end;
			}

			#catItemTop .panel.panel-default &amp;gt; div:last-child {
			border-bottom: none;
			}

			.attachment-height {
			height: 80px;
			}&lt;/css&gt;&lt;data_table&gt;sp_instance&lt;/data_table&gt;&lt;demo_data&gt;{&amp;#13;
			"options": {&amp;#13;
			"sys_id": "04b7e94b4f7b4200086eeed18110c7fd"&amp;#13;
			}&amp;#13;
			}&lt;/demo_data&gt;&lt;description/&gt;&lt;docs/&gt;&lt;field_list&gt;color&lt;/field_list&gt;&lt;has_preview&gt;false&lt;/has_preview&gt;&lt;id&gt;visitor-catalog-item&lt;/id&gt;&lt;internal&gt;false&lt;/internal&gt;&lt;link&gt;&lt;![CDATA[function visitorCatalogLink(scope, elem) {
    scope.setFocusToAttachment = function() {
        setTimeout(function() {
            var inboxArray = elem.find("a.view-attachment")[0];
            if (inboxArray)
                inboxArray.focus();
        }, 100);
    };
    scope.setFocusToAttachmentButton = function() {
        elem.find('.sp-attachment-add')[0].focus();
    };

    scope.focusElement = function(elemId, liveMessage) {
        setTimeout(function() {
            var elem = $('#' + elemId);
            if (elem)
                elem.focus().after(function() {
                    scope.sendLiveMessage(liveMessage, 500);
                });
        }, 100);
    };
}]]&gt;&lt;/link&gt;&lt;name&gt;Visitor Catalog Item&lt;/name&gt;&lt;option_schema&gt;[{"name":"show_add_cart_button","section":"other","label":"Show Add Cart Button","type":"boolean"},{"hint":"If you turn on this, you will be able to see field validation messages on right side","name":"show_field_validation_messages","default_value":"true","section":"other","label":"Show field validation messages","type":"boolean"},{"hint":"Show Add/Update Wish List buttons","name":"show_add_to_wishlist_button","default_value":"false","section":"other","label":"Show Add/Update Wish List buttons","type":"boolean"},{"hint":"Order item section on top. If you uncheck this, order section will be displayed at bottom of screen","name":"display_cart_on_right","default_value":"true","section":"other","label":"Order Item Section On Top","type":"boolean"},{"hint":"Show item description in few words with an option to read more","name":"show_less_description","default_value":"true","section":"other","label":"Enable Show More/Less for Item description on Mobile","type":"boolean"},{"hint":"Hide Save as Draft button","name":"hide_save_as_draft_button","default_value":"false","section":"other","label":"Hide Save as Draft button","type":"boolean"},{"hint":"Hide the Delivery Time in the widget","name":"hide_delivery_time","section":"other","default_value":"false","label":"Hide Delivery Time","type":"boolean"},{"hint":"Makes it a preview page","name":"is_preview","section":"other","default_value":"false","label":"Is preview","type":"boolean"}]&lt;/option_schema&gt;&lt;public&gt;true&lt;/public&gt;&lt;roles/&gt;&lt;script&gt;&lt;![CDATA[// populate the 'data' variable with catalog item, variables, and variable view
(function() {
    var localInput = input; //to safeguard pullution of "input" via BR or other scripts

    var engagementChannelOptions = { //extracting here to safeguard pollution of 'options' via other scripts
        native_mobile: options.native_mobile,
        isServiceWorkspace: options.isServiceWorkspace
    };
    data.engagement_channel = new global.GlobalServiceCatalogUtil().getEngagementChannel(engagementChannelOptions);
    data.referrer = $sp.getParameter("referrer");
    data.portal_suffix = $sp.getPortalRecord().getValue("url_suffix");

    var embeddedWidgetOptions = ['auto_redirect', 'requested_for_id', 'requested_for_display'];
    if (localInput &amp;&amp; localInput.action == "from_attachment")
        return;

    if (localInput &amp;&amp; localInput.action == "get_requested_for") {
        data.requested_for = new global.GlobalServiceCatalogUtil().getRequestedFor(localInput.parentParams);
        return;
    }

    if (localInput &amp;&amp; localInput.action == 'init_item') {
        data._generatedItemGUID = gs.generateGUID();
        return;
    } else if (localInput &amp;&amp; localInput.action === "order_item") {
        //Minimum set of widget options supported for Embedded widget
        embeddedWidgetOptions.forEach(function(embeddedWidgetOption) {
            if (typeof localInput[embeddedWidgetOption] != 'undefined')
                options[embeddedWidgetOption] = localInput[embeddedWidgetOption];
        });
        data.orderItemModal = $sp.getWidget('widget-modal', {
            embeddedWidgetId: 'sc-checkout',
            embeddedWidgetOptions: {
                cart: {
                    name: localInput.cart
                },
                action: 'order_now',
                item: localInput.itemDetails,
                requested_for: {
                    id: options.requested_for_id,
                    displayValue: options.requested_for_display
                },
                auto_redirect: options.auto_redirect,
                parentParams: localInput.parentParams,
                native_mobile: options.native_mobile,
                isServiceWorkspace: options.isServiceWorkspace,
                referrer: data.referrer,
                hide_actions: options.hide_actions
            },
            backdrop: 'static',
            keyboard: false,
            size: 'md'
        });
        return;
    } else if (localInput &amp;&amp; localInput.action === "save_item") {
        data.saveItemModal = $sp.getWidget('widget-modal', {
            embeddedWidgetId: 'sc-item-save',
            embeddedWidgetOptions: {
                native_mobile: options.native_mobile,
                draftName: localInput.draftName,
                message: localInput.message,
                infoMessage: localInput.infoMessage,
            },
            backdrop: 'static',
            keyboard: false,
            size: 'md'
        });
        return;

    } else if (localInput &amp;&amp; (localInput.action == "order_wishlist_item" || localInput.action == "order_draft_item")) {
        //Minimum set of widget options supported for Embedded widget
        embeddedWidgetOptions.forEach(function(embeddedWidgetOption) {
            if (typeof localInput[embeddedWidgetOption] != 'undefined')
                options[embeddedWidgetOption] = localInput[embeddedWidgetOption];
        });
        data.orderItemModal = $sp.getWidget('widget-modal', {
            embeddedWidgetId: 'sc-checkout',
            embeddedWidgetOptions: {
                cart: {
                    name: localInput.cart
                },
                action: localInput.action == "order_wishlist_item" ? 'order_now_wishlisted_item' : 'order_now_draft_item',
                item: localInput.itemDetails,
                requested_for: {
                    id: options.requested_for_id,
                    displayValue: options.requested_for_display
                },
                auto_redirect: options.auto_redirect,
                parentParams: localInput.parentParams,
                native_mobile: options.native_mobile,
                referrer: data.referrer
            },
            backdrop: 'static',
            keyboard: false,
            size: 'md'
        });
        return;
    } else if (localInput &amp;&amp; localInput.action === 'log_request_cart') {
        $sp.logStat('Add to Cart Request', localInput.itemDetails.sys_class_name, localInput.itemDetails.sys_id, localInput.itemDetails.name, $sp.getPortalRecord().getUniqueValue());
        return;
    } else if (localInput &amp;&amp; localInput.action === "log_order_one_step") {
        $sp.logStat('Order Now Request', localInput.itemDetails.sys_class_name, localInput.itemDetails.sys_id, localInput.itemDetails.name, $sp.getPortalRecord().getUniqueValue());
        $sp.logStat('Cat Item Request', localInput.itemDetails.sys_class_name, localInput.itemDetails.sys_id, localInput.itemDetails.name, $sp.getPortalRecord().getUniqueValue());
        return;
    } else if (localInput &amp;&amp; localInput.action === 'log_request_producer') {
        $sp.logStat('Cat Item Request', localInput.itemDetails.sys_class_name, localInput.itemDetails.sys_id, localInput.itemDetails.name, $sp.getPortalRecord().getUniqueValue());
        return;
    }

    // portal can specify a catalog and catalog category home page
    var catalogID = $sp.getParameter("catalog_id") ? $sp.getParameter("catalog_id") + "" : "-1";
    data.sc_catalog_page = $sp.getDisplayValue("sc_catalog_page") || "sc_home";
    data.sc_category_page = $sp.getDisplayValue("sc_category_page") || "sc_category";
    var edit_parm = $sp.getParameter('edit');
    data.is_cart_item = edit_parm == 'cart';
    data.is_wishlist_item = edit_parm == 'wishlist';
    data.is_draft_item = edit_parm == 'draft';
    data.isPreview = options.is_preview == 'true' || $sp.getParameter("is_preview") == 'true';
    data.wishlist_item_id = "";
    data.recordFound = true;
    options.show_add_cart_button = (options.show_add_cart_button == "true");
    data.isMEE = options.native_mobile;
    var athTblName = 'sc_cart_item';
    var choicelistQuantityData = [];
    data.choiceListQuantity = choicelistQuantityData;
    data.quantity = 0;
    if (options.page) {
        var pageGR = new GlideRecord("sp_page");
        options.page = (pageGR.get(options.page)) ? pageGR.getValue("id") : null;
    }
    if (options.table) {
        var tableGR = new GlideRecord("sys_db_object");
        options.table = (tableGR.get(options.table)) ? tableGR.getValue("name") : null;
    }
    options.url = options.url || "id={page}&amp;is_new_order=true&amp;table={table}&amp;sys_id={sys_id}";

    data.showPrices = $sp.showCatalogPrices();
    var m = data.msgs = {};
    m.submitMsg = gs.getMessage("Submit");
    m.deletedOutdatedItemMsg = gs.getMessage("The draft catalog item you’re trying to open is deleted because the catalog item was updated after you saved it as a draft. You’re redirected to a new catalog item page.");
    m.requestMsg = gs.getMessage("Request");
    m.orderNowMsg = gs.getMessage("Order Now");
    m.submittedMsg = gs.getMessage("Submitted");
    m.formSubmittedMsg = gs.getMessage("Form submitted successfully");
    m.submittingMsg = gs.getMessage("Submitting");
    m.savingMsg = gs.getMessage("Saving");
    m.updatingMsg = gs.getMessage("Updating");
    m.createdMsg = gs.getMessage("Created");
    m.trackMsg = gs.getMessage("track using 'Requests' in the header or");
    m.clickMsg = gs.getMessage("click here to view");
    m.dialogTitle = gs.getMessage("Delete Attachment");
    m.dialogMessage = gs.getMessage("Are you sure?");
    m.dialogOK = gs.getMessage("OK");
    m.dialogCancel = gs.getMessage("Cancel");
    m.dialogSave = gs.getMessage("Save");
    m.dialogUpdate = gs.getMessage("Update");
    m.addToCart = gs.getMessage("Add to Cart");
    m.updateCart = gs.getMessage("Update Cart");
    m.saveAsDraft = gs.getMessage("Save as draft");
    m.updateDraft = gs.getMessage("Update draft");
    m.alsoReqForClearConfirmMsg = gs.getMessage("This will clear the values entered in 'Also requested for'. Do you want to proceed?");
    m.attachmentAddedMsg = gs.getMessage("Attachment added successfully");
    m.renameSuccessMsg = gs.getMessage("Attachment renamed successfully");
    m.deleteSuccessMsg = gs.getMessage("Attachment deleted successfully");
    m.wishlistMsg = gs.getMessage('Wish List');
    m.cartMsg = gs.getMessage('Cart');
    m.myRequestsMsg = gs.getMessage('My Requests');
    m.draftItemMsg = gs.getMessage('Draft Items');
    m.itemWishlistMsg = gs.getMessage('This item is already in your Wish List. If you attempt to add this item to your Wish List it will overwrite the existing item.');
    m.invalidRecordMsg = gs.getMessage('You are either not authorized or record is not valid.');
    m.wishlistUpdateMsg = gs.getMessage('Your Wish List has been updated.');
    m.wishlistAddMsg = gs.getMessage('Your item has been added to your Wish List.');
    m.draftSaveMsg = gs.getMessage('Your item has been saved in My Requests.');
    m.draftUpdateMsg = gs.getMessage('Your draft item has been updated.');
    m.viewDraftItemMsg = gs.getMessage('View Drafts');
    m.cartAddMsg = gs.getMessage('Your item has been added to your Cart. ');
    m.cartMakeChangesMsg = gs.getMessage('To make changes to the items in your cart, click ');
    m.viewWishListMsg = gs.getMessage('View Wish List');
    m.viewCartMsg = gs.getMessage('View Cart');
    m.delete_attachment = gs.getMessage("Delete Attachment?");
    m.regexError = gs.getMessage("Item with invalid variable can't be saved");
    m.requestSubmitted = gs.getMessage("Thank you, your request has been submitted.");
    data.maxAttachmentSize = parseInt(gs.getProperty("com.glide.attachment.max_size", 1024));
    m.updatedMsg = gs.getMessage("Updated");
    m.quantityToMsg = gs.getMessage("quantity to");
    if (isNaN(data.maxAttachmentSize)) {
        data.maxAttachmentSize = 24;
    }
    m.largeAttachmentMsg = gs.getMessage("Attached files must be smaller than {0} - please try again", "" + data.maxAttachmentSize + "MB");
    m.checkoutDialogMsg = gs.getMessage("Catalog checkout dialog");
    m.saveItemDialogMsg = gs.getMessage("Catalog item save dialog");
    m.notForMobileMsg = gs.getMessage('Not viewable in mobile');
    m.save_draft = gs.getMessage('Save draft');
    m.update_draft = gs.getMessage('Update draft');
    m.save_draft_as = gs.getMessage('Save draft as');
    m.hereMsg = gs.getMessage("here.");
    m.draftExistsMsg = gs.getMessage('A draft for this item already exists. You can view all the drafts');
    m.newDraftInfoMsg = gs.getMessage("If you save this item now, a new draft item would be created.");
    m.itemSavedMsg = gs.getMessage('Item saved successfully');
    m.itemRemovedFromCartMsg = gs.getMessage("has been removed from your cart");
    m.itemRemovedFromWishlistMsg = gs.getMessage("has been removed from your wishlist");
    m.saveDraftNameLengthErrMsg = gs.getMessage('Draft Item name should not exceed 200 characters.');
    m.save_draft_description = gs.getMessage('Give a unique name to save this item as a draft to continue working on it later.');
    m.wishlistItemDeletionMsg = gs.getMessage("This catalog item is on your wish list. After you save the draft, the item will be deleted from the wishlist.");
    m.cartItemDeletionMsg = gs.getMessage("This catalog item is in your cart. After you save the draft, the item will be deleted from the cart.");
    m.draftAlreadyExistCabrilloMsg = gs.getMessage("A draft for this item already exists.");
    if (options.record_producer_label)
        data.record_producer_label = gs.getMessage(options.record_producer_label);

    if (options.native_mobile == 'true') {
        var listScreenGr = new GlideRecord("sys_sg_list_screen");
        listScreenGr.addQuery("sys_id", "31307d1787232300e0ef0cf888cb0b15");
        listScreenGr.setWorkflow(false);
        listScreenGr.query();
        if (listScreenGr.next()) {
            var deepLinkGen = new global.MobileDeepLinkGenerator('request');
            data.nativeMyRequestsScreenLink = deepLinkGen.getScreenLink('31307d1787232300e0ef0cf888cb0b15');
        } else
            data.nativeMyRequestsScreenLink = "";
    }

    if (edit_parm) {
        var cartName = data.is_cart_item ? 'DEFAULT' : (data.is_wishlist_item ? 'saved_items' : 'draft_items');
        var cart = new sn_sc.CartJS(cartName);

        var cart_item_id = $sp.getParameter("sys_id");
        var gr = new GlideRecord("sc_cart_item");
        if (!gr.get(cart_item_id) || gr.cart != cart.getCartID() ||
            (!new sn_sc.CatItem(gr.getValue('cat_item')).canView())) {
            data.recordFound = false;
            return;
        }
        data.showWishlist = data.is_wishlist_item;
        if (gr.isValidField('cart_item_name'))
            data.draftItemName = gr.getValue('cart_item_name');

        var catItemData = {};
        catItemData.sys_id = gr.getValue('cat_item');
        catItemData.cart_item_id = gr.getUniqueValue();
        catItemData.table = "sc_cart_item";
        catItemData.is_ordering = true;
        catItemData.from_guide = !!gr.getValue('order_guide');
        data.current_cart_item = cart_item_id;
        data.sc_cat_item = $sp.getCatalogItem(catItemData);
        var className = data.sc_cat_item.sys_class_name;
        if (!new global.CatalogItemTypeProcessor().canCreateNormalCartItem(className)) {
            if (className == 'sc_cat_item_producer' || className == 'std_change_record_producer')
                athTblName = data.sc_cat_item.target_table_name;
        }
        data._attachmentTable = athTblName;

        data.sc_cat_item.isCartItem = true;
        data.sc_cat_item.cart_guide = gr.getValue('order_guide');
        data.sc_cat_item.native_mobile = data.isMEE == 'true';
        data.hideDeliveryTime = data.sc_cat_item.no_delivery_time;
        if (!data.hideDeliveryTime)
            data.hideDeliveryTime = (options.hide_delivery_time == "true" || data.sc_cat_item.sys_class_name == 'sc_cat_item_producer' || data.sc_cat_item.sys_class_name == 'sc_cat_item_guide' || data.sc_cat_item.sys_class_name == 'std_change_record_producer');

        if (data.is_draft_item &amp;&amp; typeof sn_sc.CartJS.isSameVersion == "function" &amp;&amp; !sn_sc.CartJS.isSameVersion(cart_item_id, gr.getValue('cat_item'))) {
            var cartRecord = new sn_sc.CartJS("draft_items");
            cartRecord.remove(cart_item_id);
            if (athTblName != 'sc_cart_item')
                new global.GlobalServiceCatalogUtil().deleteAttachments(athTblName, cart_item_id);

            gs.getSession().putClientData('invalidVersionItem_' + data.sc_cat_item.sys_id, true);
            data.redirectToItem = true;
            return;
        }
        var values = getValues(cart_item_id);
        for (var f in data.sc_cat_item._fields) {
            // Put the values into the cat item fields
            var field = data.sc_cat_item._fields[f];
            if (typeof values[f] != "undefined" &amp;&amp; typeof values[f].value != "undefined") {
                if (values[f].type == 9 || values[f].type == 10)
                    field.value = values[f].displayValue;
                else if (values[f].type == 25)
                    field.value = values[f].decrypted_value;
                else
                    field.value = values[f].value;
                field.displayValue = values[f].displayValue;
                field.display_value_list = values[f].display_value_list;
            }
            updatePriceOnField(field);

        }

        data._generatedItemGUID = cart_item_id;
        data.quantity = '' + gr.quantity;
    } else {

        if (localInput)
            data.sys_id = localInput.sys_id;
        else if (options.sys_id)
            data.sys_id = options.sys_id;
        else
            data.sys_id = $sp.getParameter("sys_id") || $sp.getParameter('sl_sys_id');

        if (!data.sys_id) {
            data.recordFound = false;
            return;
        }

        data._generatedItemGUID = gs.generateGUID();

        var validatedItem = new sn_sc.CatItem('' + data.sys_id);
        if (!data.isPreview) {
            if (!validatedItem.canView() || !validatedItem.isVisibleServicePortal()) {
                data.recordFound = false;
                return;
            }
        }

        data.sc_cat_item = $sp.getCatalogItem({
            sys_id: data.sys_id + '',
            is_ordering: true
        });

        className = data.sc_cat_item.sys_class_name;
        if (!new global.CatalogItemTypeProcessor().canCreateNormalCartItem(className)) {
            if (className == 'sc_cat_item_producer' || className == 'std_change_record_producer')
                athTblName = data.sc_cat_item.target_table_name;
        }
        data._attachmentTable = athTblName;

        data.favoriteWidget = $sp.getWidget('ec_favorite', {
            'table': data.sc_cat_item.sys_class_name,
            'sys_id': data.sc_cat_item.sys_id
        });

        if (options.native_mobile == 'true') {
            if (gs.getProperty('glide.sc.mobile.item_class_not_supported', '').split(',').indexOf(data.sc_cat_item.sys_class_name) &gt; -1) {
                data.not_for_mobile = true;
                data.sc_cat_item = {};
                return;
            }
            if (gs.getProperty('glide.sc.mobile.include_desktop_only_items', 'true') == 'false') {
                if (data.sc_cat_item.availability == 'on_desktop') {
                    data.not_for_mobile = true;
                    data.sc_cat_item = {};
                    return;
                }
            }
        }

        data.sc_cat_item.native_mobile = data.isMEE == 'true';
        data.hideDeliveryTime = data.sc_cat_item.no_delivery_time;
        if (!data.hideDeliveryTime)
            data.hideDeliveryTime = (options.hide_delivery_time == "true" || data.sc_cat_item.sys_class_name == 'sc_cat_item_producer' || data.sc_cat_item.sys_class_name == 'sc_cat_item_guide' || data.sc_cat_item.sys_class_name == 'std_change_record_producer');

        if (data.sc_cat_item.dynamic)
            updatePortalConfigOfDynamicContentItem(data.sc_cat_item.dynamic, data.sc_cat_item);


        if (data.sc_cat_item.category) {
            var categoryJS;
            var categoryID = validatedItem.getFirstAccessibleCategoryForSearch((catalogID &amp;&amp; catalogID != "-1") ? catalogID : $sp.getCatalogs().value + "");
            if (GlideStringUtil.isEligibleSysID($sp.getParameter("sysparm_category"))) {
                categoryJS = new sn_sc.CatCategory($sp.getParameter("sysparm_category") + "");
                categoryID = $sp.getParameter("sysparm_category") + "";
            } else if (categoryID) {
                categoryJS = new sn_sc.CatCategory(categoryID);
            }
            if (categoryJS &amp;&amp; GlideStringUtil.isEligibleSysID(categoryJS.getID())) {
                if (categoryJS.getCatalog()) {
                    catalogID = categoryJS.getCatalog();
                    data.catalog_id = catalogID;
                    var catalogObj = new sn_sc.Catalog('' + catalogID);
                    data.sc_catalog = catalogObj.getTitle();
                    data.showWishlist = catalogObj.isWishlistEnabled();
                }
                data.category = {
                    name: categoryJS.getTitle(),
                    url: '?id=' + data.sc_category_page + '&amp;sys_id=' + categoryID
                };
                data.categories = [];
                data.categories.push({
                    label: categoryJS.getTitle(),
                    url: '?id=' + data.sc_category_page + '&amp;sys_id=' + categoryID
                });
                while (categoryJS.getParent()) {
                    var parentId = categoryJS.getParent();
                    categoryJS = new sn_sc.CatCategory(parentId);
                    var category = {
                        label: categoryJS.getTitle(),
                        url: '?id=' + data.sc_category_page + '&amp;sys_id=' + parentId
                    };
                    data.categories.unshift(category);
                }
                if ((($sp.getCatalogs().value + "").split(",")).length &gt; 1) {
                    data.all_catalog_msg = gs.getMessage("All Catalogs");
                }
            }
        }

    }

    var wishlistGr = new GlideRecord('sc_cart_item');
    wishlistGr.addQuery('cart', new sn_sc.CartJS('saved_items').getCartID());
    wishlistGr.addQuery('cat_item', data.sc_cat_item.sys_id);
    wishlistGr.query();
    if (wishlistGr.next() &amp;&amp; !options.isServiceWorkspace)
        data.wishlist_item_id = wishlistGr.getUniqueValue();

    if (gs.nil(data.draftItemName))
        data.draftItemName = gs.getMessage("{0} draft", data.sc_cat_item.name);

    data.draft_buttons_hidden_via_property = (gs.getProperty('glide.sc.disable.save_as_draft') == 'true') || (gs.getProperty('glide.sc.enable.save_as_draft.portal.' + data.portal_suffix) != 'true');
    if (!gs.getSession().getClientData('invalidVersionItem_' + data.sc_cat_item.sys_id)) {
     //   gs.getSession().clearClientData('invalidVersionItem_' + data.sc_cat_item.sys_id);
        data.isInvalidVersion = true;
    }

    if (!data.draft_buttons_hidden_via_property &amp;&amp; (options.hide_save_as_draft_button != "true") &amp;&amp; !data.sc_cat_item.no_save_as_draft) {
        var draftItemGr = new GlideRecord('sc_cart_item');
        draftItemGr.addQuery('cart', new sn_sc.CartJS('draft_items').getCartID());
        draftItemGr.addQuery('cat_item', data.sc_cat_item.sys_id);
        draftItemGr.query();
        data.hasDraftItem = draftItemGr.hasNext();
    }

    data.sys_properties = {
        twostep: gs.getProperty("glide.sc.sp.twostep", "true") == 'true' &amp;&amp; !data.sc_cat_item.has_requested_for_variable,
        mobileNativeColor: gs.getProperty("glide.sc.mobile.primary_color", "#1f8476"),
        cartEnabled: gs.getProperty("glide.sc.cart.enabled", "false") == "true",
        stopNavigationOnError: gs.getProperty("glide.sc.stop_navigation_on_error", "true") == "true",
        isPolaris: gs.getProperty("glide.ui.polaris.experience", "false")
    };

    m.catItemOpenedMsg = gs.getMessage("Catalog item {0} opened", data.sc_cat_item.name);

    className = data.sc_cat_item.sys_class_name;
    data.can_create_cart_item = canCreateCartItem(className) &amp;&amp; !gs.hasRole('snc_read_only');

    function canCreateCartItem(className) {
        var allowedClasses = ['sc_cat_item_producer', 'std_change_record_producer', 'sc_cat_item_producer_service'];
        if (allowedClasses.indexOf(className) &gt; -1)
            return true;

        var invalidClasses = ('sc_cat_item_content,' + gs.getProperty('glide.sc.item.not_normal_cart_item', '')).split(',');

        return invalidClasses.indexOf(className) &lt; 0;
    }


    data.stdChg = {};
    if (className === 'std_change_record_producer') {
        //Populate scope with the porperty for two step
        data.stdChg.twoStep = false;
        var twoStepProp = new global.StdChangeUtils().getValue('two_step') + '';
        if (twoStepProp)
            data.stdChg.twoStep = twoStepProp === '1';
        var stdChgProducerGr = new GlideRecord('std_change_record_producer');
        stdChgProducerGr.get(data.sc_cat_item.sys_id);
        if (stdChgProducerGr.isValidRecord())
            data.stdChg.currentVersion = stdChgProducerGr.getValue('current_version');
        if (gs.getProperty('com.snc.change_management.change_model.type_compatibility', 'false') !== 'true')
            data.stdChg.chgModel = new global.StdChangeUtils().DEFAULT_CHG_MODEL;
        data.stdChg.defaultType = new global.StdChangeUtils().DEFAULT_CHG_TYPE;
    }

    if (data.sc_cat_item.sys_class_name !== 'sc_cat_item_content')
        $sp.logStat('Cat Item View', data.sc_cat_item.sys_class_name, data.sc_cat_item.sys_id, data.sc_cat_item.name, $sp.getPortalRecord().getUniqueValue());

    function getValues(sys_id) {
        var qs = new sn_sc.VariablePoolQuestionSetJS();
        qs.setCartID(sys_id);
        qs.load();
        var values = {};
        var questions = qs.getFlatQuestions();
        for (var i = 0; i &lt; questions.length; i++) {
            var qKey = questions[i].name;
            if (typeof qKey == 'undefined' || qKey == '')
                qKey = "IO:" + questions[i].sys_id;
            values[qKey] = questions[i];
        }
        return values;
    }

    function setPrice(field, p, rp) {
        if (p != undefined)
            field.price = p;
        if (rp != undefined)
            field.recurring_price = rp;
    }

    function updatePriceForReferenceTable(field) {
        var tableName = field.refTable + '';
        if (tableName != undefined &amp;&amp; tableName != null &amp;&amp; tableName != '') {
            var gr = new GlideRecord(tableName);
            if (gr.isValid()) {
                if (gr.get(field.value) &amp;&amp; gr.isValidRecord()) {
                    updatePrice(gr, field);
                    updateRecurringPrice(gr, field);
                }
            }
        }
    }

    function updatePriceForListCollector(field) {
        var tableName = field.refTable + '';
        if (tableName != undefined &amp;&amp; tableName != null &amp;&amp; tableName != '') {
            var gr = new GlideRecord(tableName);
            if (gr.isValid()) {
                var values = field.value.split(',');
                gr.addQuery('sys_id', values);
                gr.query();
                var p = 0.0;
                var rp = 0.0;
                var price_value_list = [];
                while (gr.next()) {
                    var price_field = {};
                    updatePrice(gr, price_field);
                    updateRecurringPrice(gr, price_field);
                    if (price_field.price)
                        p += Number(price_field.price);
                    else
                        price_field.price = 0.0;
                    if (price_field.recurring_price)
                        rp += Number(price_field.recurring_price);
                    else
                        price_field.recurring_price = 0.0;
                    price_value_list.push(price_field);
                }
                field.price = p;
                field.recurring_price = rp;
                field.price_value_list = price_value_list;
            }
        }
    }

    function updatePrice(gr, field) {
        if (gr.isValidField('price'))
            field.price = gr.getValue('price');
        else if (gr.isValidField('u_price'))
            field.price = gr.getValue('u_price');
    }

    function updateRecurringPrice(gr, field) {
        if (gr.isValidField('recurring_price'))
            field.recurring_price = gr.getValue('recurring_price');
        else if (gr.isValidField('u_recurring_price'))
            field.recurring_price = gr.getValue('u_recurring_price');
    }

    function updatePriceOnField(field) {
        if (field.type == 'boolean' || field.type == 'boolean_confirm') {
            if (field.value == 'true' || field.value == true)
                setPrice(field, field._pricing.price_if_checked, field._pricing.recurring_price_if_checked);
            else
                setPrice(field, 0, 0);
        } else if (field.choices) {
            var valueExistInChoices = false;
            field.choices.forEach(function(choice) {
                if (choice.value + '' == field.value + '') {
                    setPrice(field, choice.price, choice.recurring_price);
                    valueExistInChoices = true;
                }
            });
            if (!valueExistInChoices)
                setPrice(field, 0, 0);
        } else if (field._pricing &amp;&amp; field._pricing.pricing_implications === true) {
            if (field.type == 'reference')
                updatePriceForReferenceTable(field);
            else if (field.type == 'glide_list')
                updatePriceForListCollector(field);
        }
    }

    function updatePortalConfigOfDynamicContentItem(dynamicContents, item) {
        var portalUrl = new global.DynamicCatalogContentUtil().getServicePortalUrl(dynamicContents.model, dynamicContents.content);
        if (portalUrl)
            item.portalUrl = portalUrl;
    }
})();]]&gt;&lt;/script&gt;&lt;servicenow&gt;false&lt;/servicenow&gt;&lt;sys_class_name&gt;sp_widget&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2024-09-28 20:40:57&lt;/sys_created_on&gt;&lt;sys_id&gt;897fdbe3c3341210a7705fd1b4013171&lt;/sys_id&gt;&lt;sys_mod_count&gt;9&lt;/sys_mod_count&gt;&lt;sys_name&gt;Visitor Catalog Item&lt;/sys_name&gt;&lt;sys_package display_value="Visitor Management" source="x_845458_visitorsa"&gt;3ab4f6ebc3301210a7705fd1b4013154&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Visitor Management"&gt;3ab4f6ebc3301210a7705fd1b4013154&lt;/sys_scope&gt;&lt;sys_update_name&gt;sp_widget_897fdbe3c3341210a7705fd1b4013171&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-09-28 21:56:20&lt;/sys_updated_on&gt;&lt;template&gt;&lt;![CDATA[&lt;div id="sc_cat_item" ng-if="::(data.recordFound &amp;&amp; !data.not_for_mobile)" sn-atf-blacklist="IS_SERVICE_CATALOG"&gt;
  &lt;sp-widget widget="c.orderItemModal" ng-if="c.orderItemModal"&gt;&lt;/sp-widget&gt;
  &lt;sp-widget widget="c.saveItemModal" ng-if="c.saveItemModal"&gt;&lt;/sp-widget&gt;
  &lt;div class="row" ng-if="::data.sc_cat_item" ng-class="{'native-mobile': options.native_mobile == 'true'}"&gt;
    &lt;div class="col-sm-12" ng-class="{'col-md-9': options.display_cart_on_right === 'true', 'col-md-12': options.display_cart_on_right !== 'true', 'no-padder': options.native_mobile == 'true'}" id="catItemTop"&gt;
      &lt;!-- Info Message Box --&gt;
      &lt;div  ng-if="data.hasDraftItem &amp;&amp; !data.is_draft_item &amp;&amp; !c.data.sc_cat_item.no_save_as_draft &amp;&amp; !c.isNative" class="alert alert-info" sc-bind-html-compile="::c.draftExistsWithLinkMsg"&gt;
      &lt;/div&gt;
      &lt;div ng-if="c.showAddToWishlist()  &amp;&amp; !data.is_wishlist_item &amp;&amp; !!data.wishlist_item_id &amp;&amp; data.wishlist_item_id != data._generatedItemGUID" class="alert alert-info" role="status"&gt;
        {{::m.itemWishlistMsg}}
      &lt;/div&gt;
      &lt;div class="alert alert-danger" ng-if="data.isInvalidVersion"&gt;
        &lt;span&gt;
          {{::m.deletedOutdatedItemMsg}}
        &lt;/span&gt;
       &lt;i class="fa fa-close pull-right pointer" aria-label="${Close Notification}" tabindex="0" ng-click="data.isInvalidVersion = false"/&gt;
      &lt;/div&gt;
      &lt;!--	Success Message Box	--&gt;
      &lt;div class="alert alert-success" ng-if="data.showMsg" sc-bind-html-compile="m.actionMsg"&gt;
      &lt;/div&gt;
      &lt;div class="panel panel-default"&gt;
        &lt;!-- Title Section --&gt;
        &lt;div role="region" aria-label="${Item Details}"&gt;
        	&lt;div class="wrapper-md b-b break-word item-header clearfix" ng-class="{true: '', false: 'sc-sticky-item-header'}[!c.data.sc_cat_item.short_description]" style="top: {{stickyHeaderTop}}"&gt;
	          &lt;span class="pull-right" ng-if="!c.isNative"&gt;
                &lt;sp-widget widget="data.favoriteWidget"&gt;&lt;/sp-widget&gt;
              &lt;/span&gt;
          &lt;h2 class="h2 m-t-none m-b-sm font-thin" ng-if="::data.sc_cat_item.name &amp;&amp; options.native_mobile != 'true'"&gt;{{::data.sc_cat_item.name}}&lt;/h2&gt;
          &lt;div class="text-muted sc-cat-item-short-description" ng-if="::data.sc_cat_item.short_description"&gt;{{::data.sc_cat_item.short_description}}&lt;/div&gt;
          &lt;div ng-if="c.isNative &amp;&amp; !c.isAgentApp" class="cat-mobile-favorite" ng-click="toggleFavorite($event)"&gt;
              &lt;sp-widget widget="data.favoriteWidget"&gt;&lt;/sp-widget&gt;
              &lt;span ng-if = "showFavorite"&gt;
                &lt;span class="favorite-text" ng-if="isFavorite === true"&gt;${Favorited}&lt;/span&gt;
                &lt;span class="favorite-text" ng-if="isFavorite === false"&gt;${Favorite}&lt;/span&gt;
              &lt;/span&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        	&lt;div class="row b-b no-margin" ng-if="c.data.sc_cat_item.picture || c.data.sc_cat_item.trusted_description" ng-class="{'wrapper-md': options.native_mobile != 'true', 'wrapper-sm': options.native_mobile == 'true'}"&gt;
          &lt;div class="col-sm-4 col-xs-12 no-padder" ng-if="c.data.sc_cat_item.picture"&gt;
            &lt;div class="wrapper-md text-center"&gt;
              &lt;i class="fa fa-chevron-left pointer" style="position:absolute; top:50%; left:4%; color:#CECECE" ng-if="options.image_gallery"&gt;&lt;/i&gt;
              &lt;img class="img-responsive catalog-item-image" alt="{{c.isNative ? data.sc_cat_item.name : ''}}" role="{{c.isNative ? 'img' : 'presentation'}}" style="display: inline" ng-src="{{::data.sc_cat_item.picture}}?t=medium" /&gt;
              &lt;i class="fa fa-chevron-right pointer" style="position:absolute; top:50%; right:4%; color:#CECECE" ng-if="options.image_gallery"&gt;&lt;/i&gt;
              &lt;div class="image-gallery padding-top" ng-if="options.image_gallery"&gt;
                &lt;i class="fa fa-circle active"&gt;&lt;/i&gt;
                &lt;i class="fa fa-circle"&gt;&lt;/i&gt;
                &lt;i class="fa fa-circle"&gt;&lt;/i&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="col-xs-12 break-word"
               ng-class="{true: 'col-sm-12 no-padder', false: 'col-sm-8'}[!c.data.sc_cat_item.picture]"&gt;
            &lt;div class="visible-md visible-lg" ng-class="{false : 'visible-xs visible-sm', true : 'hidden-xs hidden-sm'}[c.options.show_less_description === 'true']" style="overflow : auto"&gt;
              &lt;div ng-bind-html="::data.sc_cat_item.trusted_description" class="sc-item-description"&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;div class="col-xs-12 col-sm-12 visible-xs visible-sm" ng-if="c.options.show_less_description === 'true'"&gt;
              &lt;sc-toggle-data sn-data="::data.sc_cat_item.trusted_description"&gt;&lt;/sc-toggle-data&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="b-b wrapper-md" ng-show="!data.no_fields" aria-label="${Form}"&gt;
          &lt;sp-cat-item item="::data.sc_cat_item" &gt;&lt;/sp-cat-item&gt;
	  &lt;div ng-if="c.mandatory.length &gt; 0" class="sc-cat-item-legend" ng-attr-role="{{c.isNative ? 'text' : undefined}}"&gt;
           &lt;span class="fa fa-asterisk mandatory" title="${asterisk}" style="padding-right: .25rem"&gt;
		&lt;span class="sr-only"&gt;${asterisk}&lt;/span&gt;
	    &lt;/span&gt;
            &lt;span&gt;${Indicates required}&lt;/span&gt;
     	  &lt;/div&gt;
          &lt;form id="catalog-form"&gt;
            &lt;!-- display view and model --&gt;
            &lt;sp-model form-model="::data.sc_cat_item" mandatory="c.mandatory"&gt;&lt;/sp-model&gt;
          &lt;/form&gt;
        &lt;/div&gt;
        &lt;div class="b-b wrapper-md" ng-if="::(data.sc_cat_item.content_type == 'external' || data.sc_cat_item.content_type == 'kb' || data.sc_cat_item.content_type == 'dynamic')"&gt;
          &lt;div ng-if="::data.sc_cat_item.content_type == 'external'" class="wrapper-md m-l-sm"&gt;
            &lt;a ng-href="{{::data.sc_cat_item.url}}" target={{::data.sc_cat_item.target}}&gt;${Go to Link:} {{::data.sc_cat_item.url}} ➚&lt;/a&gt;
          &lt;/div&gt;
          &lt;div ng-if="::data.sc_cat_item.content_type == 'kb'" class="wrapper-md m-l-sm"&gt;
            &lt;a  ng-href="?id=kb_article&amp;sys_id={{::data.sc_cat_item.kb_article}}"&gt;${Go to KB Article:} {{::data.sc_cat_item.kb_article_description}}&lt;/a&gt;
          &lt;/div&gt;
          &lt;div ng-if="::data.sc_cat_item.content_type == 'dynamic'" class="wrapper-md m-l-sm"&gt;
            	&lt;a ng-if="::data.sc_cat_item.portalUrl" ng-href="{{::data.sc_cat_item.portalUrl}}"&gt;${Go to Link:} {{::data.sc_cat_item.portalUrl}}&lt;/a&gt;
                &lt;a ng-if="::!data.sc_cat_item.portalUrl" ng-href="{{::data.sc_cat_item.url}}" target={{::data.sc_cat_item.target}}&gt;${Go to Link:} {{::data.sc_cat_item.url}} ➚&lt;/a&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;!-- Bottom cart --&gt;
        &lt;div class="inline-cart" ng-if="::(options.display_cart_on_right !== 'true' &amp;&amp; options.native_mobile != 'true')" role="region" aria-label="${Page Actions}"&gt;
          &lt;div ng-if="c.showCart()" class="wrapper-md b-b"&gt;
            &lt;div ng-if="::c.allowOrder() &amp;&amp; c.showQuantitySelector()" class="m-b"&gt;
               &lt;label for="catItemQuantity"&gt;&lt;b&gt;${Quantity}&lt;/b&gt;&lt;/label&gt;
               &lt;div class="cat-item-quantity-box-bottom-cart"&gt;
                 &lt;select id="catItemQuantity"
                          title="${Quantity}"
                          ng-disabled="disableControls()"
                          class="m-r-xs sn-select-basic"
                          ng-model="c.quantity"
                          sn-select-width="65px"
                          ng-change="c.updateQuantity(data.sc_cat_item)"
                          aria-hidden="true"&gt;
                   &lt;option ng-repeat="num in data.choiceListQuantity" value={{::num.value}}&gt;{{::num.label}}&lt;/option&gt;
                 &lt;/select&gt;
               &lt;/div&gt;
            &lt;/div&gt;
            &lt;div class="m-b" ng-if="c.showPrice()" &gt;
              &lt;b&gt;${Price}&lt;/b&gt;
              &lt;div&gt;
                {{data.sc_cat_item.price_display}}&lt;em ng-if="data.sc_cat_item.recurring_price" class="cat_item_price"&gt; {{data.sc_cat_item.price ? '+' : ''}} {{data.sc_cat_item.recurring_price_display + ' ' + data.sc_cat_item.recurring_price_frequency}}&lt;/em&gt;
              &lt;/div&gt;
            &lt;/div&gt;
             &lt;div class="m-b" ng-if="c.showDeliveryTime()"&gt;
              &lt;b&gt;${Delivery Time}&lt;/b&gt;
              &lt;div&gt;
                {{::data.sc_cat_item.estimated_delivery_time}}
              &lt;/div&gt;
            &lt;/div&gt;
            &lt;div ng-if="::c.allowOrder()" class="text-right"&gt;
              &lt;button sp-ellipsis-tooltip sp-ellipsis-tooltip-title="${Add to Cart}" tabindex="0" ng-if="c.showAddCartBtn()" name="add_to_cart" ng-disabled="disableControls()" ng-click="triggerAddToCart()" class="btn btn-default m-r-xs bottom-button-width text-overflow-ellipsis"&gt;
                &lt;i class="fa fa fa-shopping-cart pull-left cart-icon-padding-top" aria-hidden="true"&gt;&lt;/i&gt;
                ${Add to Cart}
              &lt;/button&gt;
              &lt;button sp-ellipsis-tooltip sp-ellipsis-tooltip-title="${Update Cart}" tabindex="0" ng-if="data.is_cart_item" name="update" ng-disabled="disableControls()" ng-click="triggerUpdateCart()" class="btn btn-default m-r-xs bottom-button-width text-overflow-ellipsis"&gt;
                &lt;i class="fa fa fa-shopping-cart pull-left cart-icon-padding-top" aria-hidden="true"&gt;&lt;/i&gt;
                ${Update Cart}
              &lt;/button&gt;
              &lt;span class="form-group relative" ng-if="c.showAddToWishlist()"&gt;
                &lt;button sp-ellipsis-tooltip sp-ellipsis-tooltip-title="${Add to Wish List}" ng-if="!data.is_wishlist_item" name="add_to_wishlist" ng-click="triggerAddToWishlist()" ng-disabled="disableControls()" class="btn btn-default m-r-xs bottom-button-width text-overflow-ellipsis"&gt;
                  &lt;i class="icon-sp-wishlist pull-left cart-icon-margin" aria-hidden="true"&gt;&lt;/i&gt;
                  ${Add to Wish List}
                &lt;/button&gt;
                &lt;button sp-ellipsis-tooltip sp-ellipsis-tooltip-title="${Update Wish List}" ng-if="data.is_wishlist_item" name="update_wishlist" ng-click="triggerAddToWishlist()" ng-disabled="disableControls()" class="btn btn-default m-r-xs bottom-button-width text-overflow-ellipsis"&gt;
                  &lt;i class="icon-sp-wishlist pull-left cart-icon-margin" aria-hidden="true"&gt;&lt;/i&gt;
                  ${Update Wish List}
                &lt;/button&gt;
              &lt;/span&gt;
              &lt;span class="form-group relative"&gt;
                &lt;button sp-ellipsis-tooltip sp-ellipsis-tooltip-title="${Save as Draft}" ng-if="c.showDraftButtons() &amp;&amp; !data.is_draft_item" name="save_item" ng-click="triggerSaveItem()" ng-disabled="disableControls()" class="btn btn-default m-r-xs bottom-button-width text-overflow-ellipsis"&gt;
                  &lt;i class="icon-save pull-left cart-icon-margin" aria-hidden="true"&gt;&lt;/i&gt;
                  ${Save as Draft}
                &lt;/button&gt;
                &lt;button sp-ellipsis-tooltip sp-ellipsis-tooltip-title="${Update Draft}" ng-if="c.showDraftButtons() &amp;&amp; data.is_draft_item" name="update_saved_item" ng-click="triggerSaveItem()" ng-disabled="disableControls()" class="btn btn-default m-r-xs bottom-button-width text-overflow-ellipsis"&gt;
                  &lt;i class="icon-save pull-left cart-icon-margin" aria-hidden="true"&gt;&lt;/i&gt;
                  ${Update Draft}
                &lt;/button&gt;
              &lt;/span&gt;
              &lt;button sp-ellipsis-tooltip sp-ellipsis-tooltip-title="{{submitButtonMsg}}" ng-if="::c.showOrderNowButton()" tabindex="0" name="submit" ng-disabled="disableControls()" ng-click="triggerOnSubmit()" class="btn btn-primary bottom-button-width text-overflow-ellipsis" id="submit-btn" aria-live="assertive"&gt;{{submitButtonMsg}}&lt;/button&gt;
              &lt;span ng-if="submitting" style="padding-left:4px"&gt;${Submitting...}&lt;/span&gt;
              &lt;span ng-if="validating" style="padding-left:4px"&gt;${Validating...}&lt;/span&gt;
            &lt;/div&gt;
            &lt;div ng-show="hasMandatory(c.mandatory)" class="alert alert-info" style="margin-top: .5em" ng-if="c.options.show_field_validation_messages === 'true'" aria-live="assertive"&gt;
              &lt;div id="required_field_bottom" role="group" aria-label="${Required information - clicking on any button in this group will take you to the corresponding mandatory field}"&gt;
                &lt;div id="required_information_bottom" ng-if="hasMandatory(c.mandatory)" aria-hidden="true"&gt;${Required information} &lt;/div&gt;
                &lt;div style="display:flex; flex-wrap:wrap; grid-row-gap:3px;"&gt;
                  &lt;div ng-repeat="f in c.mandatory"&gt;
                    &lt;div role="alert"&gt;
                      &lt;span class="sr-only" id="req_info_bottom_{{::f.name}}"&gt;${Required information}&lt;/span&gt;
                  		&lt;button for="req_info_bottom_{{::f.name}}" class="label sc-field-error-label sc-reqd-info-btn" ng-click="getFocus(f)" title="{{::f.label}}"&gt;{{::f.label}}&lt;/button&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
                &lt;/div&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div ng-if="c.showAttachments()" class="wrapper-md row no-margin" role="region" data-label="Attachments" aria-label="${Attachments}"&gt;
          &lt;now-attachments-list template="sp_attachment_single_line" &gt;&lt;/now-attachments-list&gt;
          &lt;div ng-class="{'flex-center attachment-height': options.native_mobile == 'true', 'flex-end': options.native_mobile != 'true'}"&gt;
            &lt;label ng-if="!submitting &amp;&amp; !submitted" style="font-weight:normal;cursor:pointer;"&gt;
              &lt;sp-attachment-button modal="true" required="{{data.sc_cat_item.mandatory_attachment}}"&gt;&lt;/sp-attachment-button&gt;
              &lt;span class="fa fa-asterisk mandatory"
                      ng-if="data.sc_cat_item.mandatory_attachment"
                      ng-class="{'mandatory-filled': data.sc_cat_item.mandatory_attachment &amp;&amp; (data.sc_cat_item.attachment_submitted || attachments.length &gt; 0)}"
                      style="vertical-align:super" aria-hidden="true"&gt;&lt;/span&gt;
              &lt;span ng-class="{'attachment-text' : options.native_mobile == 'true'}" aria-hidden="true"&gt;${Add attachments}&lt;/span&gt;
            &lt;/label&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;!-- Right side content --&gt;
    &lt;div class="col-sm-12 col-md-3 right-side-cart" ng-show="::options.display_cart_on_right === 'true' || c.isNative === true" ng-class="{'no-padder': options.native_mobile == 'true'}" role="region" aria-label="${Page Actions}"&gt;
      &lt;!-- Right side cart( If you are chaning anything here, please change in bottom cart section also) --&gt;
      &lt;div ng-class="{true:'sc-fixed', false:'' }[isSCCartFixed]"&gt;
        &lt;div ng-if="c.showCart()" class="panel panel-{{::options.color}} b" ng-class="{'wrapper-md': options.native_mobile != 'true', 'wrapper-sm': options.native_mobile == 'true'}"&gt;
          &lt;div ng-if="::c.allowOrder()" ng-class="{'form-group': options.native_mobile == 'true'}"&gt;
            &lt;div ng-if="c.showQuantitySelector()" class="cat-item-quantity-group"&gt;
			   &lt;label for="catItemQuantity"&gt;&lt;b&gt;${Quantity}:&lt;/b&gt;&lt;/label&gt;
              &lt;div class="cat-item-quantity-box"&gt;
                &lt;select id="catItemQuantity"
                    title="${Quantity}"
                    ng-disabled="disableControls()"
                    class="m-b sn-select-basic"
                    ng-model="c.quantity"
                    ng-change="c.updateQuantity(data.sc_cat_item)"
                    aria-hidden="true"&gt;
                  &lt;option ng-repeat="num in data.choiceListQuantity" value={{::num.value}}&gt;{{::num.label}}&lt;/option&gt;
                &lt;/select&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="form-group relative" ng-if="c.options.native_mobile == 'true'"&gt;
            &lt;div class="" ng-if="c.showPrice()"&gt;
              &lt;b aria-hidden="true"&gt;{{data.sc_cat_item.price_display}}&lt;/b&gt;
              &lt;span class="sr-only"&gt;${Price} {{data.sc_cat_item.price_display}}&lt;/span&gt;
              &lt;em aria-hidden="true" ng-if="data.sc_cat_item.recurring_price" class="cat_item_price"&gt; {{data.sc_cat_item.price ? '+' : ''}} {{data.sc_cat_item.recurring_price_display + ' ' + data.sc_cat_item.recurring_price_frequency}}&lt;/em&gt;
              &lt;span class="sr-only" ng-if="data.sc_cat_item.recurring_price"&gt;${Recurring Price} {{data.sc_cat_item.recurring_price_display}} {{data.sc_cat_item.recurring_price_frequency}}&lt;/span&gt;
            &lt;/div&gt;
            &lt;div class="text-muted" ng-if="c.showDeliveryTime()"&gt;
              ${Delivery Time}: {{::data.sc_cat_item.estimated_delivery_time}}
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="form-group relative" ng-if="c.options.native_mobile != 'true'"&gt;
            &lt;div class="form-group" ng-if="c.showPrice()"&gt;
              &lt;b&gt;${Price}:&lt;/b&gt; {{data.sc_cat_item.price_display}}&lt;em ng-if="data.sc_cat_item.recurring_price" class="cat_item_price"&gt; {{data.sc_cat_item.price ? '+' : ''}} {{data.sc_cat_item.recurring_price_display + ' ' + data.sc_cat_item.recurring_price_frequency}}&lt;/em&gt;
            &lt;/div&gt;
            &lt;div class="form-group" ng-if="c.showDeliveryTime()"&gt;
              &lt;b&gt;${Delivery Time}:&lt;/b&gt; {{::data.sc_cat_item.estimated_delivery_time}}
            &lt;/div&gt;
            &lt;button sp-ellipsis-tooltip sp-ellipsis-tooltip-title="${Add to Cart}" tabindex="0" ng-if="c.showAddCartBtn()" name="add_to_cart" ng-disabled="disableControls()" ng-click="triggerAddToCart()" class="btn btn-default sc-btn form-control text-overflow-ellipsis"&gt;
              &lt;i class="fa fa fa-shopping-cart pull-left cart-icon-padding-top" aria-hidden="true"&gt;&lt;/i&gt;
              ${Add to Cart}
            &lt;/button&gt;
            &lt;button sp-ellipsis-tooltip sp-ellipsis-tooltip-title="${Update Cart}" tabindex="0" ng-if="data.is_cart_item" name="update" ng-disabled="disableControls()" ng-click="triggerUpdateCart()" class="btn btn-default sc-btn form-control text-overflow-ellipsis"&gt;
              &lt;i class="fa fa fa-shopping-cart pull-left cart-icon-padding-top" aria-hidden="true"&gt;&lt;/i&gt;
              ${Update Cart}
            &lt;/button&gt;
          &lt;/div&gt;
          &lt;div class="form-group relative" ng-if="c.showAddToWishlist()"&gt;
            &lt;button sp-ellipsis-tooltip sp-ellipsis-tooltip-title="${Add to Wish List}" ng-if="!data.is_wishlist_item" name="add_to_wishlist" ng-click="triggerAddToWishlist()" ng-disabled="disableControls()" class="btn btn-default sc-btn form-control text-overflow-ellipsis"&gt;
              &lt;i class="icon-sp-wishlist pull-left cart-icon-margin" aria-hidden="true"&gt;&lt;/i&gt;
              ${Add to Wish List}
            &lt;/button&gt;
            &lt;button sp-ellipsis-tooltip sp-ellipsis-tooltip-title="${Update Wish List}" ng-if="data.is_wishlist_item" name="update_wishlist" ng-click="triggerAddToWishlist()" ng-disabled="disableControls()" class="btn btn-default sc-btn form-control text-overflow-ellipsis"&gt;
              &lt;i class=" icon-sp-wishlist pull-left cart-icon-margin" aria-hidden="true"&gt;&lt;/i&gt;
              ${Update Wish List}
            &lt;/button&gt;
          &lt;/div&gt;
          &lt;div class="form-group relative" ng-if="c.options.native_mobile != 'true'"&gt;
            &lt;button sp-ellipsis-tooltip sp-ellipsis-tooltip-title="${Save as Draft}" ng-if="c.showDraftButtons() &amp;&amp; !data.is_draft_item" name="save_item" ng-click="triggerSaveItem()" ng-disabled="disableControls()" class="btn btn-default sc-btn form-control text-overflow-ellipsis"&gt;
              &lt;i class="icon-save pull-left cart-icon-margin" aria-hidden="true"&gt;&lt;/i&gt;
              ${Save as Draft}
            &lt;/button&gt;
            &lt;button sp-ellipsis-tooltip sp-ellipsis-tooltip-title="${Update Draft}" ng-if="c.showDraftButtons() &amp;&amp; data.is_draft_item" name="update_saved_item" ng-click="triggerSaveItem()" ng-disabled="disableControls()" class="btn btn-default sc-btn form-control text-overflow-ellipsis"&gt;
              &lt;i class="icon-save pull-left cart-icon-margin" aria-hidden="true"&gt;&lt;/i&gt;
              ${Update Draft}
            &lt;/button&gt;
          &lt;/div&gt;
          &lt;div class="form-group m-b-xs" ng-if="c.options.native_mobile != 'true'"&gt;
            &lt;button sp-ellipsis-tooltip sp-ellipsis-tooltip-title="{{submitButtonMsg}}" ng-if="::c.showOrderNowButton()" tabindex="0" name="submit" id="submit-btn" ng-disabled="disableControls()" ng-click="triggerOnSubmit()" class="btn btn-primary btn-block text-overflow-ellipsis"&gt;{{submitButtonMsg}}&lt;/button&gt;
            &lt;span ng-if="submitting" style="padding-left:4px"&gt;${Submitting...}&lt;/span&gt;
            &lt;span ng-if="validating" style="padding-left:4px"&gt;${Validating...}&lt;/span&gt;
          &lt;/div&gt;
          &lt;div class="form-group m-b-xs flex-center" ng-if="c.options.native_mobile == 'true' &amp;&amp; 1==2"&gt;
            &lt;button tabindex="0" ng-if="c.showAddCartBtn()" name="add_to_cart" ng-disabled="disableControls()" ng-click="triggerAddToCart()" class="btn btn-default sc-btn native-btn rounded m-r-lg padder-xl"&gt;
              ${Add to Cart}
            &lt;/button&gt;
            &lt;button tabindex="0" ng-if="data.is_cart_item" name="update" ng-disabled="disableControls()" ng-click="triggerUpdateCart()" class="btn btn-default sc-btn native-btn rounded m-r-lg padder-xl"&gt;
              &lt;i class="fa fa fa-shopping-cart sc-order-widget-btn pull-left" aria-hidden="true"&gt;&lt;/i&gt;
              ${Update Cart}
            &lt;/button&gt;
            &lt;div class="form-group m-b-xs"&gt;
              &lt;button ng-if="::c.showOrderNowButton()" tabindex="0" name="submit" id="submit-btn" ng-disabled="disableControls()" ng-click="triggerOnSubmit()" class="btn btn-primary rounded m-l-lg padder-xl"&gt;{{submitButtonMsg}}&lt;/button&gt;
              &lt;span ng-if="submitting" style="padding-left:4px"&gt;${Submitting...}&lt;/span&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="sc-item-error-messages" ng-if="c.options.show_field_validation_messages === 'true'"&gt;
          &lt;div ng-if="hasMandatory(c.mandatory)" class="row alert alert-info-border" style="margin-top: .5em" aria-live="assertive"&gt;
            &lt;div class="col-sm-12"&gt;
              &lt;div id="required_field_bottom" role="group" aria-label="${Required information - clicking on any button in this group will take you to the corresponding mandatory field}"&gt;
                &lt;div id="required_information_bottom" ng-if="hasMandatory(c.mandatory)" aria-hidden="true"&gt;${Required information} &lt;/div&gt;
                &lt;div style="display:flex; flex-wrap:wrap; grid-row-gap:3px;"&gt;
                  &lt;div ng-repeat="f in c.mandatory"&gt;
                      &lt;span class="sr-only" id="req_info_bottom_{{::f.name}}"&gt;${Required information}&lt;/span&gt;
                  		&lt;button for="req_info_bottom_{{::f.name}}" class="label sc-field-error-label sc-reqd-info-btn" ng-click="getFocus(f)" title="{{::f.label}}"&gt;{{::f.label}}&lt;/button&gt;
                &lt;/div&gt;
                &lt;/div&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div ng-if="::!data.sc_cat_item" &gt;
    &lt;div class="panel panel-default"&gt;
      &lt;div class="panel-heading"&gt;&lt;h4 class="panel-title"&gt;${Item not found}&lt;/h4&gt;&lt;/div&gt;
      &lt;div class="panel-body wrapper"&gt;
        &lt;p&gt;${This item is not found or currently not available}&lt;/p&gt;
        &lt;p&gt;${Suggestions}:&lt;/p&gt;
        &lt;ul&gt;
          &lt;li&gt;${Try searching for the item}&lt;/li&gt;
          &lt;li&gt;${Go to the Service Catalog homepage}&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="sr-only" aria-live="assertive"&gt;{{::c.status}}&lt;/div&gt;
&lt;/div&gt;
&lt;div ng-if="::!data.recordFound" class="alert alert-info"&gt;{{::m.invalidRecordMsg}}&lt;/div&gt;
&lt;div ng-if="::data.not_for_mobile"&gt;
  &lt;div class="wrapper-lg flex-center"&gt;
    ${We're sorry, this item isn't available on mobile}
  &lt;/div&gt;
  &lt;div class="flex-center"&gt;
    &lt;img src="not_viewable.png" width="300"/&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;now-message key="Added item to shopping cart" value="${Added item to shopping cart}"&gt;&lt;/now-message&gt;
&lt;now-message key="Updated Item to shopping cart" value="${Updated Item to shopping cart}"&gt;&lt;/now-message&gt;
&lt;now-message key="Attachment(s) are not added" value="${Attachment(s) are not added}"&gt;&lt;/now-message&gt;
&lt;now-message key="Please wait, attachment deletion in progress" value="${Please wait, attachment deletion in progress}"&gt;&lt;/now-message&gt;
&lt;now-message key="Leave page?" value="${Leave page?}"&gt;&lt;/now-message&gt;
&lt;now-message key="Changes you made will be lost." value="${Changes you made will be lost.}"&gt;&lt;/now-message&gt;
&lt;now-message key="Cancel" value="${Cancel}"&gt;&lt;/now-message&gt;
&lt;now-message key="Leave" value="${Leave}"&gt;&lt;/now-message&gt;]]&gt;&lt;/template&gt;&lt;/sp_widget&gt;&lt;sys_es_latest_script action="INSERT_OR_UPDATE"&gt;&lt;id&gt;897fdbe3c3341210a7705fd1b4013171&lt;/id&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2024-09-28 20:41:36&lt;/sys_created_on&gt;&lt;sys_id&gt;a29fd3e3c3341210a7705fd1b4013158&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-09-28 20:41:36&lt;/sys_updated_on&gt;&lt;table&gt;sp_widget&lt;/table&gt;&lt;use_es_latest&gt;true&lt;/use_es_latest&gt;&lt;/sys_es_latest_script&gt;&lt;/record_update&gt;</payload>
        <payload_hash>1434111152</payload_hash>
        <record_name>Visitor Catalog Item</record_name>
        <reverted_from/>
        <source>03b4f6ebc3301210a7705fd1b4013159</source>
        <source_table>sys_update_set</source_table>
        <state>previous</state>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-28 21:56:20</sys_created_on>
        <sys_id>99b0bbabc3741210a7705fd1b401310b</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>1923aa27dd60000001</sys_recorded_at>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-28 21:56:20</sys_updated_on>
        <type>Widget</type>
        <update_guid>91b0bbab79741210ccd9e8153db3970b</update_guid>
        <update_guid_history>91b0bbab79741210ccd9e8153db3970b:1434111152,c450bfe3ad741210913fb50a5ff6f175:89186448,33ebeb27a3741210a28803db272be404:-693135091,974b2363cb741210b382a5ad0b465fcc:633834784,55666b2f1834121002015772ee0f0d16:693432435,5483e76bc8341210c33277e9168ace60:-1611136429,d0916ba75a341210fc7a4291bfa8c7d7:-1757843551,cac0a3a70b3412109e17b0536ad477bc:-1130100030,25a0e7271e341210baada953bc2fbe9c:591365369,457fdbe38d3412105b95244c2fcb9b73:10561769</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete display_value="Visitor Catalog Item">44b9df30c3051210a7705fd1b40131e1</sys_audit_delete>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-10-02 17:28:11</sys_created_on>
        <sys_db_object display_value="" name="sp_widget">sp_widget</sys_db_object>
        <sys_id>39cbe01dac4b45809f1a37c4eb6961c4</sys_id>
        <sys_metadata>897fdbe3c3341210a7705fd1b4013171</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Visitor Catalog Item</sys_name>
        <sys_package display_value="Visitor Management" source="x_845458_visitorsa">3ab4f6ebc3301210a7705fd1b4013154</sys_package>
        <sys_parent/>
        <sys_policy/>
        <sys_scope display_value="Visitor Management">3ab4f6ebc3301210a7705fd1b4013154</sys_scope>
        <sys_scope_delete display_value="">e9e2c45299ed4c98a68cdb34d29bdd21</sys_scope_delete>
        <sys_update_name>sp_widget_897fdbe3c3341210a7705fd1b4013171</sys_update_name>
        <sys_update_version display_value="sp_widget_897fdbe3c3341210a7705fd1b4013171">99b0bbabc3741210a7705fd1b401310b</sys_update_version>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-10-02 17:28:11</sys_updated_on>
    </sys_metadata_delete>
</record_update>
