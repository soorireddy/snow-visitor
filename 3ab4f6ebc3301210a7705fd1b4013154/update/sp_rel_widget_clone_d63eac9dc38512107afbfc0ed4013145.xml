<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_rel_widget_clone">
    <sp_rel_widget_clone action="INSERT_OR_UPDATE">
        <child display_value="Visitor Login">123eac9dc38512107afbfc0ed4013142</child>
        <cloned>2024-10-03 18:15:59</cloned>
        <last_validated>2024-10-03 18:15:59</last_validated>
        <parent display_value="Login">6506d341cb33020000f8d856634c9cdc</parent>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;sp_widget&gt;&lt;category&gt;standard&lt;/category&gt;&lt;client_script&gt;&lt;![CDATA[function loginCtrl($scope, $http, $window, $location, glideUserSession, glideSystemProperties, spUtil) {

	var c = this;
	c.remember_me = c.data.forgetMe ? false : c.data.rememberMeDefault;
	c.data.url_suffix = $scope.portal ? $scope.portal.url_suffix : "";
	c.masked = true;
	if (!c.data.is_logged_in &amp;&amp; c.data.multisso_enabled &amp;&amp; c.data.default_idp) {
		var pageId = $location.search().id || $scope.page.id;
		var isLoginPage = ($scope.portal.login_page_dv == pageId) || ('login' == pageId);
		c.server.get({
			action: "set_sso_destination",
			pageURI: isLoginPage ? null : $location.url()
		}).then(function() {
			$window.location = "/login_with_sso.do?glide_sso_id=" + c.data.default_idp;
		});
	} else if (!c.data.is_logged_in &amp;&amp; c.data.certAuthRedirect &amp;&amp; c.data.cert_based_auth &amp;&amp; c.data.certHeader == "true") {
        login(null, null, true);
    }
    
    c.login = function(username, password, isCertLogin) {
        login(username, password, isCertLogin);
    };
	
	function login(username, password, isCertLogin) {
		var url = spUtil.getURL({sysparm_type: 'view_form.login'});
		
		// If the page isn't public, then the ID in the
		// URL won't match the rendered page ID
		var pageId = $location.search().id || $scope.page.id;
		var isLoginPage = ($scope.portal.login_page_dv == pageId) || ('login' == pageId);

		return $http({
			method: 'post',
			url: url,
			data: $.param({
				'sysparm_type': 'login',
				'ni.nolog.user_password': true,
				'remember_me': !!c.remember_me ? true : false,
				'user_name': username,
				'user_password': password,
				'get_redirect_url': true,
				'is_direct_redirect': true,
				'sysparm_goto_url': isLoginPage ? null : $location.url(),
				'mfa_redirect_url': isLoginPage ? null : c.data.pageURI,
				'cert_login' : !!isCertLogin
			}),
			headers: {
				'Content-Type': 'application/x-www-form-urlencoded'
			}
		}).then(function(response) {
			if (!response.data) {
				c.message = $scope.data.errorMsg;
				return;
			}

			if (response.data.status == 'success') {
				if (c.data.multiFactorAuthEnabled) {
					c.server.get({
						action: "multi_factor_auth_setup",
						directTo: response.data.redirect_url
					}).then(handleLoginResponse.bind(response), handleLoginResponse.bind(response));
				} else {
					handleLoginResponse.call(response);
				}
			} else if (response.data.status == 'mfa_code_required') {
					$window.location = '/validate_multifactor_auth_code.do';
			} else {
				// wrong username or password
				c.message = response.data.message;
				c.password = "";
				c.username = "";
				angular.element("#username").focus();
			}

		}, function errorCallback(response) {
			c.message = $scope.data.errorMsg;
		});
	};

	c.oidcLogin = function(idProvider){
		var pageId = $location.search().id || $scope.page.id;
		var isLoginPage = $scope.portal.login_page_dv == pageId;
		c.server.get({
			action: "set_sso_destination",
			pageURI: isLoginPage ? null : $location.url()
		}).then(function() {
			$window.location = "/login_with_sso.do?glide_sso_id=" + idProvider;
		});
	};
	
	c.externalLogin = function() {
		var pageId = $location.search().id || $scope.page.id;
		var isLoginPage = ($scope.portal.login_page_dv == pageId) || ('login' == pageId);
		c.server.get({
			action: "set_sso_destination",
			pageURI: isLoginPage ? null : $location.url()
		}).then(function() {
			glideSystemProperties.set("glide.authenticate.multisso.enabled", true);

			glideUserSession.getSsoRedirectUrlForUsername(c.username)
				.then(function(url) {
					$window.location = url;
				}, function(err) {
					spUtil.addErrorMessage($scope.data.errorMsg2);
				});
		});
	}

	function handleLoginResponse() {
		c.success = this.data.message;
		$window.location = this.data.redirect_url;
		if ($window.location.hash.length &gt; 0)
			$window.location.reload();
	}

	c.setExternalLogin = function(newVal) {
		c.externalLoginMode = newVal;
		if(!newVal)
			c.masked = true;
	}
	
	c.renderMaskIcon = function() {
		var passwordEle = document.getElementById("password");
		var maskEle = document.getElementById("mask_icon");
		$(maskEle).tooltip('hide');
		var btnDescription = document.getElementById("btnDescription");
		var element = document.getElementsByClassName("mask_btn")[0];
		var isPasswordType = passwordEle.type === 'password';
		maskEle.classList.toggle('active', isPasswordType);
    		maskEle.setAttribute('data-original-title', (isPasswordType) ? '${Hide password}' : '${Show password}');
    		element.setAttribute('aria-label', (isPasswordType) ? '${Hide password}' : '${Show password}');		
		passwordEle.type  = (isPasswordType) ? 'text' : 'password';
		btnDescription.textContent = (isPasswordType)? '${Password shown}' : '${Password hidden}';
	}
}]]&gt;&lt;/client_script&gt;&lt;controller_as&gt;c&lt;/controller_as&gt;&lt;css&gt;.sp-login-widget { 
  
  .panel-body {
    padding: 15px 15px 10px;
  }
  
  .form-control,
  label[for="username"],
  label[for="password"] {
    color: black;
  }
  
  .btn {
    font-weight: 600;
    font-size: 2.0rem;
    background-color: $login-btn-bg;
    border-color: $login-btn-border;
  }
  
  .list-group {
    margin-bottom: 12px;
  }
  
  .login-button-old {
    margin-top: 7px;
  }
  
  .login-alert {
    margin-left: 0px;
    margin-right: 0px;
  }

}
//STRY50033370: Forgot Password link in the login widget
//Start -- login widget advanced view
.sp-login-widget.advanced {  
  .panel-title {
    font-size: 25px;
  }
  
  .panel-default &amp;gt; .panel-heading {
    background-color: $panel-bg; 
    border: 0px;    
  }
  
  .panel-body {
    padding: 0px 0px 10px;
  }

  [placeholder]::-webkit-input-placeholder { 
    transition: opacity 0.01s 0.01s ease !important; 
    opacity: 0 !important; 
  }

  .form-signin {
    .list-group-item { 
      border: 0px;
    }
    
    .login-alert {
    margin-left: 15px;
    margin-right: 15px;
    }
    
    .btn {
      font-weight: 400 !important;
      border-color: $brand-primary;
      background-color: $brand-primary;
      border-radius: 2px;
    }

    .forgot-pwd-div {
      padding-right: 15px;
      padding-left: 15px;
      .forgot-text {
        font-size: 16px;	
        line-height: 20px;
        padding-top: 8px;
      }
      
      .btn {
        line-height: 16px;
        font-size: 14px;
        margin-top: 0px;
      }
      
    }
    
    .submit-btn {
      padding-right: 15px;
      padding-left: 15px;
    }
    
    .input-group-advanced {
      margin-top: 10px;
    }

    .input-advanced {
      border: 1px solid $btn-default-border !important;
      border-radius: 3px !important;
      background-color: $panel-bg !important;
    }
    
    .checkbox {
      padding-left: 15px !important; 
    }
   
    .label-advanced {
      position: relative;
      width: 100%;
      padding: 0;
      overflow: visible;
      border: 0;
      height: 19px;
      color: $text-color;
      font-size: 16px;
      line-height: 19px;
    }
    
    .mask_btn {
      background-color: #fcfcfc;
      border-color: #939393;
      border-left : 0px;
      width:fit-content;
      border-top-left-radius: 0px !important;
      border-bottom-left-radius: 0px !important;
      font-size: 1.4rem !important;
      position: relative;

	&amp;amp;.active {
		&amp;amp;:after {
          	background-color: #2e2e2e;
			content: "";
			height: 16px;
			left: 50%;
	    		margin-top: -8px;
			margin-inline-start: -1px;
			margin-block-start: -8px;
			position: absolute;
			top: 50%;
			transform: rotate(45deg);
			width: 1px;
			}
		}
    }

    
    .loginWithBtn {
      padding: 0 1.5rem;
    }
    
  }

}
//End -- login widget advanced view
.sp-self-registration {
  text-align: center;
}
.sp-login-widget {
.bar {
  margin: 12px 0;
  span {
    position: relative;
    display: block;
    text-align: center;

    &amp;amp;:before, &amp;amp;:after {
      content: '';
      position: absolute;
      width: calc(50% - 24px);
      height: 1px;
      background-color: #b3bac7;
      top: 8px;
    }
    &amp;amp;:before {
      right: 0;
    }
    &amp;amp;:after {
      left: 0;
    }
  }
}
button.cert, a.idp {
  background-color: #fff !important;
  border-color: #ccc !important;
  width: 100%;
  margin-bottom: 10px;

  &amp;amp;:hover {
    border-color: #adadad;
    background-color: #e6e6e6;
  }
  img {
    height: 20px;
    width: 20px;
    margin-bottom: 3px;
    margin-right: 9px;
  }
}
  img.eye-icon {
    content:url("eye.svg");
    cursor: pointer;
    width:18px;
    height:18px;
    display: flex;
    justify-content:center;
    align-items:center;
    float:left;
  }
  
  img.eye-icon.slashed {
    content:url("eye-slash.svg");
  }
  
  .password-group {
    display:flex;
    flex-direction:row;
  }
 
  .mask_btn {
      background-color: #fcfcfc;
      border-color: #939393;
      border-left : 0px;
      width:fit-content;
      border-top-left-radius: 0px !important;
      border-bottom-left-radius: 0px !important;
      font-size: 1.4rem !important;
      position: relative;

	&amp;amp;.active {
		&amp;amp;:after {
          	background-color: #2e2e2e;
			content: "";
			height: 16px;
			left: 50%;
	    		margin-top: -8px;
			margin-inline-start: -1px;
			margin-block-start: -8px;
			position: absolute;
			top: 50%;
			transform: rotate(45deg);
			width: 1px;
			}
		}
    }
  input::-ms-reveal,
    input::-ms-clear {
      display: none;
  }
}&lt;/css&gt;&lt;data_table&gt;sp_instance&lt;/data_table&gt;&lt;demo_data/&gt;&lt;description/&gt;&lt;docs/&gt;&lt;field_list/&gt;&lt;has_preview&gt;false&lt;/has_preview&gt;&lt;id&gt;widget-login&lt;/id&gt;&lt;internal&gt;false&lt;/internal&gt;&lt;link/&gt;&lt;name&gt;Login&lt;/name&gt;&lt;option_schema&gt;[{"name":"show_panel","section":"Presentation","default_value":"true","label":"Show Panel","type":"boolean"},{"name":"use_advanced","section":"Presentation","default_value":"false","label":"Use Advanced View","type":"boolean"}]&lt;/option_schema&gt;&lt;public&gt;true&lt;/public&gt;&lt;roles/&gt;&lt;script&gt;&lt;![CDATA[(function() {
    options.show_panel = options.show_panel == "true" || options.show_panel == true;

    if (input &amp;&amp; input.action === "multi_factor_auth_setup") {
        if (gs.getSession().getProperty("setup_multifactor_authn")) {
            gs.getSession().putProperty("nav_to", input.directTo);
            gs.getSession().putProperty("starting_page", input.directTo);
            gs.getSession().putProperty("is_direct_redirect", "true");
        }
        return;
    }

    // We don't want to set a starting page until we've begun the login process.
    if (input &amp;&amp; input.action === "set_sso_destination") {
        var gs_nav_to = gs.getSession().getProperty("nav_to");
        gs.getSession().putProperty("nav_to", null);

        if (input.pageURI) {
            gs.getSession().putProperty("is_direct_redirect", "true");
            gs.getSession().putProperty("starting_page", input.pageURI);
        } else if (!gs.getSession().getProperty("starting_page") &amp;&amp; gs_nav_to)
            gs.getSession().putProperty("starting_page", gs_nav_to);
        return;

    }

    // for self registration fields
    var portalRecord = $sp.getPortalRecord();
    var self_registration_field = portalRecord ? portalRecord.getValue("user_registration_config") : "";
    if (self_registration_field) {
        var registration_config = new GlideRecord("sys_user_registration_config");
        registration_config.addActiveQuery();
        registration_config.query('sys_id', self_registration_field);
        if (registration_config.next()) {
            var self_registration_record_producer = registration_config.getValue("record_producer");
            var self_registration_label = registration_config.getValue("registration_label") || gs.getMessage("Sign Up");
            data.self_registration_record_producer = self_registration_record_producer;
            data.self_registration_label = self_registration_label;
        }
    }

    //Enabling certificate based authentication per portal
    if (portalRecord &amp;&amp; (portalRecord.getValue('enable_certificate_based_authentication') == 1))
        data.cert_based_auth = gs.getProperty('glide.authenticate.mutual.enabled', 'false') == 'true';
    
    //get the certificate header
    if (data.cert_based_auth) {
	var request = GlideTransaction.get().getRequest();
	var certHeader = request.getHeader("X-Client-Cert");
	if (!certHeader) {
		data.certHeader = "false";
            gs.log("Failed to register PIV/CAC certificate to the user account.");
        } else
		data.certHeader = "true";    
    }

    //Get the OpenID Connect type Identity provider which can be shown on the Portal login page.
    data.isShowLoginWithIdps = false;
    data.isMultiSSOActive = gs.getProperty('glide.authenticate.multisso.enabled', 'false') == 'true';
    var gr = new GlideRecord("oidc_identity_provider");
    if (data.isMultiSSOActive &amp;&amp; gr.isValid()) {
        var oidcUtil = new MultiSSO_OidcUtil();
        data.oidcRecords = oidcUtil.getOidcIdpRecords();
        data.isShowLoginWithIdps = (data.oidcRecords.length &gt; 0);
    }    
        

    //STRY50033370: Forgot Password link in the login widget
    data.pswdResetUrl = gs.getProperty('glide.security.password_reset.uri');
    data.forgotPwdLinkProp = gs.getProperty('glide.security.forgot_password.display.link');

    data.errorMsg = gs.getMessage("There was an error processing your request");
    data.errorMsg2 = gs.getMessage("An error has occurred - please contact your system administrator");
    data.passwordMsg = gs.getMessage("Password");
    data.usernameMsg = gs.getMessage("User name");
    data.forgetMe = GlideProperties.getBoolean("glide.ui.forgetme");
    data.rememberMeDefault = GlideProperties.getBoolean('glide.ui.remember.me.default', true);
    data.is_logged_in = gs.getSession().isLoggedIn();
    var bypass_sso = options.bypass_sso == "true";
    data.multisso_enabled = !bypass_sso &amp;&amp; GlideProperties.getBoolean("glide.authenticate.multisso.enabled");
    data.default_idp = GlideProperties.get("glide.authenticate.sso.redirect.idp");
    data.pageURI = new GlideSPUtil().getPageUri();
    data.multiFactorAuthEnabled = GlideProperties.getBoolean('glide.authenticate.multifactor', false);
    data.certAuthRedirect = gs.getProperty('glide.authenticate.cert.redirect.enable', 'false') == 'true';

    //STRY53144967: Handle user redirection to specific Identity provider mapped in Custom Url record for Portals
    var customURL = GlideProperties.getBoolean('glide.customurl.enabled', false);
    if (customURL == true &amp;&amp; data.multisso_enabled == true) {
		var idp = SNC.CustomURLSPUtil.getAutoRedirectIDPForCustomURLWithPortal();
		if(GlideStringUtil.notNil(idp))
			data.default_idp = idp;
    }
	
	//Show info message is session access is reduced
    var isSessionAccessReduced = GlideSession.get().getBooleanProperty("isSessionAccessReduced", false);
    var isSessionAccessMessageShown = GlideSession.get().getBooleanProperty("isSessionAccessReducedMessageShown", false);
    if (isSessionAccessReduced &amp;&amp; !isSessionAccessMessageShown)
        SNC.SessionAccessUtil.showUserInfoMessageIfAccessReduced();
})();]]&gt;&lt;/script&gt;&lt;servicenow&gt;true&lt;/servicenow&gt;&lt;sys_class_name&gt;sp_widget&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2015-11-16 21:42:24&lt;/sys_created_on&gt;&lt;sys_id&gt;6506d341cb33020000f8d856634c9cdc&lt;/sys_id&gt;&lt;sys_mod_count&gt;453&lt;/sys_mod_count&gt;&lt;sys_name&gt;Login&lt;/sys_name&gt;&lt;sys_package display_value="Service Portal - Core" source="com.glide.service-portal"&gt;44697b44e4d2021008dda4ccc40080fb&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;&lt;sys_update_name&gt;sp_widget_6506d341cb33020000f8d856634c9cdc&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2023-05-05 06:12:03&lt;/sys_updated_on&gt;&lt;template&gt;&lt;![CDATA[&lt;div ng-if="!data.is_logged_in" class="sp-login-widget" ng-class="::(c.options.use_advanced == 'true' ? 'advanced' : '')"&gt;
  &lt;form ng-if="!c.externalLoginMode" class="form-signin" ng-submit="c.login(c.username, c.password)" method="post"&gt;
		&lt;div ng-class="::{'panel panel-default': c.options.show_panel}"&gt;
			&lt;div ng-if="::c.options.show_panel" class="panel-heading padder-v"&gt;	      
				&lt;h3 class="panel-title"&gt;${Login}&lt;/h3&gt;
			&lt;/div&gt;
			&lt;div ng-class="::{'panel-body': c.options.show_panel}"&gt;
				&lt;div class="list-group list-group-sm"&gt;
					&lt;div class="list-group-item"&gt;
            &lt;label for="username" class="label-advanced"&gt;{{::data.usernameMsg}}&lt;/label&gt;
            &lt;input id="username" name="username" autocapitalize="off" ng-keypress="c.message = ''" ng-click="c.message = ''" class="form-control input-advanced input-group-advanced" type="text" autofocus="true" ng-model="c.username" autocomplete="off"/&gt;
					&lt;/div&gt;
					&lt;div class="list-group-item"&gt;
            &lt;label for="password" class="label-advanced"&gt;{{::data.passwordMsg}}&lt;/label&gt;
                &lt;p id="btnDescription" class="sr-only" aria-live="polite"&gt;"${Password hidden}&lt;/p&gt;
            &lt;div class="input-group password-group input-group-advanced"&gt;
					&lt;input id="password" name="password" ng-keypress="c.message = ''" ng-click="c.message = ''" class="form-control input-advanced" type="password" ng-model="c.password" autocomplete="off"/&gt;
					&lt;span class="input-advanced" &gt;
              				&lt;button
						id="mask_icon"
						type="button"
						class="btn btn-default icon-preview input-group-append mask_btn sn-tooltip-basic"
						ng-Click="c.renderMaskIcon()"
						aria-label="${Show Password}"
						data-toggle="tooltip"
						data-container="body"
						data-original-title="${Show password}"&gt;&lt;/button&gt;
    				&lt;/span&gt;
    			&lt;/div&gt;
					&lt;/div&gt;
				&lt;/div&gt;

				&lt;div ng-if="c.message" class="alert alert-danger login-alert" role="alert"&gt;{{c.message}}&lt;/div&gt;
				&lt;div ng-if="c.success" class="alert alert-success login-alert" role="alert"&gt;{{c.success}}&lt;/div&gt;

				&lt;div ng-if="::!c.data.forgetMe" class="checkbox"&gt;
          &lt;label&gt;
            &lt;input name="c.remember_me" ng-model="c.remember_me" checked="checked" id="remember_me" type="checkbox" class="checkbox" value="true"/&gt; ${Remember me}
					&lt;/label&gt;
				&lt;/div&gt;
        &lt;!--STRY50033370: Forgot Password link in the login widget--&gt;
        &lt;div class="forgot-pwd-div m-b"&gt;
          &lt;div class="row"&gt;
            &lt;div ng-if="::(c.data.forgotPwdLinkProp == 'true')" class="forgot-text" ng-class="::(c.options.use_advanced == 'true' ? 'col-xs-8' : 'col-xs-12')"&gt;
              &lt;a class="forgot-pwd-link" ng-href="{{::c.data.pswdResetUrl}}"&gt;${Forgot Password ?}&lt;/a&gt;
            &lt;/div&gt;
            &lt;div ng-class="::(c.options.use_advanced == 'true' &amp;&amp; c.data.forgotPwdLinkProp =='true' ? 'col-xs-4' : 'col-xs-12')"&gt;
              &lt;button name="login" type="submit" class="btn btn-lg btn-primary btn-block login-button-old"&gt;
                ${Login}
              &lt;/button&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="row set-login-type-link m-t" ng-if="::data.multisso_enabled"&gt;
          &lt;div class="col-xs-12 text-center"&gt;
            &lt;a href="javascript:void(0)"
               ng-click="c.setExternalLogin(true)"&gt;${Use external login}&lt;/a&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div ng-class="col-xs-12" ng-if="data.cert_based_auth || data.isShowLoginWithIdps"&gt;
                &lt;p class="bar"&gt;&lt;span&gt;${OR}&lt;/span&gt;&lt;/p&gt;
              &lt;/div&gt;
        &lt;div ng-class="col-xs-12" ng-if="::c.data.cert_based_auth" class="loginWithBtn"&gt;
           &lt;button name="login" type="button" class="cert btn btn-lg btn-default" ng-click="c.login(null, null, true)"&gt;&lt;img alt="" ng-src="certLoginLogo.svg"/&gt;${Login with PIV/CAC card}&lt;/button&gt;
        &lt;/div&gt;
        &lt;div ng-repeat="a in ::c.data.oidcRecords"&gt;
           &lt;div ng-class="col-xs-12" class="loginWithBtn"&gt;                 
              &lt;a name="login" class="idp btn btn-lg btn-default" href="javascript:void(0)" ng-click="c.oidcLogin(a.sysId)"&gt;
              &lt;img ng-if="::a.isLogoUrlValid" alt="" ng-src="{{::a.logoUrl}}"/&gt;${Log in with} {{::a.name}}
              &lt;/a&gt;
           &lt;/div&gt;
        &lt;/div&gt;
			&lt;/div&gt;
		&lt;/div&gt;
	&lt;/form&gt;
	&lt;form ng-if="c.externalLoginMode" class="form-signin" ng-submit="c.externalLogin()" method="post"&gt;
		&lt;div ng-class="::{'panel panel-default': c.options.show_panel}"&gt;
			&lt;div ng-if="::c.options.show_panel" class="panel-heading"&gt;
				&lt;h3 class="panel-title"&gt;${External Login}&lt;/h3&gt;
			&lt;/div&gt;

			&lt;div ng-class="::{'panel-body': c.options.show_panel}"&gt;
				&lt;div class="list-group list-group-sm"&gt;
					&lt;div class="list-group-item"&gt;
            &lt;label for="username" class="label-advanced"&gt;${User ID}&lt;/label&gt;
            &lt;input id="username" name="username" ng-click="message = ''" class="form-control input-advanced" type="text" autofocus="true" ng-model="c.username"/&gt;
					&lt;/div&gt;
				&lt;/div&gt;

        &lt;div class="submit-btn row"&gt;
          &lt;div class="col-xs-12"&gt;
            &lt;button name="login" type="submit" class="btn btn-lg btn-primary btn-block"&gt;
              ${Submit}
            &lt;/button&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="set-login-type-link row m-t"&gt;
          &lt;div class="col-xs-12 text-center"&gt;
            &lt;a href="javascript:void(0)"
               ng-click="c.setExternalLogin(false)"&gt;${Use internal login}&lt;/a&gt;    
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
		&lt;/div&gt;
	&lt;/form&gt;
  &lt;div class="sp-self-registration forgot-pwd-link" ng-if="::c.data.self_registration_record_producer"&gt;${Don't have an account?}
    &lt;a ng-href="/{{::c.data.url_suffix}}?id=sn_user_registration&amp;sys_id={{::c.data.self_registration_record_producer}}"&gt;{{::c.data.self_registration_label}}&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;]]&gt;&lt;/template&gt;&lt;/sp_widget&gt;</payload>
        <sys_class_name>sp_rel_widget_clone</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-10-03 18:15:59</sys_created_on>
        <sys_id>d63eac9dc38512107afbfc0ed4013145</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>123eac9dc38512107afbfc0ed4013142</sys_name>
        <sys_package display_value="Visitor Management" source="x_845458_visitorsa">3ab4f6ebc3301210a7705fd1b4013154</sys_package>
        <sys_policy/>
        <sys_scope display_value="Visitor Management">3ab4f6ebc3301210a7705fd1b4013154</sys_scope>
        <sys_update_name>sp_rel_widget_clone_d63eac9dc38512107afbfc0ed4013145</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-10-03 18:15:59</sys_updated_on>
    </sp_rel_widget_clone>
</record_update>
