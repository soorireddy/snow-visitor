<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller = function($scope, $timeout) {
	var c = this;  // Assign the controller to 'c' for consistent reference

	// Controller properties
	c.qrCode = '';            // Holds the detected QR code value
	c.isScanning = false;     // Track scanning state
	c.timeoutMessage = '';    // Message for timeout
	c.autoStart = false;  
	var scanTimeout;          // Timeout handler reference

	// Function to start the QR code scanning process
	c.startScan = function() {
		c.timeoutMessage = '';  // Clear any previous timeout messages
		c.qrCode = '';          // Reset the QR code display
		c.isScanning = true;    // Set scanning state to true

		// Initialize Quagga for QR code scanning
		Quagga.init({
			inputStream: {
				name: "Live",
				type: "LiveStream",
				target: document.querySelector('#qr-scanner-container'),
				constraints: {
					width: 640,
					height: 480,
					facingMode: "environment" // Use the back camera
				}
			},
			decoder: {
				readers: [] // No barcode readers needed as we are using jsQR
			}
		}, function(err) {
			if (err) {
				console.error(err);
				return;
			}
			Quagga.start();  // Start the camera stream
			console.log("QR code scanner started.");
		});

		// Set a timeout to stop scanning if no QR code is detected in 15 seconds
		scanTimeout = $timeout(function() {
			c.stopScan();  // Stop scanning after timeout
			c.timeoutMessage = 'Scanning timed out. Please try again.';
		}, 15000);  // 15 seconds timeout
	};

	// Function to stop the scanning process
	c.stopScan = function() {
		if (c.isScanning) {
			Quagga.stop();           // Stop the camera stream
			c.isScanning = false;    // Set scanning state to false
			$timeout.cancel(scanTimeout);  // Clear any running timeout
			console.log("QR code scanner stopped.");
		}
	};

	// Function to restart scanning (after stopping)
	c.rescan = function() {
		c.startScan();
	};
	if(c.autoStart) {
		c.startScan();
	}
	// Quagga event listener to process video frames for QR code detection using jsQR
	Quagga.onProcessed(function (result) {
        var video = document.querySelector('video');
        if (video) {
            var canvas = document.createElement('canvas');
            var context = canvas.getContext('2d');
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            context.drawImage(video, 0, 0, canvas.width, canvas.height);

            // Extract image data and pass it to jsQR for decoding
            var imageData = context.getImageData(0, 0, canvas.width, canvas.height);
            var qrCode = jsQR(imageData.data, canvas.width, canvas.height);

            if (qrCode) {
                try {
                    var decodedData = JSON.parse(qrCode.data);  // Parse the JSON payload

                    // Validate the expiration time
                    var now = new Date();
                    var expiresAt = new Date(decodedData.expiresAt);  // Convert to Date object

                    if (now > expiresAt) {
                        // QR code is expired
                        $scope.$applyAsync(function () {
                            c.statusMessage = 'The QR code has expired.';  // Update UI message
                            c.stopScan();  // Stop scanning
                        });
                    } else {
                        // QR code is valid
                        $scope.$applyAsync(function () {
                            c.qrCode = decodedData.data;  // Store the valid QR code data
                            c.statusMessage = 'Valid QR code detected: ' + decodedData.data;  // Display message
                            c.stopScan();  // Stop scanning
                        });
                    }
                } catch (e) {
                    // Handle invalid QR code data or JSON parse error
                    $scope.$applyAsync(function () {
                        c.statusMessage = 'Invalid QR code detected.';  // Display message
                        c.stopScan();  // Stop scanning
                    });
                    console.error('Error parsing QR code data:', e);
                }
            }
        }
    });


	// Stop scanning when the widget is destroyed (clean up resources)
	$scope.$on('$destroy', function() {
		c.stopScan();
	});
};
]]></client_script>
        <controller_as>c</controller_as>
        <css>.qr-code-scanner {
  text-align: center;
  margin-top: 20px;
}

.qr-code-scanner button {
  margin: 10px;
}

.qr-code-scanner .alert {
  margin-top: 20px;
  display: inline-block;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description>QR Code Reader</description>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>qr-code-reader</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
  
}]]></link>
        <name>QR Code Reader</name>
        <option_schema/>
        <public>true</public>
        <roles/>
        <script><![CDATA[(function() {
  /* populate the 'data' object */
  /* e.g., data.table = $sp.getValue('table'); */

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-10-04 06:13:49</sys_created_on>
        <sys_id>dc529799c34112107afbfc0ed401313f</sys_id>
        <sys_mod_count>24</sys_mod_count>
        <sys_name>QR Code Reader</sys_name>
        <sys_package display_value="Visitor Management" source="x_845458_visitorsa">3ab4f6ebc3301210a7705fd1b4013154</sys_package>
        <sys_policy/>
        <sys_scope display_value="Visitor Management">3ab4f6ebc3301210a7705fd1b4013154</sys_scope>
        <sys_update_name>sp_widget_dc529799c34112107afbfc0ed401313f</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-10-15 14:18:05</sys_updated_on>
        <template><![CDATA[<div class="qr-code-scanner">
  <h3>Scan a QR Code</h3>
  <div ng-if="c.qrCode">
    <p>Status: {{c.statusMessage}}</p>
    <p>Detected QR Code: <strong>{{c.qrCode}}</strong></p>
  </div>
  <div>
    <button ng-click="c.startScan()" ng-disabled="c.isScanning" class="btn btn-primary">Start Scan</button>
    <button ng-click="c.stopScan()" ng-disabled="!c.isScanning" class="btn btn-danger">Stop Scan</button>
    <button ng-click="c.rescan()" ng-disabled="c.isScanning" class="btn btn-success">Re-scan</button>
  </div>
  <div ng-if="c.timeoutMessage" class="alert alert-warning">
    {{c.timeoutMessage}}
  </div>
  <div id="qr-scanner-container"  ng-hide="!c.isScanning"></div>
</div>
]]></template>
    </sp_widget>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>dc529799c34112107afbfc0ed401313f</id>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-10-04 06:13:47</sys_created_on>
        <sys_id>45821751c30112107afbfc0ed401313d</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-10-04 06:13:47</sys_updated_on>
        <table>sp_widget</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
