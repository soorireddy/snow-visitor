<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller=function($scope) {
	/* widget controller */
	var c = this;

	$scope.isCaptured = false;
	$scope.photoData = '';
	$scope.availableCameras = [];  // List of available cameras
	$scope.selectedCameraId = null; // Currently selected camera ID
	var videoStream = null; // Variable to store the video stream
	var loadDiv = false;

	// Function to list all available cameras
	$scope.getAvailableCameras = function() {
		navigator.mediaDevices.enumerateDevices()
			.then(function(devices) {
			$scope.availableCameras = devices.filter(function(device) {
				return device.kind === 'videoinput'; // Filter only video input devices (cameras)
			});

			// If at least one camera is found, set the first one as the default selected camera
			if ($scope.availableCameras.length > 0) {
				$scope.selectedCameraId = $scope.availableCameras[0].deviceId;
				$scope.startCamera($scope.selectedCameraId); // Start the default camera
			}
			$scope.$apply(); // Update the scope after async operation
		})
			.catch(function(err) {
			console.error("Error listing cameras: ", err);
		});
	};

	// Function to start the camera with the selected device ID
	$scope.startCamera = function(cameraId) {
		// If there is an existing video stream, stop it first
		$scope.stopCamera();

		// Get the video stream from the selected camera
		navigator.mediaDevices.getUserMedia({ 
			video: { deviceId: cameraId ? { exact: cameraId } : undefined }
		})
			.then(function(stream) {
			videoStream = stream; // Store the stream to stop it later
			var video = document.getElementById('video');
			video.srcObject = stream;
		})
			.catch(function(err) {
			console.error("Error accessing the camera: ", err);
		});
	};

	// Function to stop the camera
	$scope.stopCamera = function() {
		if (videoStream) {
			var tracks = videoStream.getTracks();
			tracks.forEach(function(track) {
				track.stop(); // Stop each track to release the camera
			});
		}
	};

	// Function to capture the photo
	$scope.capturePhoto = function() {
		var video = document.getElementById('video');
		var canvas = document.createElement('canvas');
		canvas.width = 320;
		canvas.height = 240;
		var context = canvas.getContext('2d');
		context.drawImage(video, 0, 0, canvas.width, canvas.height);

		// Convert canvas to base64 image
		$scope.photoData = canvas.toDataURL('image/png');
		$scope.isCaptured = true;

		// Stop the camera stream after capturing the photo
		$scope.stopCamera();

		// Store the captured image data in a hidden field for the record producer
		document.getElementById('imageData').value = $scope.photoData;
	};

	// Function to retake the photo (reopens the camera)
	$scope.retakePhoto = function() {
		$scope.isCaptured = false;
		$scope.photoData = '';
		$scope.startCamera($scope.selectedCameraId); // Start the camera again using the selected camera
	};
$scope.detect = function() {
	// Start the camera for the first time when the widget loads
	$scope.getAvailableCameras();
	$scope.loadDiv = true;
}
	// Make sure to stop the camera stream if the user navigates away
	$scope.$on('$destroy', function() {
		$scope.stopCamera();
	});
};]]></client_script>
        <controller_as>c</controller_as>
        <css/>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description>Visitor Camera Capture</description>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>visitor-camera-capture</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
  
}]]></link>
        <name>Visitor Camera Capture</name>
        <option_schema/>
        <public>true</public>
        <roles/>
        <script><![CDATA[(function() {
  /* populate the 'data' object */
  /* e.g., data.table = $sp.getValue('table'); */

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-10-03 19:15:11</sys_created_on>
        <sys_id>141b3cddc3c512107afbfc0ed4013108</sys_id>
        <sys_mod_count>21</sys_mod_count>
        <sys_name>Visitor Camera Capture</sys_name>
        <sys_package display_value="Visitor Management" source="x_845458_visitorsa">3ab4f6ebc3301210a7705fd1b4013154</sys_package>
        <sys_policy/>
        <sys_scope display_value="Visitor Management">3ab4f6ebc3301210a7705fd1b4013154</sys_scope>
        <sys_update_name>sp_widget_141b3cddc3c512107afbfc0ed4013108</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-10-14 12:28:31</sys_updated_on>
        <template><![CDATA[<div class="camera-capture-widget text-center">
  <!-- Camera selection dropdown -->
  <div ng-show="!loadDiv">
    <button class="btn btn-primary" ng-click="detect()">Start Camera</button>
  </div>
  <div ng-show="loadDiv">
    <label for="camera-select">Select Camera:</label>
    <select id="camera-select" class="form-control" ng-model="selectedCameraId" ng-options="camera.deviceId as camera.label for camera in availableCameras" ng-change="startCamera(selectedCameraId)">
    </select>
  </div>
  <div ng-show="!isCaptured && loadDiv" class="m-t">
    <div class="row text-center">
      <video id="video" width="320" height="240" autoplay></video>
    </div>
    <div class="row text-center">
      <button class="btn btn-primary" ng-click="capturePhoto()">Capture Photo</button>
    </div>
  </div>
  <div ng-show="isCaptured && loadDiv">
    <div class="row text-center">
      <h4>Preview</h4></div>
    <div class="row text-center">
      <img id="photo" width="320" height="240" ng-src="{{photoData}}" />
    </div><div class="row text-center">
    <button class="btn btn-warn m-t" ng-click="retakePhoto()">Retake Photo</button>
    </div>
  </div>

  <!-- Hidden input to store the base64 data -->
  <input type="hidden" id="imageData" value="{{photoData}}" />
</div>
]]></template>
    </sp_widget>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>141b3cddc3c512107afbfc0ed4013108</id>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-10-03 19:15:10</sys_created_on>
        <sys_id>9dcb38ddc3c512107afbfc0ed4013115</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-10-03 19:15:10</sys_updated_on>
        <table>sp_widget</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
